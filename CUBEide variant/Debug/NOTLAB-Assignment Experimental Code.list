
NOTLAB-Assignment Experimental Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009478  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009618  08009618  0000a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c8  080096c8  0000b4c1  2**0
                  CONTENTS
  4 .ARM          00000008  080096c8  080096c8  0000a6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096d0  080096d0  0000b4c1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d0  080096d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096d4  080096d4  0000a6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080096d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000445  2000007c  08009754  0000b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0000b4c1  2**0
                  CONTENTS
 11 .bss          00000468  200004c4  200004c4  0000b4c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000092c  2000092c  0000b4c4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b4c1  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c1df  00000000  00000000  0000b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a44  00000000  00000000  000176d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009a8  00000000  00000000  00019118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000788  00000000  00000000  00019ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020074  00000000  00000000  0001a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000db6c  00000000  00000000  0003a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c168e  00000000  00000000  00047e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000087  00000000  00000000  001094b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002f64  00000000  00000000  00109540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007e  00000000  00000000  0010c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004c4 	.word	0x200004c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009600 	.word	0x08009600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004c8 	.word	0x200004c8
 80001dc:	08009600 	.word	0x08009600

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <I2C1_ClearBusyFlagErratum>:
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
//Source https://electronics.stackexchange.com/questions/351972/hal-i2c-hangs-cannot-be-solved-with-standard-routine-use-to-unlock-i2c
void I2C1_ClearBusyFlagErratum(I2C_HandleTypeDef *instance)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 8000a14:	2364      	movs	r3, #100	@ 0x64
 8000a16:	623b      	str	r3, [r7, #32]
    int timeout_cnt=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24

    // 1. Clear PE bit.
    instance->Instance->CR1 &= ~(0x0001);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f022 0201 	bic.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 8000a2c:	2311      	movs	r3, #17
 8000a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 8000a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a40:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	4874      	ldr	r0, [pc, #464]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000a4a:	f000 fed1 	bl	80017f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a54:	4871      	ldr	r0, [pc, #452]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000a56:	f001 f86d 	bl	8001b34 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	486d      	ldr	r0, [pc, #436]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000a66:	f000 fec3 	bl	80017f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	486b      	ldr	r0, [pc, #428]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000a70:	f001 f860 	bl	8001b34 <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000a74:	e007      	b.n	8000a86 <I2C1_ClearBusyFlagErratum+0x7a>
    {
        timeout_cnt++;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	f300 80bc 	bgt.w	8000bfe <I2C1_ClearBusyFlagErratum+0x1f2>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a8a:	4864      	ldr	r0, [pc, #400]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000a8c:	f001 f83a 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d1ef      	bne.n	8000a76 <I2C1_ClearBusyFlagErratum+0x6a>
            return;
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000a96:	e014      	b.n	8000ac2 <I2C1_ClearBusyFlagErratum+0xb6>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9e:	485f      	ldr	r0, [pc, #380]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000aa0:	f001 f848 	bl	8001b34 <HAL_GPIO_WritePin>
        asm("nop");
 8000aa4:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aac:	485b      	ldr	r0, [pc, #364]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000aae:	f001 f841 	bl	8001b34 <HAL_GPIO_WritePin>

        timeout_cnt++;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f300 80a0 	bgt.w	8000c02 <I2C1_ClearBusyFlagErratum+0x1f6>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000ac2:	2180      	movs	r1, #128	@ 0x80
 8000ac4:	4855      	ldr	r0, [pc, #340]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000ac6:	f001 f81d 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d1e3      	bne.n	8000a98 <I2C1_ClearBusyFlagErratum+0x8c>
            return;
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	4851      	ldr	r0, [pc, #324]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000ad6:	f001 f82d 	bl	8001b34 <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000ada:	e007      	b.n	8000aec <I2C1_ClearBusyFlagErratum+0xe0>
    {
        timeout_cnt++;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ade:	3301      	adds	r3, #1
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	f300 808d 	bgt.w	8000c06 <I2C1_ClearBusyFlagErratum+0x1fa>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	484b      	ldr	r0, [pc, #300]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000af0:	f001 f808 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f0      	bne.n	8000adc <I2C1_ClearBusyFlagErratum+0xd0>
            return;
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b00:	4846      	ldr	r0, [pc, #280]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b02:	f001 f817 	bl	8001b34 <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000b06:	e006      	b.n	8000b16 <I2C1_ClearBusyFlagErratum+0x10a>
    {
        timeout_cnt++;
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dc79      	bgt.n	8000c0a <I2C1_ClearBusyFlagErratum+0x1fe>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000b16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b1a:	4840      	ldr	r0, [pc, #256]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b1c:	f000 fff2 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f0      	bne.n	8000b08 <I2C1_ClearBusyFlagErratum+0xfc>
            return;
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2c:	483b      	ldr	r0, [pc, #236]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b2e:	f001 f801 	bl	8001b34 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000b32:	e006      	b.n	8000b42 <I2C1_ClearBusyFlagErratum+0x136>
    {
        timeout_cnt++;
 8000b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b36:	3301      	adds	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	dc65      	bgt.n	8000c0e <I2C1_ClearBusyFlagErratum+0x202>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8000b42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b46:	4835      	ldr	r0, [pc, #212]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b48:	f000 ffdc 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d1f0      	bne.n	8000b34 <I2C1_ClearBusyFlagErratum+0x128>
            return;
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	4831      	ldr	r0, [pc, #196]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b58:	f000 ffec 	bl	8001b34 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000b5c:	e006      	b.n	8000b6c <I2C1_ClearBusyFlagErratum+0x160>
    {
        timeout_cnt++;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	3301      	adds	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
        if(timeout_cnt>timeout)
 8000b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dc52      	bgt.n	8000c12 <I2C1_ClearBusyFlagErratum+0x206>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8000b6c:	2180      	movs	r1, #128	@ 0x80
 8000b6e:	482b      	ldr	r0, [pc, #172]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b70:	f000 ffc8 	bl	8001b04 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d1f1      	bne.n	8000b5e <I2C1_ClearBusyFlagErratum+0x152>
            return;
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8000b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	4821      	ldr	r0, [pc, #132]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000b98:	f000 fe2a 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8000b9c:	2380      	movs	r3, #128	@ 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481d      	ldr	r0, [pc, #116]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000ba8:	f000 fe22 	bl	80017f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000bb4:	f000 ffbe 	bl	8001b34 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2180      	movs	r1, #128	@ 0x80
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <I2C1_ClearBusyFlagErratum+0x210>)
 8000bbe:	f000 ffb9 	bl	8001b34 <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 |= 0x8000;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bd0:	601a      	str	r2, [r3, #0]

    asm("nop");
 8000bd2:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 &= ~0x8000;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000be2:	601a      	str	r2, [r3, #0]

    asm("nop");
 8000be4:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    instance->Instance->CR1 |= 0x0001;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0201 	orr.w	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(instance);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 ffb4 	bl	8001b64 <HAL_I2C_Init>
 8000bfc:	e00a      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000bfe:	bf00      	nop
 8000c00:	e008      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000c02:	bf00      	nop
 8000c04:	e006      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000c06:	bf00      	nop
 8000c08:	e004      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <I2C1_ClearBusyFlagErratum+0x208>
            return;
 8000c12:	bf00      	nop
}
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000400 	.word	0x48000400

08000c20 <fill_buffer>:

void fill_buffer(float input_buffer[])
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
	buf[0] = LIS3DH_OUT_X_L | 0x80;	//I Would look into this further, but I have no idea how.
 8000c28:	4b42      	ldr	r3, [pc, #264]	@ (8000d34 <fill_buffer+0x114>)
 8000c2a:	22a8      	movs	r2, #168	@ 0xa8
 8000c2c:	701a      	strb	r2, [r3, #0]
		  for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	81fb      	strh	r3, [r7, #14]
 8000c32:	e077      	b.n	8000d24 <fill_buffer+0x104>
			  if (HAL_I2C_IsDeviceReady(&hi2c1, LIS3DH_V_CHIP_ADDR, 3, 100) == 0) { // New data is available
 8000c34:	2364      	movs	r3, #100	@ 0x64
 8000c36:	2203      	movs	r2, #3
 8000c38:	2119      	movs	r1, #25
 8000c3a:	483f      	ldr	r0, [pc, #252]	@ (8000d38 <fill_buffer+0x118>)
 8000c3c:	f001 fa3c 	bl	80020b8 <HAL_I2C_IsDeviceReady>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d168      	bne.n	8000d18 <fill_buffer+0xf8>
				  buf[0] = LIS3DH_OUT_X_L | 0x80;
 8000c46:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <fill_buffer+0x114>)
 8000c48:	22a8      	movs	r2, #168	@ 0xa8
 8000c4a:	701a      	strb	r2, [r3, #0]
				  HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2301      	movs	r3, #1
 8000c54:	4a37      	ldr	r2, [pc, #220]	@ (8000d34 <fill_buffer+0x114>)
 8000c56:	2119      	movs	r1, #25
 8000c58:	4837      	ldr	r0, [pc, #220]	@ (8000d38 <fill_buffer+0x118>)
 8000c5a:	f001 f81f 	bl	8001c9c <HAL_I2C_Master_Transmit>
		    	  HAL_I2C_Master_Receive(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 6, HAL_MAX_DELAY);
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2306      	movs	r3, #6
 8000c66:	4a33      	ldr	r2, [pc, #204]	@ (8000d34 <fill_buffer+0x114>)
 8000c68:	2119      	movs	r1, #25
 8000c6a:	4833      	ldr	r0, [pc, #204]	@ (8000d38 <fill_buffer+0x118>)
 8000c6c:	f001 f92e 	bl	8001ecc <HAL_I2C_Master_Receive>
		    	  x = buf[1] << 8 | buf[0];
 8000c70:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <fill_buffer+0x114>)
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <fill_buffer+0x114>)
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <fill_buffer+0x11c>)
 8000c86:	edc3 7a00 	vstr	s15, [r3]
		    	  y = buf[3] << 8 | buf[2];HAL_UART_Transmit(&huart2, buf, strlen(( char*)buf), HAL_MAX_DELAY);
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <fill_buffer+0x114>)
 8000c8c:	78db      	ldrb	r3, [r3, #3]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	4a28      	ldr	r2, [pc, #160]	@ (8000d34 <fill_buffer+0x114>)
 8000c92:	7892      	ldrb	r2, [r2, #2]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <fill_buffer+0x120>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
 8000ca4:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <fill_buffer+0x114>)
 8000ca6:	f7ff fa9b 	bl	80001e0 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb2:	4920      	ldr	r1, [pc, #128]	@ (8000d34 <fill_buffer+0x114>)
 8000cb4:	4823      	ldr	r0, [pc, #140]	@ (8000d44 <fill_buffer+0x124>)
 8000cb6:	f003 fb09 	bl	80042cc <HAL_UART_Transmit>
		    	  z = buf[5] << 8 | buf[4];
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <fill_buffer+0x114>)
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <fill_buffer+0x114>)
 8000cc2:	7912      	ldrb	r2, [r2, #4]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <fill_buffer+0x128>)
 8000cd0:	edc3 7a00 	vstr	s15, [r3]
		          input_buffer[NB_AXES * i] = x;
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a15      	ldr	r2, [pc, #84]	@ (8000d3c <fill_buffer+0x11c>)
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	601a      	str	r2, [r3, #0]
		          input_buffer[(NB_AXES * i) + 1] = y;
 8000cea:	89fa      	ldrh	r2, [r7, #14]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <fill_buffer+0x120>)
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	601a      	str	r2, [r3, #0]
		          input_buffer[(NB_AXES * i) + 2] = z;
 8000d00:	89fa      	ldrh	r2, [r7, #14]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <fill_buffer+0x128>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e002      	b.n	8000d1e <fill_buffer+0xfe>
			  } else {
		    	  i--; // New data not ready, wait, for loop can be controlled like this ? Yoink!
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	81fb      	strh	r3, [r7, #14]
		  for (uint16_t i = 0; i < BUFFER_SIZE; i++) {
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	3301      	adds	r3, #1
 8000d22:	81fb      	strh	r3, [r7, #14]
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d28:	d984      	bls.n	8000c34 <fill_buffer+0x14>
		      }
		  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000704 	.word	0x20000704
 8000d38:	200005a0 	.word	0x200005a0
 8000d3c:	20000724 	.word	0x20000724
 8000d40:	20000728 	.word	0x20000728
 8000d44:	2000067c 	.word	0x2000067c
 8000d48:	2000072c 	.word	0x2000072c

08000d4c <transmit>:

void transmit(int input1, int input2) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	uint8_t stat1[] = "A";
 8000d56:	2341      	movs	r3, #65	@ 0x41
 8000d58:	82bb      	strh	r3, [r7, #20]
	uint8_t stat2[] = "B";
 8000d5a:	2342      	movs	r3, #66	@ 0x42
 8000d5c:	823b      	strh	r3, [r7, #16]

	char tx1[3];
	sprintf(tx1, "%d", input1),
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	491b      	ldr	r1, [pc, #108]	@ (8000dd4 <transmit+0x88>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f007 fefa 	bl	8008b60 <siprintf>


	//Might need to change this based on how arduino behaves.
	HAL_UART_Transmit(&huart2, msg1, sizeof(msg1), HAL_MAX_DELAY);
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d70:	220d      	movs	r2, #13
 8000d72:	4919      	ldr	r1, [pc, #100]	@ (8000dd8 <transmit+0x8c>)
 8000d74:	4819      	ldr	r0, [pc, #100]	@ (8000ddc <transmit+0x90>)
 8000d76:	f003 faa9 	bl	80042cc <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, , sizeof(msg1), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t *)tx1, strlen(tx1), HAL_MAX_DELAY);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa2e 	bl	80001e0 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d90:	4812      	ldr	r0, [pc, #72]	@ (8000ddc <transmit+0x90>)
 8000d92:	f003 fa9b 	bl	80042cc <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, msg2, sizeof(msg2), HAL_MAX_DELAY);
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	4910      	ldr	r1, [pc, #64]	@ (8000de0 <transmit+0x94>)
 8000d9e:	480f      	ldr	r0, [pc, #60]	@ (8000ddc <transmit+0x90>)
 8000da0:	f003 fa94 	bl	80042cc <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), HAL_MAX_DELAY);
	if(input1==1) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <transmit+0x70>
	HAL_UART_Transmit(&huart2, stat1, sizeof(stat1), HAL_MAX_DELAY);
 8000daa:	f107 0114 	add.w	r1, r7, #20
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db2:	2202      	movs	r2, #2
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <transmit+0x90>)
 8000db6:	f003 fa89 	bl	80042cc <HAL_UART_Transmit>
	}
	else {
	HAL_UART_Transmit(&huart2, stat2, sizeof(stat2), HAL_MAX_DELAY);
	}
	//HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), HAL_MAX_DELAY);
}
 8000dba:	e007      	b.n	8000dcc <transmit+0x80>
	HAL_UART_Transmit(&huart2, stat2, sizeof(stat2), HAL_MAX_DELAY);
 8000dbc:	f107 0110 	add.w	r1, r7, #16
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <transmit+0x90>)
 8000dc8:	f003 fa80 	bl	80042cc <HAL_UART_Transmit>
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	08009618 	.word	0x08009618
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	2000067c 	.word	0x2000067c
 8000de0:	20000010 	.word	0x20000010

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	enum neai_state error_code = neai_anomalydetection_init();
 8000dea:	f007 fe13 	bl	8008a14 <neai_anomalydetection_init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	uint8_t similarity = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	717b      	strb	r3, [r7, #5]

	if(error_code != NEAI_OK) {
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00e      	beq.n	8000e1a <main+0x36>
		//This shows somethting bad happened (wrong board or wrong lib)
		sprintf((char*)buf, "ErrorTx NanoEdge AI\n");
 8000dfc:	4947      	ldr	r1, [pc, #284]	@ (8000f1c <main+0x138>)
 8000dfe:	4848      	ldr	r0, [pc, #288]	@ (8000f20 <main+0x13c>)
 8000e00:	f007 feae 	bl	8008b60 <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000e04:	4846      	ldr	r0, [pc, #280]	@ (8000f20 <main+0x13c>)
 8000e06:	f7ff f9eb 	bl	80001e0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e12:	4943      	ldr	r1, [pc, #268]	@ (8000f20 <main+0x13c>)
 8000e14:	4843      	ldr	r0, [pc, #268]	@ (8000f24 <main+0x140>)
 8000e16:	f003 fa59 	bl	80042cc <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f000 fb79 	bl	8001510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1e:	f000 f88b 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e22:	f000 f98b 	bl	800113c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e26:	f000 f959 	bl	80010dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e2a:	f000 f8e7 	bl	8000ffc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e2e:	f000 f925 	bl	800107c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef ret;

  	HAL_Delay(1999); //10 seconds delay to allow user to connect things.
 8000e32:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8000e36:	f000 fbd1 	bl	80015dc <HAL_Delay>

  	I2C1_ClearBusyFlagErratum(&hi2c1);
 8000e3a:	483b      	ldr	r0, [pc, #236]	@ (8000f28 <main+0x144>)
 8000e3c:	f7ff fde6 	bl	8000a0c <I2C1_ClearBusyFlagErratum>
			HAL_UART_Transmit(&huart2, rx_buff, 10, 1000);		//Send it to the USB serial.
		}
	}
*/

    buf[0] = LIS3DH_CTRL_REG1;
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <main+0x13c>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x97;
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <main+0x13c>)
 8000e48:	2297      	movs	r2, #151	@ 0x97
 8000e4a:	705a      	strb	r2, [r3, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 2, HAL_MAX_DELAY);
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2302      	movs	r3, #2
 8000e54:	4a32      	ldr	r2, [pc, #200]	@ (8000f20 <main+0x13c>)
 8000e56:	2119      	movs	r1, #25
 8000e58:	4833      	ldr	r0, [pc, #204]	@ (8000f28 <main+0x144>)
 8000e5a:	f000 ff1f 	bl	8001c9c <HAL_I2C_Master_Transmit>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71bb      	strb	r3, [r7, #6]
    if ( ret != HAL_OK ) {
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00e      	beq.n	8000e86 <main+0xa2>
  	  sprintf((char*)buf,"ErrorTx CTRL_REG1\n");	//TODO: CONFIRM THIS IS NEEDED
 8000e68:	4930      	ldr	r1, [pc, #192]	@ (8000f2c <main+0x148>)
 8000e6a:	482d      	ldr	r0, [pc, #180]	@ (8000f20 <main+0x13c>)
 8000e6c:	f007 fe78 	bl	8008b60 <siprintf>
  	  HAL_UART_Transmit(&huart2, buf, strlen(( char*)buf), HAL_MAX_DELAY);
 8000e70:	482b      	ldr	r0, [pc, #172]	@ (8000f20 <main+0x13c>)
 8000e72:	f7ff f9b5 	bl	80001e0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e7e:	4928      	ldr	r1, [pc, #160]	@ (8000f20 <main+0x13c>)
 8000e80:	4828      	ldr	r0, [pc, #160]	@ (8000f24 <main+0x140>)
 8000e82:	f003 fa23 	bl	80042cc <HAL_UART_Transmit>
    }

    buf[0] = LIS3DH_CTRL_REG4;
 8000e86:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <main+0x13c>)
 8000e88:	2223      	movs	r2, #35	@ 0x23
 8000e8a:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x08;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <main+0x13c>)
 8000e8e:	2208      	movs	r2, #8
 8000e90:	705a      	strb	r2, [r3, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c1, LIS3DH_V_CHIP_ADDR, buf, 2, HAL_MAX_DELAY);
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <main+0x13c>)
 8000e9c:	2119      	movs	r1, #25
 8000e9e:	4822      	ldr	r0, [pc, #136]	@ (8000f28 <main+0x144>)
 8000ea0:	f000 fefc 	bl	8001c9c <HAL_I2C_Master_Transmit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71bb      	strb	r3, [r7, #6]
    if ( ret != HAL_OK ) {
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00e      	beq.n	8000ecc <main+0xe8>
  	  sprintf((char*)buf,"ErrorTx CTRL_REG4\n");	//TODO: CONFIRM THIS IS NEEDED
 8000eae:	4920      	ldr	r1, [pc, #128]	@ (8000f30 <main+0x14c>)
 8000eb0:	481b      	ldr	r0, [pc, #108]	@ (8000f20 <main+0x13c>)
 8000eb2:	f007 fe55 	bl	8008b60 <siprintf>
  	  HAL_UART_Transmit(&huart2, buf, strlen(( char*)buf), HAL_MAX_DELAY);
 8000eb6:	481a      	ldr	r0, [pc, #104]	@ (8000f20 <main+0x13c>)
 8000eb8:	f7ff f992 	bl	80001e0 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec4:	4916      	ldr	r1, [pc, #88]	@ (8000f20 <main+0x13c>)
 8000ec6:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <main+0x140>)
 8000ec8:	f003 fa00 	bl	80042cc <HAL_UART_Transmit>
    }

    for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS ; iteration++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	81fb      	strh	r3, [r7, #14]
 8000ed0:	e008      	b.n	8000ee4 <main+0x100>
    	fill_buffer(input_user_buffer);
 8000ed2:	4818      	ldr	r0, [pc, #96]	@ (8000f34 <main+0x150>)
 8000ed4:	f7ff fea4 	bl	8000c20 <fill_buffer>
    	neai_anomalydetection_learn(input_user_buffer);
 8000ed8:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <main+0x150>)
 8000eda:	f003 ff75 	bl	8004dc8 <neai_anomalydetection_learn>
    for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS ; iteration++) {
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	81fb      	strh	r3, [r7, #14]
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	2b4f      	cmp	r3, #79	@ 0x4f
 8000ee8:	d9f3      	bls.n	8000ed2 <main+0xee>
    }

    int statc = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
			  i--; // New data not ready, wait, for loop can be controlled like this ? Yoink!
		  }
	   }
	   */

	  fill_buffer(input_user_buffer);
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <main+0x150>)
 8000ef0:	f7ff fe96 	bl	8000c20 <fill_buffer>
	  neai_anomalydetection_detect(input_user_buffer, &similarity);	//See how similar the data get is to the
 8000ef4:	1d7b      	adds	r3, r7, #5
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <main+0x150>)
 8000efa:	f007 f90d 	bl	8008118 <neai_anomalydetection_detect>


	  if (similarity > 70) {
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	2b46      	cmp	r3, #70	@ 0x46
 8000f02:	d902      	bls.n	8000f0a <main+0x126>
		  //Normal State Operation
		  statc = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	e001      	b.n	8000f0e <main+0x12a>
	  }
	  else {
		  //Abnormal State Operation
		  statc = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
	  }

	  transmit(similarity,statc);
 8000f0e:	797b      	ldrb	r3, [r7, #5]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff1a 	bl	8000d4c <transmit>
	  fill_buffer(input_user_buffer);
 8000f18:	e7e9      	b.n	8000eee <main+0x10a>
 8000f1a:	bf00      	nop
 8000f1c:	0800961c 	.word	0x0800961c
 8000f20:	20000704 	.word	0x20000704
 8000f24:	2000067c 	.word	0x2000067c
 8000f28:	200005a0 	.word	0x200005a0
 8000f2c:	08009634 	.word	0x08009634
 8000f30:	08009648 	.word	0x08009648
 8000f34:	200004e0 	.word	0x200004e0

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0a6      	sub	sp, #152	@ 0x98
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f42:	2228      	movs	r2, #40	@ 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 fe2a 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2258      	movs	r2, #88	@ 0x58
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f007 fe1c 	bl	8008ba0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f70:	2310      	movs	r3, #16
 8000f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fcb8 	bl	800290c <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fa2:	f000 f931 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2302      	movs	r3, #2
 8000fac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fcf6 	bl	80039b4 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fce:	f000 f91b 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000fd2:	2323      	movs	r3, #35	@ 0x23
 8000fd4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ff05 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ff0:	f000 f90a 	bl	8001208 <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3798      	adds	r7, #152	@ 0x98
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <MX_I2C1_Init+0x78>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <MX_I2C1_Init+0x7c>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001018:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_I2C1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <MX_I2C1_Init+0x74>)
 8001038:	f000 fd94 	bl	8001b64 <HAL_I2C_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001042:	f000 f8e1 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <MX_I2C1_Init+0x74>)
 800104a:	f001 fbc7 	bl	80027dc <HAL_I2CEx_ConfigAnalogFilter>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001054:	f000 f8d8 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001058:	2100      	movs	r1, #0
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_I2C1_Init+0x74>)
 800105c:	f001 fc09 	bl	8002872 <HAL_I2CEx_ConfigDigitalFilter>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 f8cf 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200005a0 	.word	0x200005a0
 8001074:	40005400 	.word	0x40005400
 8001078:	00201d2b 	.word	0x00201d2b

0800107c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <MX_USART1_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 8001088:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800108c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART1_UART_Init+0x58>)
 80010c0:	f003 f8b6 	bl	8004230 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 f89d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200005f4 	.word	0x200005f4
 80010d8:	40013800 	.word	0x40013800

080010dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <MX_USART2_UART_Init+0x5c>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 80010e8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80010ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_USART2_UART_Init+0x58>)
 8001120:	f003 f886 	bl	8004230 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 f86d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000067c 	.word	0x2000067c
 8001138:	40004400 	.word	0x40004400

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a2a      	ldr	r2, [pc, #168]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800115c:	6153      	str	r3, [r2, #20]
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_GPIO_Init+0xc4>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a24      	ldr	r2, [pc, #144]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_GPIO_Init+0xc4>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_GPIO_Init+0xc4>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a18      	ldr	r2, [pc, #96]	@ (8001200 <MX_GPIO_Init+0xc4>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_GPIO_Init+0xc4>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f000 fcbb 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	480b      	ldr	r0, [pc, #44]	@ (8001204 <MX_GPIO_Init+0xc8>)
 80011d6:	f000 fb0b 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011da:	2320      	movs	r3, #32
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f000 fafc 	bl	80017f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	48000800 	.word	0x48000800

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_MspInit+0x44>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_MspInit+0x44>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_MspInit+0x44>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_MspInit+0x44>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_MspInit+0x44>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124a:	2007      	movs	r0, #7
 800124c:	f000 fa9c 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_I2C_MspInit+0x7c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d128      	bne.n	80012d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001296:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a8:	2304      	movs	r3, #4
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <HAL_I2C_MspInit+0x84>)
 80012b4:	f000 fa9c 	bl	80017f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 80012be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c2:	61d3      	str	r3, [r2, #28]
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_I2C_MspInit+0x80>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a2e      	ldr	r2, [pc, #184]	@ (80013bc <HAL_UART_MspInit+0xd8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d128      	bne.n	8001358 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a2d      	ldr	r2, [pc, #180]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a27      	ldr	r2, [pc, #156]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001324:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1TX_ESP_Pin|U1RX_ESP_Pin;
 8001336:	2330      	movs	r3, #48	@ 0x30
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001346:	2307      	movs	r3, #7
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	481c      	ldr	r0, [pc, #112]	@ (80013c4 <HAL_UART_MspInit+0xe0>)
 8001352:	f000 fa4d 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001356:	e02d      	b.n	80013b4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1a      	ldr	r2, [pc, #104]	@ (80013c8 <HAL_UART_MspInit+0xe4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d128      	bne.n	80013b4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_UART_MspInit+0xdc>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001392:	230c      	movs	r3, #12
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a2:	2307      	movs	r3, #7
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b0:	f000 fa1e 	bl	80017f0 <HAL_GPIO_Init>
}
 80013b4:	bf00      	nop
 80013b6:	3730      	adds	r7, #48	@ 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000800 	.word	0x48000800
 80013c8:	40004400 	.word	0x40004400

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f8bb 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800145c:	f007 fba8 	bl	8008bb0 <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20010000 	.word	0x20010000
 800148c:	00000400 	.word	0x00000400
 8001490:	20000730 	.word	0x20000730
 8001494:	20000930 	.word	0x20000930

08001498 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c0:	f7ff ffea 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c6:	490d      	ldr	r1, [pc, #52]	@ (80014fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <LoopForever+0xe>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001508 <LoopForever+0x16>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ea:	f007 fb67 	bl	8008bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ee:	f7ff fc79 	bl	8000de4 <main>

080014f2 <LoopForever>:

LoopForever:
    b LoopForever
 80014f2:	e7fe      	b.n	80014f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014fc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001500:	080096d8 	.word	0x080096d8
  ldr r2, =_sbss
 8001504:	200004c4 	.word	0x200004c4
  ldr r4, =_ebss
 8001508:	2000092c 	.word	0x2000092c

0800150c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>
	...

08001510 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_Init+0x28>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <HAL_Init+0x28>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001520:	2003      	movs	r0, #3
 8001522:	f000 f931 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001526:	2000      	movs	r0, #0
 8001528:	f000 f808 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800152c:	f7ff fe72 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000

0800153c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f93b 	bl	80017d6 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001578:	f000 f911 	bl	800179e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000018 	.word	0x20000018
 8001594:	20000020 	.word	0x20000020
 8001598:	2000001c 	.word	0x2000001c

0800159c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000020 	.word	0x20000020
 80015c0:	20000734 	.word	0x20000734

080015c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000734 	.word	0x20000734

080015dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000020 	.word	0x20000020

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff47 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff5c 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffb0 	bl	8001744 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	e160      	b.n	8001ac2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8152 	beq.w	8001abc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80ac 	beq.w	8001abc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197c:	4a59      	ldr	r2, [pc, #356]	@ (8001ae4 <HAL_GPIO_Init+0x2f4>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019a6:	d025      	beq.n	80019f4 <HAL_GPIO_Init+0x204>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <HAL_GPIO_Init+0x2f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d01f      	beq.n	80019f0 <HAL_GPIO_Init+0x200>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4e      	ldr	r2, [pc, #312]	@ (8001aec <HAL_GPIO_Init+0x2fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d019      	beq.n	80019ec <HAL_GPIO_Init+0x1fc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4d      	ldr	r2, [pc, #308]	@ (8001af0 <HAL_GPIO_Init+0x300>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x1f8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a4c      	ldr	r2, [pc, #304]	@ (8001af4 <HAL_GPIO_Init+0x304>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1f4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4b      	ldr	r2, [pc, #300]	@ (8001af8 <HAL_GPIO_Init+0x308>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4a      	ldr	r2, [pc, #296]	@ (8001afc <HAL_GPIO_Init+0x30c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019d8:	2306      	movs	r3, #6
 80019da:	e00c      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019dc:	2307      	movs	r3, #7
 80019de:	e00a      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019e0:	2305      	movs	r3, #5
 80019e2:	e008      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x206>
 80019f4:	2300      	movs	r3, #0
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a06:	4937      	ldr	r1, [pc, #220]	@ (8001ae4 <HAL_GPIO_Init+0x2f4>)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a14:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a38:	4a31      	ldr	r2, [pc, #196]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a62:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <HAL_GPIO_Init+0x310>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f ae97 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48001000 	.word	0x48001000
 8001af8:	48001400 	.word	0x48001400
 8001afc:	48001800 	.word	0x48001800
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e001      	b.n	8001b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e08d      	b.n	8001c92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fb66 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	@ 0x24
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d108      	bne.n	8001c06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	e007      	b.n	8001c16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	817b      	strh	r3, [r7, #10]
 8001cac:	4613      	mov	r3, r2
 8001cae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	f040 80fd 	bne.w	8001eb8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x30>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0f6      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cd4:	f7ff fc76 	bl	80015c4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2319      	movs	r3, #25
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 faf6 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0e1      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2221      	movs	r2, #33	@ 0x21
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2210      	movs	r2, #16
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2bff      	cmp	r3, #255	@ 0xff
 8001d26:	d906      	bls.n	8001d36 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	22ff      	movs	r2, #255	@ 0xff
 8001d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e007      	b.n	8001d46 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d44:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	8979      	ldrh	r1, [r7, #10]
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec4 <HAL_I2C_Master_Transmit+0x228>)
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fcf1 	bl	8002778 <I2C_TransferConfig>
 8001d96:	e066      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	8979      	ldrh	r1, [r7, #10]
 8001da0:	4b48      	ldr	r3, [pc, #288]	@ (8001ec4 <HAL_I2C_Master_Transmit+0x228>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fce6 	bl	8002778 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001dac:	e05b      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	6a39      	ldr	r1, [r7, #32]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fae9 	bl	800238a <I2C_WaitOnTXISFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07b      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d034      	beq.n	8001e66 <HAL_I2C_Master_Transmit+0x1ca>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d130      	bne.n	8001e66 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fa62 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e04d      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	@ 0xff
 8001e26:	d90e      	bls.n	8001e46 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	22ff      	movs	r2, #255	@ 0xff
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	8979      	ldrh	r1, [r7, #10]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fc9a 	bl	8002778 <I2C_TransferConfig>
 8001e44:	e00f      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	8979      	ldrh	r1, [r7, #10]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fc89 	bl	8002778 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d19e      	bne.n	8001dae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	6a39      	ldr	r1, [r7, #32]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 facf 	bl	8002418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e01a      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_I2C_Master_Transmit+0x22c>)
 8001e98:	400b      	ands	r3, r1
 8001e9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	80002000 	.word	0x80002000
 8001ec8:	fe00e800 	.word	0xfe00e800

08001ecc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	817b      	strh	r3, [r7, #10]
 8001edc:	4613      	mov	r3, r2
 8001ede:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	f040 80db 	bne.w	80020a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Receive+0x30>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0d4      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f04:	f7ff fb5e 	bl	80015c4 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2319      	movs	r3, #25
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f9de 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0bf      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2222      	movs	r2, #34	@ 0x22
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2210      	movs	r2, #16
 8001f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2bff      	cmp	r3, #255	@ 0xff
 8001f56:	d90e      	bls.n	8001f76 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_I2C_Master_Receive+0x1e4>)
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fc02 	bl	8002778 <I2C_TransferConfig>
 8001f74:	e06d      	b.n	8002052 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	8979      	ldrh	r1, [r7, #10]
 8001f88:	4b49      	ldr	r3, [pc, #292]	@ (80020b0 <HAL_I2C_Master_Receive+0x1e4>)
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fbf1 	bl	8002778 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f96:	e05c      	b.n	8002052 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fa7f 	bl	80024a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e07c      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d034      	beq.n	8002052 <HAL_I2C_Master_Receive+0x186>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d130      	bne.n	8002052 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f96c 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e04d      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2bff      	cmp	r3, #255	@ 0xff
 8002012:	d90e      	bls.n	8002032 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	22ff      	movs	r2, #255	@ 0xff
 8002018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fba4 	bl	8002778 <I2C_TransferConfig>
 8002030:	e00f      	b.n	8002052 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	b2da      	uxtb	r2, r3
 8002042:	8979      	ldrh	r1, [r7, #10]
 8002044:	2300      	movs	r3, #0
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fb93 	bl	8002778 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d19d      	bne.n	8001f98 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6a39      	ldr	r1, [r7, #32]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f9d9 	bl	8002418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e01a      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2220      	movs	r2, #32
 8002076:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <HAL_I2C_Master_Receive+0x1e8>)
 8002084:	400b      	ands	r3, r1
 8002086:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	80002400 	.word	0x80002400
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	f040 80d6 	bne.w	8002286 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0cc      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2C_IsDeviceReady+0x44>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0c5      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_IsDeviceReady+0x72>
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002128:	e006      	b.n	8002138 <HAL_I2C_IsDeviceReady+0x80>
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002134:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800213e:	f7ff fa41 	bl	80015c4 <HAL_GetTick>
 8002142:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b20      	cmp	r3, #32
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002170:	e034      	b.n	80021dc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002178:	d01a      	beq.n	80021b0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7ff fa23 	bl	80015c4 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <HAL_I2C_IsDeviceReady+0xd8>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10f      	bne.n	80021b0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e06b      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_I2C_IsDeviceReady+0x130>
 80021e2:	7fbb      	ldrb	r3, [r7, #30]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0c4      	beq.n	8002172 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d01a      	beq.n	800222c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2120      	movs	r1, #32
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f869 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e03b      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2220      	movs	r2, #32
 8002216:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e02d      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	2120      	movs	r1, #32
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f84e 	bl	80022d8 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e020      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2210      	movs	r2, #16
 800224c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	f63f af56 	bhi.w	8002112 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d103      	bne.n	80022ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d007      	beq.n	80022cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	619a      	str	r2, [r3, #24]
  }
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e8:	e03b      	b.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f962 	bl	80025b8 <I2C_IsErrorOccurred>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002304:	d02d      	beq.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7ff f95d 	bl	80015c4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d122      	bne.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	429a      	cmp	r2, r3
 8002338:	d113      	bne.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	429a      	cmp	r2, r3
 800237e:	d0b4      	beq.n	80022ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002396:	e033      	b.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f90b 	bl	80025b8 <I2C_IsErrorOccurred>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e031      	b.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023b2:	d025      	beq.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b4:	f7ff f906 	bl	80015c4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d013      	beq.n	8002400 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e007      	b.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d1c4      	bne.n	8002398 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002424:	e02f      	b.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f8c4 	bl	80025b8 <I2C_IsErrorOccurred>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e02d      	b.n	8002496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff f8c3 	bl	80015c4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d11a      	bne.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b20      	cmp	r3, #32
 800245c:	d013      	beq.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e007      	b.n	8002496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d1c8      	bne.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80024b0:	e071      	b.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f87e 	bl	80025b8 <I2C_IsErrorOccurred>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d13b      	bne.n	800254c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d138      	bne.n	800254c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d105      	bne.n	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d121      	bne.n	8002546 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2210      	movs	r2, #16
 8002508:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2204      	movs	r2, #4
 800250e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2220      	movs	r2, #32
 8002516:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002524:	400b      	ands	r3, r1
 8002526:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	75fb      	strb	r3, [r7, #23]
 8002544:	e002      	b.n	800254c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800254c:	f7ff f83a 	bl	80015c4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00f      	beq.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d002      	beq.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d083      	beq.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	fe00e800 	.word	0xfe00e800

080025b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d068      	beq.n	80026b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ec:	e049      	b.n	8002682 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f4:	d045      	beq.n	8002682 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f6:	f7fe ffe5 	bl	80015c4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <I2C_IsErrorOccurred+0x54>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d13a      	bne.n	8002682 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800261e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800262e:	d121      	bne.n	8002674 <I2C_IsErrorOccurred+0xbc>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002636:	d01d      	beq.n	8002674 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b20      	cmp	r3, #32
 800263c:	d01a      	beq.n	8002674 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800264c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800264e:	f7fe ffb9 	bl	80015c4 <HAL_GetTick>
 8002652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002654:	e00e      	b.n	8002674 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002656:	f7fe ffb5 	bl	80015c4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b19      	cmp	r3, #25
 8002662:	d907      	bls.n	8002674 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f043 0320 	orr.w	r3, r3, #32
 800266a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002672:	e006      	b.n	8002682 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d1e9      	bne.n	8002656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b20      	cmp	r3, #32
 800268e:	d003      	beq.n	8002698 <I2C_IsErrorOccurred+0xe0>
 8002690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0aa      	beq.n	80025ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff fdaf 	bl	8002290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <I2C_IsErrorOccurred+0x1bc>)
 800273e:	400b      	ands	r3, r1
 8002740:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	431a      	orrs	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800276a:	4618      	mov	r0, r3
 800276c:	3728      	adds	r7, #40	@ 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	fe00e800 	.word	0xfe00e800

08002778 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	4613      	mov	r3, r2
 8002788:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002790:	7a7b      	ldrb	r3, [r7, #9]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002798:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	0d5b      	lsrs	r3, r3, #21
 80027b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027b6:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <I2C_TransferConfig+0x60>)
 80027b8:	430b      	orrs	r3, r1
 80027ba:	43db      	mvns	r3, r3
 80027bc:	ea02 0103 	and.w	r1, r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	03ff63ff 	.word	0x03ff63ff

080027dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d138      	bne.n	8002864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e032      	b.n	8002866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	@ 0x24
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800282e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b20      	cmp	r3, #32
 8002886:	d139      	bne.n	80028fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002892:	2302      	movs	r3, #2
 8002894:	e033      	b.n	80028fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	@ 0x24
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e000      	b.n	80028fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028fc:	2302      	movs	r3, #2
  }
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002912:	af00      	add	r7, sp, #0
 8002914:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002918:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800291c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800291e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002922:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	f001 b83a 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002936:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 816f 	beq.w	8002c26 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002948:	4bb5      	ldr	r3, [pc, #724]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b04      	cmp	r3, #4
 8002952:	d00c      	beq.n	800296e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002954:	4bb2      	ldr	r3, [pc, #712]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d15c      	bne.n	8002a1a <HAL_RCC_OscConfig+0x10e>
 8002960:	4baf      	ldr	r3, [pc, #700]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d155      	bne.n	8002a1a <HAL_RCC_OscConfig+0x10e>
 800296e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002972:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002982:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_OscConfig+0x94>
 800299a:	4ba1      	ldr	r3, [pc, #644]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e015      	b.n	80029cc <HAL_RCC_OscConfig+0xc0>
 80029a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029a4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80029b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029c8:	4b95      	ldr	r3, [pc, #596]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029d0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80029d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80029d8:	fa92 f2a2 	rbit	r2, r2
 80029dc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80029e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8111 	beq.w	8002c24 <HAL_RCC_OscConfig+0x318>
 8002a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 8108 	bne.w	8002c24 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f000 bfc6 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12e>
 8002a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7b      	ldr	r2, [pc, #492]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e036      	b.n	8002aa8 <HAL_RCC_OscConfig+0x19c>
 8002a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x158>
 8002a4a:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a74      	ldr	r2, [pc, #464]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a71      	ldr	r2, [pc, #452]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e021      	b.n	8002aa8 <HAL_RCC_OscConfig+0x19c>
 8002a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x184>
 8002a76:	4b6a      	ldr	r3, [pc, #424]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a69      	ldr	r2, [pc, #420]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b67      	ldr	r3, [pc, #412]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a66      	ldr	r2, [pc, #408]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x19c>
 8002a90:	4b63      	ldr	r3, [pc, #396]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a62      	ldr	r2, [pc, #392]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b60      	ldr	r3, [pc, #384]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d059      	beq.n	8002b6c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fd84 	bl	80015c4 <HAL_GetTick>
 8002abc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fd7f 	bl	80015c4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f000 bf67 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 8002ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002adc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002aec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1fe>
 8002b04:	4b46      	ldr	r3, [pc, #280]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x22a>
 8002b0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b0e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002b1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b22:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b26:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b32:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b3a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002b3e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002b4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ab      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1b6>
 8002b6a:	e05c      	b.n	8002c26 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fd2a 	bl	80015c4 <HAL_GetTick>
 8002b70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7fe fd25 	bl	80015c4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d902      	bls.n	8002b8c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f000 bf0d 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 8002b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b90:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002ba0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2b2>
 8002bb8:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x2de>
 8002bbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bc2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002bd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002bda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_RCC_OscConfig+0x314>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bee:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002bf2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002bf6:	fa92 f2a2 	rbit	r2, r2
 8002bfa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002bfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ab      	bne.n	8002b76 <HAL_RCC_OscConfig+0x26a>
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_OscConfig+0x31a>
 8002c20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 817f 	beq.w	8002f3a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c3c:	4ba7      	ldr	r3, [pc, #668]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c48:	4ba4      	ldr	r3, [pc, #656]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d173      	bne.n	8002d3c <HAL_RCC_OscConfig+0x430>
 8002c54:	4ba1      	ldr	r3, [pc, #644]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c60:	d16c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x430>
 8002c62:	2302      	movs	r3, #2
 8002c64:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002c74:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d102      	bne.n	8002c92 <HAL_RCC_OscConfig+0x386>
 8002c8c:	4b93      	ldr	r3, [pc, #588]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	e013      	b.n	8002cba <HAL_RCC_OscConfig+0x3ae>
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002caa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cb6:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002cc0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002ccc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f042 0220 	orr.w	r2, r2, #32
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	f002 021f 	and.w	r2, r2, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3f6>
 8002cec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f000 be52 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	21f8      	movs	r1, #248	@ 0xf8
 8002d18:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002d20:	fa91 f1a1 	rbit	r1, r1
 8002d24:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002d28:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d2c:	fab1 f181 	clz	r1, r1
 8002d30:	b2c9      	uxtb	r1, r1
 8002d32:	408b      	lsls	r3, r1
 8002d34:	4969      	ldr	r1, [pc, #420]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e0fe      	b.n	8002f3a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8088 	beq.w	8002e5e <HAL_RCC_OscConfig+0x552>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002d60:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d6e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	461a      	mov	r2, r3
 8002d76:	2301      	movs	r3, #1
 8002d78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fc23 	bl	80015c4 <HAL_GetTick>
 8002d7e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe fc1e 	bl	80015c4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d902      	bls.n	8002d9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f000 be06 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002dac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_OscConfig+0x4be>
 8002dc4:	4b45      	ldr	r3, [pc, #276]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	e013      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e6>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002de2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	2202      	movs	r2, #2
 8002df4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002df8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002e04:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e08:	fab2 f282 	clz	r2, r2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	f042 0220 	orr.w	r2, r2, #32
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	f002 021f 	and.w	r2, r2, #31
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0af      	beq.n	8002d84 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	21f8      	movs	r1, #248	@ 0xf8
 8002e3a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002e42:	fa91 f1a1 	rbit	r1, r1
 8002e46:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002e4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e4e:	fab1 f181 	clz	r1, r1
 8002e52:	b2c9      	uxtb	r1, r1
 8002e54:	408b      	lsls	r3, r1
 8002e56:	4921      	ldr	r1, [pc, #132]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e06d      	b.n	8002f3a <HAL_RCC_OscConfig+0x62e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002e70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	2300      	movs	r3, #0
 8002e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe fb9b 	bl	80015c4 <HAL_GetTick>
 8002e8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fe fb96 	bl	80015c4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d902      	bls.n	8002eaa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	f000 bd7e 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002ebc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5d4>
 8002ed4:	4b01      	ldr	r3, [pc, #4]	@ (8002edc <HAL_RCC_OscConfig+0x5d0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e016      	b.n	8002f08 <HAL_RCC_OscConfig+0x5fc>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ef8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f04:	4bbf      	ldr	r3, [pc, #764]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002f0e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002f12:	fa92 f2a2 	rbit	r2, r2
 8002f16:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002f1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f042 0220 	orr.w	r2, r2, #32
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	f002 021f 	and.w	r2, r2, #31
 8002f2e:	2101      	movs	r1, #1
 8002f30:	fa01 f202 	lsl.w	r2, r1, r2
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ac      	bne.n	8002e94 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8113 	beq.w	8003176 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d07c      	beq.n	800305a <HAL_RCC_OscConfig+0x74e>
 8002f60:	2301      	movs	r3, #1
 8002f62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002f72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4ba2      	ldr	r3, [pc, #648]	@ (8003208 <HAL_RCC_OscConfig+0x8fc>)
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	461a      	mov	r2, r3
 8002f86:	2301      	movs	r3, #1
 8002f88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fb1b 	bl	80015c4 <HAL_GetTick>
 8002f8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f94:	f7fe fb16 	bl	80015c4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f000 bcfe 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fb4:	fa93 f2a3 	rbit	r2, r3
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fca:	2202      	movs	r2, #2
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa93 f2a3 	rbit	r2, r3
 8002fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fee:	2202      	movs	r2, #2
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003004:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003008:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b7e      	ldr	r3, [pc, #504]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 800300c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800300e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003012:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003016:	2102      	movs	r1, #2
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f1a3 	rbit	r1, r3
 8003028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003030:	6019      	str	r1, [r3, #0]
  return result;
 8003032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003036:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d09d      	beq.n	8002f94 <HAL_RCC_OscConfig+0x688>
 8003058:	e08d      	b.n	8003176 <HAL_RCC_OscConfig+0x86a>
 800305a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800305e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800306a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003078:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800307c:	601a      	str	r2, [r3, #0]
  return result;
 800307e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003082:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003086:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <HAL_RCC_OscConfig+0x8fc>)
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe fa92 	bl	80015c4 <HAL_GetTick>
 80030a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fe fa8d 	bl	80015c4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	f000 bc75 	b.w	80039a6 <HAL_RCC_OscConfig+0x109a>
 80030bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030c4:	2202      	movs	r2, #2
 80030c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	fa93 f2a3 	rbit	r2, r3
 80030d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003108:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003114:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003122:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003126:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 800312a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800312c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003134:	2102      	movs	r1, #2
 8003136:	6019      	str	r1, [r3, #0]
 8003138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800313c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f1a3 	rbit	r1, r3
 8003146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800314a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800314e:	6019      	str	r1, [r3, #0]
  return result;
 8003150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003154:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d197      	bne.n	80030a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 81a5 	beq.w	80034d6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a18      	ldr	r2, [pc, #96]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <HAL_RCC_OscConfig+0x8f8>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <HAL_RCC_OscConfig+0x900>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d121      	bne.n	800321c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_RCC_OscConfig+0x900>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x900>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e4:	f7fe f9ee 	bl	80015c4 <HAL_GetTick>
 80031e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e010      	b.n	8003210 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe f9e9 	bl	80015c4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e3d1      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	10908120 	.word	0x10908120
 800320c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b8d      	ldr	r3, [pc, #564]	@ (8003448 <HAL_RCC_OscConfig+0xb3c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0e8      	beq.n	80031ee <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003220:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x92e>
 800322c:	4b87      	ldr	r3, [pc, #540]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a86      	ldr	r2, [pc, #536]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e035      	b.n	80032a6 <HAL_RCC_OscConfig+0x99a>
 800323a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x958>
 800324a:	4b80      	ldr	r3, [pc, #512]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a7f      	ldr	r2, [pc, #508]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	4b7d      	ldr	r3, [pc, #500]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a7c      	ldr	r2, [pc, #496]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	6213      	str	r3, [r2, #32]
 8003262:	e020      	b.n	80032a6 <HAL_RCC_OscConfig+0x99a>
 8003264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003268:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d10c      	bne.n	800328e <HAL_RCC_OscConfig+0x982>
 8003274:	4b75      	ldr	r3, [pc, #468]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a74      	ldr	r2, [pc, #464]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	4b72      	ldr	r3, [pc, #456]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a71      	ldr	r2, [pc, #452]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6213      	str	r3, [r2, #32]
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x99a>
 800328e:	4b6f      	ldr	r3, [pc, #444]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a6e      	ldr	r2, [pc, #440]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6213      	str	r3, [r2, #32]
 800329a:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a6b      	ldr	r2, [pc, #428]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8081 	beq.w	80033ba <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe f984 	bl	80015c4 <HAL_GetTick>
 80032bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00b      	b.n	80032da <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe f97f 	bl	80015c4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e365      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 80032da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032de:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003302:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003306:	2202      	movs	r2, #2
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	fa93 f2a3 	rbit	r2, r3
 8003318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003320:	601a      	str	r2, [r3, #0]
  return result;
 8003322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003326:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800332a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d102      	bne.n	8003346 <HAL_RCC_OscConfig+0xa3a>
 8003340:	4b42      	ldr	r3, [pc, #264]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	e013      	b.n	800336e <HAL_RCC_OscConfig+0xa62>
 8003346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800334e:	2202      	movs	r2, #2
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003356:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003372:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003376:	2102      	movs	r1, #2
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800337e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fa92 f1a2 	rbit	r1, r2
 8003388:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800338c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003390:	6011      	str	r1, [r2, #0]
  return result;
 8003392:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003396:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f002 021f 	and.w	r2, r2, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d084      	beq.n	80032c2 <HAL_RCC_OscConfig+0x9b6>
 80033b8:	e083      	b.n	80034c2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ba:	f7fe f903 	bl	80015c4 <HAL_GetTick>
 80033be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fe f8fe 	bl	80015c4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e2e4      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 80033dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80033e4:	2202      	movs	r2, #2
 80033e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	fa93 f2a3 	rbit	r2, r3
 80033f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003404:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003408:	2202      	movs	r2, #2
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003410:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800341e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003422:	601a      	str	r2, [r3, #0]
  return result;
 8003424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003428:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800342c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0xb44>
 8003442:	4b02      	ldr	r3, [pc, #8]	@ (800344c <HAL_RCC_OscConfig+0xb40>)
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	e017      	b.n	8003478 <HAL_RCC_OscConfig+0xb6c>
 8003448:	40007000 	.word	0x40007000
 800344c:	40021000 	.word	0x40021000
 8003450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003454:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003458:	2202      	movs	r2, #2
 800345a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003460:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800346e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	4bb3      	ldr	r3, [pc, #716]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800347c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003480:	2102      	movs	r1, #2
 8003482:	6011      	str	r1, [r2, #0]
 8003484:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003488:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fa92 f1a2 	rbit	r1, r2
 8003492:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003496:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800349a:	6011      	str	r1, [r2, #0]
  return result;
 800349c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80034a0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	fab2 f282 	clz	r2, r2
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f002 021f 	and.w	r2, r2, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d180      	bne.n	80033c4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034c2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b9e      	ldr	r3, [pc, #632]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a9d      	ldr	r2, [pc, #628]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 825e 	beq.w	80039a4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e8:	4b96      	ldr	r3, [pc, #600]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	f000 821f 	beq.w	8003934 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 8170 	bne.w	80037e8 <HAL_RCC_OscConfig+0xedc>
 8003508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003528:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800352c:	601a      	str	r2, [r3, #0]
  return result;
 800352e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003532:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003536:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003542:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	461a      	mov	r2, r3
 800354a:	2300      	movs	r3, #0
 800354c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fe f839 	bl	80015c4 <HAL_GetTick>
 8003552:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	e009      	b.n	800356c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe f834 	bl	80015c4 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e21c      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 800356c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003570:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800357e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800358c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003590:	601a      	str	r2, [r3, #0]
  return result;
 8003592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003596:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800359a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0xcaa>
 80035b0:	4b64      	ldr	r3, [pc, #400]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e027      	b.n	8003606 <HAL_RCC_OscConfig+0xcfa>
 80035b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	fa93 f2a3 	rbit	r2, r3
 80035d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035fc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b50      	ldr	r3, [pc, #320]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800360a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800360e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003612:	6011      	str	r1, [r2, #0]
 8003614:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003618:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	fa92 f1a2 	rbit	r1, r2
 8003622:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003626:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800362a:	6011      	str	r1, [r2, #0]
  return result;
 800362c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003630:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f002 021f 	and.w	r2, r2, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d182      	bne.n	8003558 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003652:	4b3c      	ldr	r3, [pc, #240]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	4937      	ldr	r1, [pc, #220]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 8003668:	4313      	orrs	r3, r2
 800366a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003678:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a19      	ldr	r1, [r3, #32]
 8003680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003684:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	430b      	orrs	r3, r1
 800368e:	492d      	ldr	r1, [pc, #180]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
 8003694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003698:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800369c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036b8:	601a      	str	r2, [r3, #0]
  return result;
 80036ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036c2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	2301      	movs	r3, #1
 80036d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fd ff73 	bl	80015c4 <HAL_GetTick>
 80036de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e2:	e009      	b.n	80036f8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd ff6e 	bl	80015c4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e156      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 80036f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036fc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003700:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800370a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003718:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800371c:	601a      	str	r2, [r3, #0]
  return result;
 800371e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003722:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003726:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCC_OscConfig+0xe3c>
 800373c:	4b01      	ldr	r3, [pc, #4]	@ (8003744 <HAL_RCC_OscConfig+0xe38>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e02a      	b.n	8003798 <HAL_RCC_OscConfig+0xe8c>
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003750:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800375a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003768:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003772:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003780:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4b86      	ldr	r3, [pc, #536]	@ (80039b0 <HAL_RCC_OscConfig+0x10a4>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800379c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037aa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fa92 f1a2 	rbit	r1, r2
 80037b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037b8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037bc:	6011      	str	r1, [r2, #0]
  return result;
 80037be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037c2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f43f af7f 	beq.w	80036e4 <HAL_RCC_OscConfig+0xdd8>
 80037e6:	e0dd      	b.n	80039a4 <HAL_RCC_OscConfig+0x1098>
 80037e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037fa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fa93 f2a3 	rbit	r2, r3
 8003804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003808:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800380c:	601a      	str	r2, [r3, #0]
  return result;
 800380e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003812:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003816:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003822:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	461a      	mov	r2, r3
 800382a:	2300      	movs	r3, #0
 800382c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fd fec9 	bl	80015c4 <HAL_GetTick>
 8003832:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	e009      	b.n	800384c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd fec4 	bl	80015c4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0ac      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
 800384c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003850:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800386c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003870:	601a      	str	r2, [r3, #0]
  return result;
 8003872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003876:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800387a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_RCC_OscConfig+0xf8a>
 8003890:	4b47      	ldr	r3, [pc, #284]	@ (80039b0 <HAL_RCC_OscConfig+0x10a4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	e027      	b.n	80038e6 <HAL_RCC_OscConfig+0xfda>
 8003896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800389e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	fa93 f2a3 	rbit	r2, r3
 80038b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038dc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	4b33      	ldr	r3, [pc, #204]	@ (80039b0 <HAL_RCC_OscConfig+0x10a4>)
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038f2:	6011      	str	r1, [r2, #0]
 80038f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	fa92 f1a2 	rbit	r1, r2
 8003902:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003906:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800390a:	6011      	str	r1, [r2, #0]
  return result;
 800390c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003910:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	fab2 f282 	clz	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f042 0220 	orr.w	r2, r2, #32
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f002 021f 	and.w	r2, r2, #31
 8003926:	2101      	movs	r1, #1
 8003928:	fa01 f202 	lsl.w	r2, r1, r2
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d182      	bne.n	8003838 <HAL_RCC_OscConfig+0xf2c>
 8003932:	e037      	b.n	80039a4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003938:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e02e      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_OscConfig+0x10a4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003950:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <HAL_RCC_OscConfig+0x10a4>)
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800395c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003964:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	429a      	cmp	r2, r3
 800396e:	d117      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003970:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003974:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800397c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003984:	429a      	cmp	r2, r3
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800398c:	f003 020f 	and.w	r2, r3, #15
 8003990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003994:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b09e      	sub	sp, #120	@ 0x78
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e162      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b8d      	ldr	r3, [pc, #564]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	498b      	ldr	r1, [pc, #556]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b89      	ldr	r3, [pc, #548]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e14a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b82      	ldr	r3, [pc, #520]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	497f      	ldr	r1, [pc, #508]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80dc 	beq.w	8003be0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d13c      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xf6>
 8003a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xa6>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	e00f      	b.n	8003a7a <HAL_RCC_ClockConfig+0xc6>
 8003a5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f042 0220 	orr.w	r2, r2, #32
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f002 021f 	and.w	r2, r2, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d17b      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0f3      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d13c      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x178>
 8003ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_RCC_ClockConfig+0x128>
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	e00f      	b.n	8003afc <HAL_RCC_ClockConfig+0x148>
 8003adc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af8:	4b46      	ldr	r3, [pc, #280]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b04:	fa92 f2a2 	rbit	r2, r2
 8003b08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b0c:	fab2 f282 	clz	r2, r2
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13a      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b2      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x1a0>
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e00d      	b.n	8003b70 <HAL_RCC_ClockConfig+0x1bc>
 8003b54:	2302      	movs	r3, #2
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	2302      	movs	r3, #2
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	61ba      	str	r2, [r7, #24]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	fa92 f2a2 	rbit	r2, r2
 8003b7a:	617a      	str	r2, [r7, #20]
  return result;
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e079      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	491a      	ldr	r1, [pc, #104]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fd08 	bl	80015c4 <HAL_GetTick>
 8003bb4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fd fd04 	bl	80015c4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e061      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d214      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4906      	ldr	r1, [pc, #24]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <HAL_RCC_ClockConfig+0x25c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e040      	b.n	8003c92 <HAL_RCC_ClockConfig+0x2de>
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	491a      	ldr	r1, [pc, #104]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4912      	ldr	r1, [pc, #72]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c56:	f000 f829 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c5a:	4601      	mov	r1, r0
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_RCC_ClockConfig+0x2e8>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c64:	22f0      	movs	r2, #240	@ 0xf0
 8003c66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	fa92 f2a2 	rbit	r2, r2
 8003c6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	40d3      	lsrs	r3, r2
 8003c7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <HAL_RCC_ClockConfig+0x2ec>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a08      	ldr	r2, [pc, #32]	@ (8003ca4 <HAL_RCC_ClockConfig+0x2f0>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_RCC_ClockConfig+0x2f4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fc56 	bl	800153c <HAL_InitTick>
  
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3778      	adds	r7, #120	@ 0x78
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800965c 	.word	0x0800965c
 8003ca4:	20000018 	.word	0x20000018
 8003ca8:	2000001c 	.word	0x2000001c

08003cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d002      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x30>
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d003      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8003cda:	e029      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cde:	613b      	str	r3, [r7, #16]
      break;
 8003ce0:	e029      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	4a18      	ldr	r2, [pc, #96]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cec:	5cd3      	ldrb	r3, [r2, r3]
 8003cee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003cf0:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d08:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d32:	613b      	str	r3, [r7, #16]
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	693b      	ldr	r3, [r7, #16]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40021000 	.word	0x40021000
 8003d48:	007a1200 	.word	0x007a1200
 8003d4c:	08009674 	.word	0x08009674
 8003d50:	08009684 	.word	0x08009684

08003d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000018 	.word	0x20000018

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d72:	f7ff ffef 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d76:	4601      	mov	r1, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d80:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	fa92 f2a2 	rbit	r2, r2
 8003d8c:	603a      	str	r2, [r7, #0]
  return result;
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	fab2 f282 	clz	r2, r2
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	40d3      	lsrs	r3, r2
 8003d98:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	0800966c 	.word	0x0800966c

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003db6:	f7ff ffcd 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003dc4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003dc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	fa92 f2a2 	rbit	r2, r2
 8003dd0:	603a      	str	r2, [r7, #0]
  return result;
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	40d3      	lsrs	r3, r2
 8003ddc:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dde:	5cd3      	ldrb	r3, [r2, r3]
 8003de0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800966c 	.word	0x0800966c

08003df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b092      	sub	sp, #72	@ 0x48
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80d4 	beq.w	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e18:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10e      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b4b      	ldr	r3, [pc, #300]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a4a      	ldr	r2, [pc, #296]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
 8003e30:	4b48      	ldr	r3, [pc, #288]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b45      	ldr	r3, [pc, #276]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d118      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4e:	4b42      	ldr	r3, [pc, #264]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a41      	ldr	r2, [pc, #260]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5a:	f7fd fbb3 	bl	80015c4 <HAL_GetTick>
 8003e5e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	e008      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e62:	f7fd fbaf 	bl	80015c4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b64      	cmp	r3, #100	@ 0x64
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1d6      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	4b38      	ldr	r3, [pc, #224]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e80:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8084 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d07c      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b26      	ldr	r3, [pc, #152]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2301      	movs	r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	461a      	mov	r2, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04b      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fd fb5f 	bl	80015c4 <HAL_GetTick>
 8003f06:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fd fb5b 	bl	80015c4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e180      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	61fb      	str	r3, [r7, #28]
  return result;
 8003f38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f4e:	4b01      	ldr	r3, [pc, #4]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	e00d      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	10908100 	.word	0x10908100
 8003f60:	2302      	movs	r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	2202      	movs	r2, #2
 8003f72:	613a      	str	r2, [r7, #16]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	fa92 f2a2 	rbit	r2, r2
 8003f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	fab2 f282 	clz	r2, r2
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f002 021f 	and.w	r2, r2, #31
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0b7      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f9a:	4b8f      	ldr	r3, [pc, #572]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	498c      	ldr	r1, [pc, #560]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b88      	ldr	r3, [pc, #544]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4a87      	ldr	r2, [pc, #540]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fcc:	4b82      	ldr	r3, [pc, #520]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	f023 0203 	bic.w	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	497f      	ldr	r1, [pc, #508]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fea:	4b7b      	ldr	r3, [pc, #492]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4978      	ldr	r1, [pc, #480]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004008:	4b73      	ldr	r3, [pc, #460]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4970      	ldr	r1, [pc, #448]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004026:	4b6c      	ldr	r3, [pc, #432]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4969      	ldr	r1, [pc, #420]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004044:	4b64      	ldr	r3, [pc, #400]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	4961      	ldr	r1, [pc, #388]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004062:	4b5d      	ldr	r3, [pc, #372]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	f023 0220 	bic.w	r2, r3, #32
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	495a      	ldr	r1, [pc, #360]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004080:	4b55      	ldr	r3, [pc, #340]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	4952      	ldr	r1, [pc, #328]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800409e:	4b4e      	ldr	r3, [pc, #312]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	494b      	ldr	r1, [pc, #300]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040bc:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4943      	ldr	r1, [pc, #268]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040da:	4b3f      	ldr	r3, [pc, #252]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	493c      	ldr	r1, [pc, #240]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040f8:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	4934      	ldr	r1, [pc, #208]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004116:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	492d      	ldr	r1, [pc, #180]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004134:	4b28      	ldr	r3, [pc, #160]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	4925      	ldr	r1, [pc, #148]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004152:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	491e      	ldr	r1, [pc, #120]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	4916      	ldr	r1, [pc, #88]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	490f      	ldr	r1, [pc, #60]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041ac:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b8:	4907      	ldr	r1, [pc, #28]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80041ca:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041de:	4913      	ldr	r1, [pc, #76]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80041f0:	4b0e      	ldr	r3, [pc, #56]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fc:	490b      	ldr	r1, [pc, #44]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800420e:	4b07      	ldr	r3, [pc, #28]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421a:	4904      	ldr	r1, [pc, #16]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800421c:	4313      	orrs	r3, r2
 800421e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3748      	adds	r7, #72	@ 0x48
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e040      	b.n	80042c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd f846 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	@ 0x24
 800425c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa86 	bl	8004788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8af 	bl	80043e0 <UART_SetConfig>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e01b      	b.n	80042c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800429a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb05 	bl	80048cc <UART_CheckIdleState>
 80042c2:	4603      	mov	r3, r0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	@ 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d177      	bne.n	80043d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Transmit+0x24>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e070      	b.n	80043d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	@ 0x21
 8004300:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004302:	f7fd f95f 	bl	80015c4 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004320:	d108      	bne.n	8004334 <HAL_UART_Transmit+0x68>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e003      	b.n	800433c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433c:	e02f      	b.n	800439e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fb67 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e03b      	b.n	80043d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004370:	b292      	uxth	r2, r2
 8004372:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3302      	adds	r3, #2
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	e007      	b.n	800438c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1c9      	bne.n	800433e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2140      	movs	r1, #64	@ 0x40
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fb31 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e005      	b.n	80043d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4b92      	ldr	r3, [pc, #584]	@ (8004654 <UART_SetConfig+0x274>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	6979      	ldr	r1, [r7, #20]
 8004414:	430b      	orrs	r3, r1
 8004416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a80      	ldr	r2, [pc, #512]	@ (8004658 <UART_SetConfig+0x278>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d120      	bne.n	800449e <UART_SetConfig+0xbe>
 800445c:	4b7f      	ldr	r3, [pc, #508]	@ (800465c <UART_SetConfig+0x27c>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b03      	cmp	r3, #3
 8004466:	d817      	bhi.n	8004498 <UART_SetConfig+0xb8>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <UART_SetConfig+0x90>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	0800448d 	.word	0x0800448d
 8004478:	08004493 	.word	0x08004493
 800447c:	08004487 	.word	0x08004487
 8004480:	2301      	movs	r3, #1
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e0b5      	b.n	80045f2 <UART_SetConfig+0x212>
 8004486:	2302      	movs	r3, #2
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e0b2      	b.n	80045f2 <UART_SetConfig+0x212>
 800448c:	2304      	movs	r3, #4
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0af      	b.n	80045f2 <UART_SetConfig+0x212>
 8004492:	2308      	movs	r3, #8
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e0ac      	b.n	80045f2 <UART_SetConfig+0x212>
 8004498:	2310      	movs	r3, #16
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e0a9      	b.n	80045f2 <UART_SetConfig+0x212>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004660 <UART_SetConfig+0x280>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d124      	bne.n	80044f2 <UART_SetConfig+0x112>
 80044a8:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <UART_SetConfig+0x27c>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044b4:	d011      	beq.n	80044da <UART_SetConfig+0xfa>
 80044b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80044ba:	d817      	bhi.n	80044ec <UART_SetConfig+0x10c>
 80044bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c0:	d011      	beq.n	80044e6 <UART_SetConfig+0x106>
 80044c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044c6:	d811      	bhi.n	80044ec <UART_SetConfig+0x10c>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <UART_SetConfig+0xf4>
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d006      	beq.n	80044e0 <UART_SetConfig+0x100>
 80044d2:	e00b      	b.n	80044ec <UART_SetConfig+0x10c>
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e08b      	b.n	80045f2 <UART_SetConfig+0x212>
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e088      	b.n	80045f2 <UART_SetConfig+0x212>
 80044e0:	2304      	movs	r3, #4
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e085      	b.n	80045f2 <UART_SetConfig+0x212>
 80044e6:	2308      	movs	r3, #8
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e082      	b.n	80045f2 <UART_SetConfig+0x212>
 80044ec:	2310      	movs	r3, #16
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e07f      	b.n	80045f2 <UART_SetConfig+0x212>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004664 <UART_SetConfig+0x284>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d124      	bne.n	8004546 <UART_SetConfig+0x166>
 80044fc:	4b57      	ldr	r3, [pc, #348]	@ (800465c <UART_SetConfig+0x27c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004500:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004504:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004508:	d011      	beq.n	800452e <UART_SetConfig+0x14e>
 800450a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800450e:	d817      	bhi.n	8004540 <UART_SetConfig+0x160>
 8004510:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004514:	d011      	beq.n	800453a <UART_SetConfig+0x15a>
 8004516:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800451a:	d811      	bhi.n	8004540 <UART_SetConfig+0x160>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x148>
 8004520:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004524:	d006      	beq.n	8004534 <UART_SetConfig+0x154>
 8004526:	e00b      	b.n	8004540 <UART_SetConfig+0x160>
 8004528:	2300      	movs	r3, #0
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e061      	b.n	80045f2 <UART_SetConfig+0x212>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e05e      	b.n	80045f2 <UART_SetConfig+0x212>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e05b      	b.n	80045f2 <UART_SetConfig+0x212>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e058      	b.n	80045f2 <UART_SetConfig+0x212>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e055      	b.n	80045f2 <UART_SetConfig+0x212>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <UART_SetConfig+0x288>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d124      	bne.n	800459a <UART_SetConfig+0x1ba>
 8004550:	4b42      	ldr	r3, [pc, #264]	@ (800465c <UART_SetConfig+0x27c>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004558:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800455c:	d011      	beq.n	8004582 <UART_SetConfig+0x1a2>
 800455e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004562:	d817      	bhi.n	8004594 <UART_SetConfig+0x1b4>
 8004564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004568:	d011      	beq.n	800458e <UART_SetConfig+0x1ae>
 800456a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800456e:	d811      	bhi.n	8004594 <UART_SetConfig+0x1b4>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <UART_SetConfig+0x19c>
 8004574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004578:	d006      	beq.n	8004588 <UART_SetConfig+0x1a8>
 800457a:	e00b      	b.n	8004594 <UART_SetConfig+0x1b4>
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e037      	b.n	80045f2 <UART_SetConfig+0x212>
 8004582:	2302      	movs	r3, #2
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e034      	b.n	80045f2 <UART_SetConfig+0x212>
 8004588:	2304      	movs	r3, #4
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e031      	b.n	80045f2 <UART_SetConfig+0x212>
 800458e:	2308      	movs	r3, #8
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e02e      	b.n	80045f2 <UART_SetConfig+0x212>
 8004594:	2310      	movs	r3, #16
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e02b      	b.n	80045f2 <UART_SetConfig+0x212>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a33      	ldr	r2, [pc, #204]	@ (800466c <UART_SetConfig+0x28c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d124      	bne.n	80045ee <UART_SetConfig+0x20e>
 80045a4:	4b2d      	ldr	r3, [pc, #180]	@ (800465c <UART_SetConfig+0x27c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80045ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045b0:	d011      	beq.n	80045d6 <UART_SetConfig+0x1f6>
 80045b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045b6:	d817      	bhi.n	80045e8 <UART_SetConfig+0x208>
 80045b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045bc:	d011      	beq.n	80045e2 <UART_SetConfig+0x202>
 80045be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045c2:	d811      	bhi.n	80045e8 <UART_SetConfig+0x208>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0x1f0>
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045cc:	d006      	beq.n	80045dc <UART_SetConfig+0x1fc>
 80045ce:	e00b      	b.n	80045e8 <UART_SetConfig+0x208>
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x212>
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e00a      	b.n	80045f2 <UART_SetConfig+0x212>
 80045dc:	2304      	movs	r3, #4
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e007      	b.n	80045f2 <UART_SetConfig+0x212>
 80045e2:	2308      	movs	r3, #8
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e004      	b.n	80045f2 <UART_SetConfig+0x212>
 80045e8:	2310      	movs	r3, #16
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e001      	b.n	80045f2 <UART_SetConfig+0x212>
 80045ee:	2310      	movs	r3, #16
 80045f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fa:	d16b      	bne.n	80046d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d838      	bhi.n	8004674 <UART_SetConfig+0x294>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x228>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004675 	.word	0x08004675
 8004618:	08004643 	.word	0x08004643
 800461c:	08004675 	.word	0x08004675
 8004620:	08004675 	.word	0x08004675
 8004624:	08004675 	.word	0x08004675
 8004628:	0800464b 	.word	0x0800464b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7ff fb9e 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004630:	61b8      	str	r0, [r7, #24]
        break;
 8004632:	e024      	b.n	800467e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7ff fbbc 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8004638:	61b8      	str	r0, [r7, #24]
        break;
 800463a:	e020      	b.n	800467e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <UART_SetConfig+0x290>)
 800463e:	61bb      	str	r3, [r7, #24]
        break;
 8004640:	e01d      	b.n	800467e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7ff fb33 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8004646:	61b8      	str	r0, [r7, #24]
        break;
 8004648:	e019      	b.n	800467e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464e:	61bb      	str	r3, [r7, #24]
        break;
 8004650:	e015      	b.n	800467e <UART_SetConfig+0x29e>
 8004652:	bf00      	nop
 8004654:	efff69f3 	.word	0xefff69f3
 8004658:	40013800 	.word	0x40013800
 800465c:	40021000 	.word	0x40021000
 8004660:	40004400 	.word	0x40004400
 8004664:	40004800 	.word	0x40004800
 8004668:	40004c00 	.word	0x40004c00
 800466c:	40005000 	.word	0x40005000
 8004670:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	77bb      	strb	r3, [r7, #30]
        break;
 800467c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d073      	beq.n	800476c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	005a      	lsls	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b0f      	cmp	r3, #15
 800469e:	d916      	bls.n	80046ce <UART_SetConfig+0x2ee>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a6:	d212      	bcs.n	80046ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f023 030f 	bic.w	r3, r3, #15
 80046b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	b29a      	uxth	r2, r3
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	89fa      	ldrh	r2, [r7, #14]
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	e04e      	b.n	800476c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	77bb      	strb	r3, [r7, #30]
 80046d2:	e04b      	b.n	800476c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d827      	bhi.n	800472a <UART_SetConfig+0x34a>
 80046da:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <UART_SetConfig+0x300>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	08004705 	.word	0x08004705
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	08004715 	.word	0x08004715
 80046ec:	0800472b 	.word	0x0800472b
 80046f0:	0800471b 	.word	0x0800471b
 80046f4:	0800472b 	.word	0x0800472b
 80046f8:	0800472b 	.word	0x0800472b
 80046fc:	0800472b 	.word	0x0800472b
 8004700:	08004723 	.word	0x08004723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004704:	f7ff fb32 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004708:	61b8      	str	r0, [r7, #24]
        break;
 800470a:	e013      	b.n	8004734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800470c:	f7ff fb50 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8004710:	61b8      	str	r0, [r7, #24]
        break;
 8004712:	e00f      	b.n	8004734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <UART_SetConfig+0x3a4>)
 8004716:	61bb      	str	r3, [r7, #24]
        break;
 8004718:	e00c      	b.n	8004734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471a:	f7ff fac7 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 800471e:	61b8      	str	r0, [r7, #24]
        break;
 8004720:	e008      	b.n	8004734 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004726:	61bb      	str	r3, [r7, #24]
        break;
 8004728:	e004      	b.n	8004734 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	77bb      	strb	r3, [r7, #30]
        break;
 8004732:	bf00      	nop
    }

    if (pclk != 0U)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d018      	beq.n	800476c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	085a      	lsrs	r2, r3, #1
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b0f      	cmp	r3, #15
 8004752:	d909      	bls.n	8004768 <UART_SetConfig+0x388>
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475a:	d205      	bcs.n	8004768 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60da      	str	r2, [r3, #12]
 8004766:	e001      	b.n	800476c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004778:	7fbb      	ldrb	r3, [r7, #30]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	007a1200 	.word	0x007a1200

08004788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01a      	beq.n	800489e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004886:	d10a      	bne.n	800489e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b098      	sub	sp, #96	@ 0x60
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048dc:	f7fc fe72 	bl	80015c4 <HAL_GetTick>
 80048e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d12e      	bne.n	800494e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f8:	2200      	movs	r2, #0
 80048fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f88c 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d021      	beq.n	800494e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800491e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800492e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e6      	bne.n	800490a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e062      	b.n	8004a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d149      	bne.n	80049f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004964:	2200      	movs	r2, #0
 8004966:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f856 	bl	8004a1c <UART_WaitOnFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d03c      	beq.n	80049f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	623b      	str	r3, [r7, #32]
   return(result);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004994:	633b      	str	r3, [r7, #48]	@ 0x30
 8004996:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3308      	adds	r3, #8
 80049ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3308      	adds	r3, #8
 80049c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	617b      	str	r3, [r7, #20]
   return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e011      	b.n	8004a14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3758      	adds	r7, #88	@ 0x58
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2c:	e04f      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a34:	d04b      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fc fdc5 	bl	80015c4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e04e      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d037      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b80      	cmp	r3, #128	@ 0x80
 8004a62:	d034      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	d031      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d110      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f838 	bl	8004af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e029      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aa8:	d111      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f81e 	bl	8004af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e00f      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d0a0      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b095      	sub	sp, #84	@ 0x54
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e6      	bne.n	8004afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d118      	bne.n	8004b9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6979      	ldr	r1, [r7, #20]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	613b      	str	r3, [r7, #16]
   return(result);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e6      	bne.n	8004b6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bb2:	bf00      	nop
 8004bb4:	3754      	adds	r7, #84	@ 0x54
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <funchad52.constprop.0>:
 8004bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc0 <funchad52.constprop.0+0x200>)
 8004bc2:	f8d0 c024 	ldr.w	ip, [r0, #36]	@ 0x24
 8004bc6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004bc8:	edd0 5a00 	vldr	s11, [r0]
 8004bcc:	edd0 6a03 	vldr	s13, [r0, #12]
 8004bd0:	ed90 7a06 	vldr	s14, [r0, #24]
 8004bd4:	4a7b      	ldr	r2, [pc, #492]	@ (8004dc4 <funchad52.constprop.0+0x204>)
 8004bd6:	b500      	push	{lr}
 8004bd8:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004bdc:	6119      	str	r1, [r3, #16]
 8004bde:	f8d0 c048 	ldr.w	ip, [r0, #72]	@ 0x48
 8004be2:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8004be4:	f8c3 c018 	str.w	ip, [r3, #24]
 8004be8:	61d9      	str	r1, [r3, #28]
 8004bea:	f8d0 c060 	ldr.w	ip, [r0, #96]	@ 0x60
 8004bee:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8004bf0:	f8c3 c020 	str.w	ip, [r3, #32]
 8004bf4:	6259      	str	r1, [r3, #36]	@ 0x24
 8004bf6:	f8d0 c078 	ldr.w	ip, [r0, #120]	@ 0x78
 8004bfa:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8004bfe:	f8c3 c028 	str.w	ip, [r3, #40]	@ 0x28
 8004c02:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8004c04:	f8d0 c090 	ldr.w	ip, [r0, #144]	@ 0x90
 8004c08:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8004c0c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8004c10:	f8c3 c030 	str.w	ip, [r3, #48]	@ 0x30
 8004c14:	6359      	str	r1, [r3, #52]	@ 0x34
 8004c16:	f8d0 c0a8 	ldr.w	ip, [r0, #168]	@ 0xa8
 8004c1a:	f8d0 10b4 	ldr.w	r1, [r0, #180]	@ 0xb4
 8004c1e:	f8c3 e014 	str.w	lr, [r3, #20]
 8004c22:	edc3 6a01 	vstr	s13, [r3, #4]
 8004c26:	ed83 7a02 	vstr	s14, [r3, #8]
 8004c2a:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
 8004c2e:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8004c30:	edc2 5a00 	vstr	s11, [r2]
 8004c34:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8004c36:	edc2 6a01 	vstr	s13, [r2, #4]
 8004c3a:	ed82 7a02 	vstr	s14, [r2, #8]
 8004c3e:	edd0 3a01 	vldr	s7, [r0, #4]
 8004c42:	ed90 4a04 	vldr	s8, [r0, #16]
 8004c46:	f8d0 c028 	ldr.w	ip, [r0, #40]	@ 0x28
 8004c4a:	6119      	str	r1, [r3, #16]
 8004c4c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004c4e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004c52:	6199      	str	r1, [r3, #24]
 8004c54:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8004c58:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8004c5a:	edd0 7a07 	vldr	s15, [r0, #28]
 8004c5e:	f8c3 c014 	str.w	ip, [r3, #20]
 8004c62:	6219      	str	r1, [r3, #32]
 8004c64:	f8d0 c058 	ldr.w	ip, [r0, #88]	@ 0x58
 8004c68:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
 8004c6a:	f8c3 c01c 	str.w	ip, [r3, #28]
 8004c6e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8004c72:	f8d0 c070 	ldr.w	ip, [r0, #112]	@ 0x70
 8004c76:	6299      	str	r1, [r3, #40]	@ 0x28
 8004c78:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 8004c7c:	f8c3 c024 	str.w	ip, [r3, #36]	@ 0x24
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	f8d0 c088 	ldr.w	ip, [r0, #136]	@ 0x88
 8004c88:	6319      	str	r1, [r3, #48]	@ 0x30
 8004c8a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004c8e:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
 8004c92:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
 8004c96:	6399      	str	r1, [r3, #56]	@ 0x38
 8004c98:	f8d0 c0a0 	ldr.w	ip, [r0, #160]	@ 0xa0
 8004c9c:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8004ca0:	edc3 7a02 	vstr	s15, [r3, #8]
 8004ca4:	bf48      	it	mi
 8004ca6:	eef1 5a65 	vnegmi.f32	s11, s11
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004cb2:	f8c3 c034 	str.w	ip, [r3, #52]	@ 0x34
 8004cb6:	edc2 3a03 	vstr	s7, [r2, #12]
 8004cba:	bf48      	it	mi
 8004cbc:	eef1 6a66 	vnegmi.f32	s13, s13
 8004cc0:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	edc2 7a05 	vstr	s15, [r2, #20]
 8004cca:	ed82 4a04 	vstr	s8, [r2, #16]
 8004cce:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 8004cd2:	edd0 4a02 	vldr	s9, [r0, #8]
 8004cd6:	ed90 5a05 	vldr	s10, [r0, #20]
 8004cda:	f8d0 c02c 	ldr.w	ip, [r0, #44]	@ 0x2c
 8004cde:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004ce0:	ed90 6a08 	vldr	s12, [r0, #32]
 8004ce4:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004ce8:	bf48      	it	mi
 8004cea:	eeb1 7a47 	vnegmi.f32	s14, s14
 8004cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf2:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8004cf6:	bf48      	it	mi
 8004cf8:	eef1 3a63 	vnegmi.f32	s7, s7
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d04:	f8d0 c044 	ldr.w	ip, [r0, #68]	@ 0x44
 8004d08:	6119      	str	r1, [r3, #16]
 8004d0a:	bf48      	it	mi
 8004d0c:	eeb1 4a44 	vnegmi.f32	s8, s8
 8004d10:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004d12:	f8c3 c014 	str.w	ip, [r3, #20]
 8004d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1a:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8004d1e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8004d22:	6199      	str	r1, [r3, #24]
 8004d24:	bf48      	it	mi
 8004d26:	eef1 7a67 	vnegmi.f32	s15, s15
 8004d2a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004d2c:	edc3 4a00 	vstr	s9, [r3]
 8004d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d34:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8004d38:	f8c3 c01c 	str.w	ip, [r3, #28]
 8004d3c:	6219      	str	r1, [r3, #32]
 8004d3e:	f8d0 c074 	ldr.w	ip, [r0, #116]	@ 0x74
 8004d42:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
 8004d46:	ed83 5a01 	vstr	s10, [r3, #4]
 8004d4a:	bf48      	it	mi
 8004d4c:	eef1 4a64 	vnegmi.f32	s9, s9
 8004d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d54:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8004d58:	f8c3 c024 	str.w	ip, [r3, #36]	@ 0x24
 8004d5c:	6299      	str	r1, [r3, #40]	@ 0x28
 8004d5e:	f8d0 c08c 	ldr.w	ip, [r0, #140]	@ 0x8c
 8004d62:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 8004d66:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	@ 0xa4
 8004d6a:	ed83 6a02 	vstr	s12, [r3, #8]
 8004d6e:	bf48      	it	mi
 8004d70:	eeb1 5a45 	vnegmi.f32	s10, s10
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
 8004d7c:	6319      	str	r1, [r3, #48]	@ 0x30
 8004d7e:	f8d0 c0b0 	ldr.w	ip, [r0, #176]	@ 0xb0
 8004d82:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8004d86:	f8c3 e034 	str.w	lr, [r3, #52]	@ 0x34
 8004d8a:	bf48      	it	mi
 8004d8c:	eeb1 6a46 	vnegmi.f32	s12, s12
 8004d90:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
 8004d94:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8004d96:	edc2 5a00 	vstr	s11, [r2]
 8004d9a:	edc2 6a01 	vstr	s13, [r2, #4]
 8004d9e:	ed82 7a02 	vstr	s14, [r2, #8]
 8004da2:	edc2 3a03 	vstr	s7, [r2, #12]
 8004da6:	ed82 4a04 	vstr	s8, [r2, #16]
 8004daa:	edc2 7a05 	vstr	s15, [r2, #20]
 8004dae:	edc2 4a06 	vstr	s9, [r2, #24]
 8004db2:	ed82 5a07 	vstr	s10, [r2, #28]
 8004db6:	ed82 6a08 	vstr	s12, [r2, #32]
 8004dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dbe:	bf00      	nop
 8004dc0:	20000738 	.word	0x20000738
 8004dc4:	20000778 	.word	0x20000778

08004dc8 <neai_anomalydetection_learn>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	ed2d 8b10 	vpush	{d8-d15}
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <neai_anomalydetection_learn+0x24>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b0a7      	sub	sp, #156	@ 0x9c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	9302      	str	r3, [sp, #8]
 8004dda:	d00b      	beq.n	8004df4 <neai_anomalydetection_learn+0x2c>
 8004ddc:	207b      	movs	r0, #123	@ 0x7b
 8004dde:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <neai_anomalydetection_learn+0x28>)
 8004de0:	7018      	strb	r0, [r3, #0]
 8004de2:	b027      	add	sp, #156	@ 0x9c
 8004de4:	ecbd 8b10 	vpop	{d8-d15}
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	20000084 	.word	0x20000084
 8004df0:	2000007c 	.word	0x2000007c
 8004df4:	f7ff fee4 	bl	8004bc0 <funchad52.constprop.0>
 8004df8:	4b15      	ldr	r3, [pc, #84]	@ (8004e50 <neai_anomalydetection_learn+0x88>)
 8004dfa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8004e78 <neai_anomalydetection_learn+0xb0>
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f89b 1000 	ldrb.w	r1, [fp]
 8004e04:	9101      	str	r1, [sp, #4]
 8004e06:	3201      	adds	r2, #1
 8004e08:	9205      	str	r2, [sp, #20]
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	f001 84a2 	beq.w	8006756 <neai_anomalydetection_learn+0x198e>
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <neai_anomalydetection_learn+0x8c>)
 8004e14:	9106      	str	r1, [sp, #24]
 8004e16:	edd3 1a00 	vldr	s3, [r3]
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <neai_anomalydetection_learn+0x90>)
 8004e1c:	edd3 7a00 	vldr	s15, [r3]
 8004e20:	edcd 7a00 	vstr	s15, [sp]
 8004e24:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8004e5c <neai_anomalydetection_learn+0x94>
 8004e28:	eef4 1ae7 	vcmpe.f32	s3, s15
 8004e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e30:	f240 82d2 	bls.w	80053d8 <neai_anomalydetection_learn+0x610>
 8004e34:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <neai_anomalydetection_learn+0x98>)
 8004e36:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8004e64 <neai_anomalydetection_learn+0x9c>
 8004e3a:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 8004e68 <neai_anomalydetection_learn+0xa0>
 8004e3e:	4c0b      	ldr	r4, [pc, #44]	@ (8004e6c <neai_anomalydetection_learn+0xa4>)
 8004e40:	4d0b      	ldr	r5, [pc, #44]	@ (8004e70 <neai_anomalydetection_learn+0xa8>)
 8004e42:	4e0c      	ldr	r6, [pc, #48]	@ (8004e74 <neai_anomalydetection_learn+0xac>)
 8004e44:	9304      	str	r3, [sp, #16]
 8004e46:	18cf      	adds	r7, r1, r3
 8004e48:	f04f 0a28 	mov.w	sl, #40	@ 0x28
 8004e4c:	4698      	mov	r8, r3
 8004e4e:	e015      	b.n	8004e7c <neai_anomalydetection_learn+0xb4>
 8004e50:	20000080 	.word	0x20000080
 8004e54:	20000088 	.word	0x20000088
 8004e58:	2000008c 	.word	0x2000008c
 8004e5c:	bf7d70a4 	.word	0xbf7d70a4
 8004e60:	200004a8 	.word	0x200004a8
 8004e64:	437f0000 	.word	0x437f0000
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	200000c0 	.word	0x200000c0
 8004e70:	200007c0 	.word	0x200007c0
 8004e74:	20000778 	.word	0x20000778
 8004e78:	200000be 	.word	0x200000be
 8004e7c:	ed96 4a00 	vldr	s8, [r6]
 8004e80:	edd6 ea01 	vldr	s29, [r6, #4]
 8004e84:	edd6 4a02 	vldr	s9, [r6, #8]
 8004e88:	ed96 5a03 	vldr	s10, [r6, #12]
 8004e8c:	edd6 5a04 	vldr	s11, [r6, #16]
 8004e90:	f817 9d01 	ldrb.w	r9, [r7, #-1]!
 8004e94:	ed96 6a05 	vldr	s12, [r6, #20]
 8004e98:	edd6 6a06 	vldr	s13, [r6, #24]
 8004e9c:	edd6 fa07 	vldr	s31, [r6, #28]
 8004ea0:	ed96 fa08 	vldr	s30, [r6, #32]
 8004ea4:	eef4 eac4 	vcmpe.f32	s29, s8
 8004ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eac:	bfd4      	ite	le
 8004eae:	eeb0 9a44 	vmovle.f32	s18, s8
 8004eb2:	eeb0 9a6e 	vmovgt.f32	s18, s29
 8004eb6:	eef4 4a49 	vcmp.f32	s9, s18
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	bfc8      	it	gt
 8004ec0:	eeb0 9a64 	vmovgt.f32	s18, s9
 8004ec4:	eeb4 5a49 	vcmp.f32	s10, s18
 8004ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ecc:	bfc8      	it	gt
 8004ece:	eeb0 9a45 	vmovgt.f32	s18, s10
 8004ed2:	eef4 5a49 	vcmp.f32	s11, s18
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	bfc8      	it	gt
 8004edc:	eeb0 9a65 	vmovgt.f32	s18, s11
 8004ee0:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8004ee4:	eeb4 6a49 	vcmp.f32	s12, s18
 8004ee8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004eec:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ef0:	edd3 2a04 	vldr	s5, [r3, #16]
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	f04f 0204 	mov.w	r2, #4
 8004efc:	bfc8      	it	gt
 8004efe:	eeb0 9a46 	vmovgt.f32	s18, s12
 8004f02:	fb1a 2209 	smlabb	r2, sl, r9, r2
 8004f06:	ee72 2ae7 	vsub.f32	s5, s5, s15
 8004f0a:	eef4 6a49 	vcmp.f32	s13, s18
 8004f0e:	18a3      	adds	r3, r4, r2
 8004f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f14:	5ca2      	ldrb	r2, [r4, r2]
 8004f16:	eec2 3aa0 	vdiv.f32	s7, s5, s1
 8004f1a:	bfc8      	it	gt
 8004f1c:	eeb0 9a66 	vmovgt.f32	s18, s13
 8004f20:	eef4 fa49 	vcmp.f32	s31, s18
 8004f24:	ee0e 2a10 	vmov	s28, r2
 8004f28:	785a      	ldrb	r2, [r3, #1]
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	bfc8      	it	gt
 8004f30:	eeb0 9a6f 	vmovgt.f32	s18, s31
 8004f34:	ee0a 2a10 	vmov	s20, r2
 8004f38:	789a      	ldrb	r2, [r3, #2]
 8004f3a:	eeb4 fa49 	vcmp.f32	s30, s18
 8004f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f42:	ee0d 2a90 	vmov	s27, r2
 8004f46:	eef4 eac4 	vcmpe.f32	s29, s8
 8004f4a:	78da      	ldrb	r2, [r3, #3]
 8004f4c:	bfc8      	it	gt
 8004f4e:	eeb0 9a4f 	vmovgt.f32	s18, s30
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	bf54      	ite	pl
 8004f58:	eeb0 8a44 	vmovpl.f32	s16, s8
 8004f5c:	eeb0 8a6e 	vmovmi.f32	s16, s29
 8004f60:	ee0d 2a10 	vmov	s26, r2
 8004f64:	791a      	ldrb	r2, [r3, #4]
 8004f66:	eeb4 8a64 	vcmp.f32	s16, s9
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	ee0c 2a90 	vmov	s25, r2
 8004f72:	795a      	ldrb	r2, [r3, #5]
 8004f74:	bfc8      	it	gt
 8004f76:	eeb0 8a64 	vmovgt.f32	s16, s9
 8004f7a:	eeb4 8a45 	vcmp.f32	s16, s10
 8004f7e:	ee0c 2a10 	vmov	s24, r2
 8004f82:	799a      	ldrb	r2, [r3, #6]
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	bfc8      	it	gt
 8004f8a:	eeb0 8a45 	vmovgt.f32	s16, s10
 8004f8e:	ee0b 2a90 	vmov	s23, r2
 8004f92:	eeb8 eace 	vcvt.f32.s32	s28, s28
 8004f96:	79da      	ldrb	r2, [r3, #7]
 8004f98:	7a1b      	ldrb	r3, [r3, #8]
 8004f9a:	eeb4 8a65 	vcmp.f32	s16, s11
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	ee2e ea23 	vmul.f32	s28, s28, s7
 8004fa6:	ee0a 3a90 	vmov	s21, r3
 8004faa:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8004fae:	ee0b 2a10 	vmov	s22, r2
 8004fb2:	bfc8      	it	gt
 8004fb4:	eeb0 8a65 	vmovgt.f32	s16, s11
 8004fb8:	ee3e ea27 	vadd.f32	s28, s28, s15
 8004fbc:	eeb4 8a46 	vcmp.f32	s16, s12
 8004fc0:	ee2a aa23 	vmul.f32	s20, s20, s7
 8004fc4:	ee24 3a04 	vmul.f32	s6, s8, s8
 8004fc8:	eef8 daed 	vcvt.f32.s32	s27, s27
 8004fcc:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8004fd0:	eef8 caec 	vcvt.f32.s32	s25, s25
 8004fd4:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8004fd8:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8004fdc:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8004fe0:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8004fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe8:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004fec:	bfc8      	it	gt
 8004fee:	eeb0 8a46 	vmovgt.f32	s16, s12
 8004ff2:	ee6d daa3 	vmul.f32	s27, s27, s7
 8004ff6:	ee2d da23 	vmul.f32	s26, s26, s7
 8004ffa:	ee6c caa3 	vmul.f32	s25, s25, s7
 8004ffe:	ee2c ca23 	vmul.f32	s24, s24, s7
 8005002:	ee6b baa3 	vmul.f32	s23, s23, s7
 8005006:	ee2b ba23 	vmul.f32	s22, s22, s7
 800500a:	ee6a aaa3 	vmul.f32	s21, s21, s7
 800500e:	ee6e 2aae 	vmul.f32	s5, s29, s29
 8005012:	ee33 3a02 	vadd.f32	s6, s6, s4
 8005016:	ee6e 3a0e 	vmul.f32	s7, s28, s28
 800501a:	eeb4 8a66 	vcmp.f32	s16, s13
 800501e:	ee32 3a83 	vadd.f32	s6, s5, s6
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	ee73 3a82 	vadd.f32	s7, s7, s4
 800502a:	ee6a 2a0a 	vmul.f32	s5, s20, s20
 800502e:	bfc8      	it	gt
 8005030:	eeb0 8a66 	vmovgt.f32	s16, s13
 8005034:	ee7d daa7 	vadd.f32	s27, s27, s15
 8005038:	ee72 2aa3 	vadd.f32	s5, s5, s7
 800503c:	eeb4 8a6f 	vcmp.f32	s16, s31
 8005040:	ee64 3aa4 	vmul.f32	s7, s9, s9
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	ee73 3a83 	vadd.f32	s7, s7, s6
 800504c:	bfc8      	it	gt
 800504e:	eeb0 8a6f 	vmovgt.f32	s16, s31
 8005052:	ee24 1a0e 	vmul.f32	s2, s8, s28
 8005056:	ee2d 3aad 	vmul.f32	s6, s27, s27
 800505a:	eeb4 8a4f 	vcmp.f32	s16, s30
 800505e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005066:	ee31 1a02 	vadd.f32	s2, s2, s4
 800506a:	eeb4 aace 	vcmpe.f32	s20, s28
 800506e:	ee6e 2a8a 	vmul.f32	s5, s29, s20
 8005072:	bfc8      	it	gt
 8005074:	eeb0 8a4f 	vmovgt.f32	s16, s30
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	ee3d da27 	vadd.f32	s26, s26, s15
 8005080:	ee72 2a81 	vadd.f32	s5, s5, s2
 8005084:	bfd4      	ite	le
 8005086:	eef0 9a4e 	vmovle.f32	s19, s28
 800508a:	eef0 9a4a 	vmovgt.f32	s19, s20
 800508e:	ee25 1a05 	vmul.f32	s2, s10, s10
 8005092:	eef4 9a6d 	vcmp.f32	s19, s27
 8005096:	ee31 1a23 	vadd.f32	s2, s2, s7
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	ee6d 3a0d 	vmul.f32	s7, s26, s26
 80050a2:	bf48      	it	mi
 80050a4:	eef0 9a6d 	vmovmi.f32	s19, s27
 80050a8:	ee73 3a83 	vadd.f32	s7, s7, s6
 80050ac:	eef4 9a4d 	vcmp.f32	s19, s26
 80050b0:	ee24 3aad 	vmul.f32	s6, s9, s27
 80050b4:	ee7c caa7 	vadd.f32	s25, s25, s15
 80050b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050bc:	ee33 3a22 	vadd.f32	s6, s6, s5
 80050c0:	bf48      	it	mi
 80050c2:	eef0 9a4d 	vmovmi.f32	s19, s26
 80050c6:	ee65 2aa5 	vmul.f32	s5, s11, s11
 80050ca:	eef4 9a6c 	vcmp.f32	s19, s25
 80050ce:	ee3c ca27 	vadd.f32	s24, s24, s15
 80050d2:	ee72 2a81 	vadd.f32	s5, s5, s2
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	ee2c 1aac 	vmul.f32	s2, s25, s25
 80050de:	bf48      	it	mi
 80050e0:	eef0 9a6c 	vmovmi.f32	s19, s25
 80050e4:	ee31 1a23 	vadd.f32	s2, s2, s7
 80050e8:	eef4 9a4c 	vcmp.f32	s19, s24
 80050ec:	ee65 3a0d 	vmul.f32	s7, s10, s26
 80050f0:	ee7b baa7 	vadd.f32	s23, s23, s15
 80050f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f8:	ee73 3a83 	vadd.f32	s7, s7, s6
 80050fc:	bf48      	it	mi
 80050fe:	eef0 9a4c 	vmovmi.f32	s19, s24
 8005102:	ee26 3a06 	vmul.f32	s6, s12, s12
 8005106:	eef4 9a6b 	vcmp.f32	s19, s23
 800510a:	ee3b ba27 	vadd.f32	s22, s22, s15
 800510e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005116:	ee6c 2a0c 	vmul.f32	s5, s24, s24
 800511a:	bf48      	it	mi
 800511c:	eef0 9a6b 	vmovmi.f32	s19, s23
 8005120:	ee72 2a81 	vadd.f32	s5, s5, s2
 8005124:	eef4 9a4b 	vcmp.f32	s19, s22
 8005128:	ee25 1aac 	vmul.f32	s2, s11, s25
 800512c:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8005130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005134:	ee31 1a23 	vadd.f32	s2, s2, s7
 8005138:	bf48      	it	mi
 800513a:	eef0 9a4b 	vmovmi.f32	s19, s22
 800513e:	ee34 7a02 	vadd.f32	s14, s8, s4
 8005142:	ee7e 7a02 	vadd.f32	s15, s28, s4
 8005146:	ee66 3aa6 	vmul.f32	s7, s13, s13
 800514a:	eef4 9a6a 	vcmp.f32	s19, s21
 800514e:	ee73 3a83 	vadd.f32	s7, s7, s6
 8005152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005156:	ee37 7a2e 	vadd.f32	s14, s14, s29
 800515a:	eeb4 aace 	vcmpe.f32	s20, s28
 800515e:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8005162:	ee2b 3aab 	vmul.f32	s6, s23, s23
 8005166:	bf48      	it	mi
 8005168:	eef0 9a6a 	vmovmi.f32	s19, s21
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005174:	bf54      	ite	pl
 8005176:	eef0 8a4e 	vmovpl.f32	s17, s28
 800517a:	eef0 8a4a 	vmovmi.f32	s17, s20
 800517e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8005182:	ee77 7aad 	vadd.f32	s15, s15, s27
 8005186:	ee66 2a0c 	vmul.f32	s5, s12, s24
 800518a:	eef4 8a6d 	vcmp.f32	s17, s27
 800518e:	ee72 2a81 	vadd.f32	s5, s5, s2
 8005192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005196:	ee37 7a05 	vadd.f32	s14, s14, s10
 800519a:	ee77 7a8d 	vadd.f32	s15, s15, s26
 800519e:	ee2f 1aaf 	vmul.f32	s2, s31, s31
 80051a2:	bfc8      	it	gt
 80051a4:	eef0 8a6d 	vmovgt.f32	s17, s27
 80051a8:	ee31 1a23 	vadd.f32	s2, s2, s7
 80051ac:	eef4 8a4d 	vcmp.f32	s17, s26
 80051b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80051b4:	ee77 7aac 	vadd.f32	s15, s15, s25
 80051b8:	ee6b 3a0b 	vmul.f32	s7, s22, s22
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	ee73 3a83 	vadd.f32	s7, s7, s6
 80051c4:	bfc8      	it	gt
 80051c6:	eef0 8a4d 	vmovgt.f32	s17, s26
 80051ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80051ce:	ee77 7a8c 	vadd.f32	s15, s15, s24
 80051d2:	ee26 3aab 	vmul.f32	s6, s13, s23
 80051d6:	eef4 8a6c 	vcmp.f32	s17, s25
 80051da:	ee33 3a22 	vadd.f32	s6, s6, s5
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80051e6:	ee77 7aab 	vadd.f32	s15, s15, s23
 80051ea:	ee6a 2aaa 	vmul.f32	s5, s21, s21
 80051ee:	bfc8      	it	gt
 80051f0:	eef0 8a6c 	vmovgt.f32	s17, s25
 80051f4:	eef4 8a4c 	vcmp.f32	s17, s24
 80051f8:	ee72 2aa3 	vadd.f32	s5, s5, s7
 80051fc:	ee37 7a2f 	vadd.f32	s14, s14, s31
 8005200:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8005204:	ee6f 3a0f 	vmul.f32	s7, s30, s30
 8005208:	ee2f 0a8b 	vmul.f32	s0, s31, s22
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	ee30 0a03 	vadd.f32	s0, s0, s6
 8005214:	bfc8      	it	gt
 8005216:	eef0 8a4c 	vmovgt.f32	s17, s24
 800521a:	ee37 7a0f 	vadd.f32	s14, s14, s30
 800521e:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8005222:	ee73 3a81 	vadd.f32	s7, s7, s2
 8005226:	ee2f 3a2a 	vmul.f32	s6, s30, s21
 800522a:	eef4 8a6b 	vcmp.f32	s17, s23
 800522e:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	ee33 3a00 	vadd.f32	s6, s6, s0
 800523a:	ee62 2a81 	vmul.f32	s5, s5, s2
 800523e:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8005242:	ee63 3a81 	vmul.f32	s7, s7, s2
 8005246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800524e:	bfc8      	it	gt
 8005250:	eef0 8a6b 	vmovgt.f32	s17, s23
 8005254:	eef4 8a4b 	vcmp.f32	s17, s22
 8005258:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800525c:	ee32 0ac0 	vsub.f32	s0, s5, s0
 8005260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005264:	bfc8      	it	gt
 8005266:	eef0 8a4b 	vmovgt.f32	s17, s22
 800526a:	ee20 0a23 	vmul.f32	s0, s0, s7
 800526e:	eef4 8a6a 	vcmp.f32	s17, s21
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	ee23 3a01 	vmul.f32	s6, s6, s2
 800527a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800527e:	bfc8      	it	gt
 8005280:	eef0 8a6a 	vmovgt.f32	s17, s21
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	bf58      	it	pl
 800528a:	eef1 3ac0 	vsqrtpl.f32	s7, s0
 800528e:	464b      	mov	r3, r9
 8005290:	ee73 7a67 	vsub.f32	s15, s6, s15
 8005294:	ed85 ea00 	vstr	s28, [r5]
 8005298:	ed85 aa01 	vstr	s20, [r5, #4]
 800529c:	edc5 da02 	vstr	s27, [r5, #8]
 80052a0:	ed85 da03 	vstr	s26, [r5, #12]
 80052a4:	edc5 ca04 	vstr	s25, [r5, #16]
 80052a8:	ed85 ca05 	vstr	s24, [r5, #20]
 80052ac:	edc5 ba06 	vstr	s23, [r5, #24]
 80052b0:	ed85 ba07 	vstr	s22, [r5, #28]
 80052b4:	edc5 aa08 	vstr	s21, [r5, #32]
 80052b8:	f102 864f 	bmi.w	8007f5a <neai_anomalydetection_learn+0x3192>
 80052bc:	ee87 7aa3 	vdiv.f32	s14, s15, s7
 80052c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80052c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052cc:	f201 8238 	bhi.w	8006740 <neai_anomalydetection_learn+0x1978>
 80052d0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80052d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	bfb8      	it	lt
 80052de:	eeb0 7a42 	vmovlt.f32	s14, s4
 80052e2:	eddd 7a00 	vldr	s15, [sp]
 80052e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	f2c0 8353 	blt.w	8005998 <neai_anomalydetection_learn+0xbd0>
 80052f2:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80052f6:	ee39 8a48 	vsub.f32	s16, s18, s16
 80052fa:	ee68 7aa1 	vmul.f32	s15, s17, s3
 80052fe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	f200 8347 	bhi.w	8005998 <neai_anomalydetection_learn+0xbd0>
 800530a:	ee68 7a21 	vmul.f32	s15, s16, s3
 800530e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005316:	f200 833f 	bhi.w	8005998 <neai_anomalydetection_learn+0xbd0>
 800531a:	ee7e 7a84 	vadd.f32	s15, s29, s8
 800531e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005322:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005326:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800532a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8005336:	ee77 7aaf 	vadd.f32	s15, s15, s31
 800533a:	ee77 7a8f 	vadd.f32	s15, s15, s30
 800533e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005342:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	f102 8354 	bmi.w	80079f6 <neai_anomalydetection_learn+0x2c2e>
 800534e:	eef0 6a47 	vmov.f32	s13, s14
 8005352:	ee7a 7a0e 	vadd.f32	s15, s20, s28
 8005356:	eef2 5a02 	vmov.f32	s11, #34	@ 0x41100000  9.0
 800535a:	ee77 7aad 	vadd.f32	s15, s15, s27
 800535e:	ee77 7a8d 	vadd.f32	s15, s15, s26
 8005362:	ee77 7aac 	vadd.f32	s15, s15, s25
 8005366:	ee77 7a8c 	vadd.f32	s15, s15, s24
 800536a:	ee77 7aab 	vadd.f32	s15, s15, s23
 800536e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8005372:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8005376:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800537a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	f102 8334 	bmi.w	80079ee <neai_anomalydetection_learn+0x2c26>
 8005386:	eef0 7a46 	vmov.f32	s15, s12
 800538a:	ee67 5aa1 	vmul.f32	s11, s15, s3
 800538e:	eef4 5ae6 	vcmpe.f32	s11, s13
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	f200 82ff 	bhi.w	8005998 <neai_anomalydetection_learn+0xbd0>
 800539a:	ee66 6aa1 	vmul.f32	s13, s13, s3
 800539e:	eef4 6ae7 	vcmpe.f32	s13, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	f200 82f7 	bhi.w	8005998 <neai_anomalydetection_learn+0xbd0>
 80053aa:	ee37 7a46 	vsub.f32	s14, s14, s12
 80053ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	d501      	bpl.n	80053bc <neai_anomalydetection_learn+0x5f4>
 80053b8:	eeb1 7a47 	vneg.f32	s14, s14
 80053bc:	ee38 8a88 	vadd.f32	s16, s17, s16
 80053c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80053c4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80053c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	f2c0 82e2 	blt.w	8005998 <neai_anomalydetection_learn+0xbd0>
 80053d4:	4698      	mov	r8, r3
 80053d6:	e2d4      	b.n	8005982 <neai_anomalydetection_learn+0xbba>
 80053d8:	4bf5      	ldr	r3, [pc, #980]	@ (80057b0 <neai_anomalydetection_learn+0x9e8>)
 80053da:	ed9f 3af6 	vldr	s6, [pc, #984]	@ 80057b4 <neai_anomalydetection_learn+0x9ec>
 80053de:	4cf6      	ldr	r4, [pc, #984]	@ (80057b8 <neai_anomalydetection_learn+0x9f0>)
 80053e0:	4df6      	ldr	r5, [pc, #984]	@ (80057bc <neai_anomalydetection_learn+0x9f4>)
 80053e2:	ed9d fa00 	vldr	s30, [sp]
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	18cf      	adds	r7, r1, r3
 80053ea:	eef0 fa61 	vmov.f32	s31, s3
 80053ee:	469a      	mov	sl, r3
 80053f0:	f817 9d01 	ldrb.w	r9, [r7, #-1]!
 80053f4:	ed9f 7af2 	vldr	s14, [pc, #968]	@ 80057c0 <neai_anomalydetection_learn+0x9f8>
 80053f8:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 80053fc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005400:	edd3 7a05 	vldr	s15, [r3, #20]
 8005404:	edd3 6a04 	vldr	s13, [r3, #16]
 8005408:	2228      	movs	r2, #40	@ 0x28
 800540a:	2304      	movs	r3, #4
 800540c:	fb12 3209 	smlabb	r2, r2, r9, r3
 8005410:	18a3      	adds	r3, r4, r2
 8005412:	5ca2      	ldrb	r2, [r4, r2]
 8005414:	ee08 2a10 	vmov	s16, r2
 8005418:	785a      	ldrb	r2, [r3, #1]
 800541a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800541e:	ee0e 2a10 	vmov	s28, r2
 8005422:	789a      	ldrb	r2, [r3, #2]
 8005424:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8005428:	46c8      	mov	r8, r9
 800542a:	ee0d 2a90 	vmov	s27, r2
 800542e:	78da      	ldrb	r2, [r3, #3]
 8005430:	ee0d 2a10 	vmov	s26, r2
 8005434:	791a      	ldrb	r2, [r3, #4]
 8005436:	ee0c 2a90 	vmov	s25, r2
 800543a:	795a      	ldrb	r2, [r3, #5]
 800543c:	ee0c 2a10 	vmov	s24, r2
 8005440:	799a      	ldrb	r2, [r3, #6]
 8005442:	ee0b 2a90 	vmov	s23, r2
 8005446:	79da      	ldrb	r2, [r3, #7]
 8005448:	7a1b      	ldrb	r3, [r3, #8]
 800544a:	ee0b 2a10 	vmov	s22, r2
 800544e:	ee0a 3a90 	vmov	s21, r3
 8005452:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8005456:	eeb8 eace 	vcvt.f32.s32	s28, s28
 800545a:	eef8 daed 	vcvt.f32.s32	s27, s27
 800545e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8005462:	eef8 caec 	vcvt.f32.s32	s25, s25
 8005466:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 800546a:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800546e:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8005472:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8005476:	ee28 8a07 	vmul.f32	s16, s16, s14
 800547a:	ee2e ea07 	vmul.f32	s28, s28, s14
 800547e:	ee6d da87 	vmul.f32	s27, s27, s14
 8005482:	ee2d da07 	vmul.f32	s26, s26, s14
 8005486:	ee6c ca87 	vmul.f32	s25, s25, s14
 800548a:	ee2c ca07 	vmul.f32	s24, s24, s14
 800548e:	ee6b ba87 	vmul.f32	s23, s23, s14
 8005492:	ee2b ba07 	vmul.f32	s22, s22, s14
 8005496:	ee6a aa87 	vmul.f32	s21, s21, s14
 800549a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800549e:	ee3e ea27 	vadd.f32	s28, s28, s15
 80054a2:	ee7d daa7 	vadd.f32	s27, s27, s15
 80054a6:	ee3d da27 	vadd.f32	s26, s26, s15
 80054aa:	ee7c caa7 	vadd.f32	s25, s25, s15
 80054ae:	ee3c ca27 	vadd.f32	s24, s24, s15
 80054b2:	ee7b baa7 	vadd.f32	s23, s23, s15
 80054b6:	ee3b ba27 	vadd.f32	s22, s22, s15
 80054ba:	ee7a aaa7 	vadd.f32	s21, s21, s15
 80054be:	eddf 7ac1 	vldr	s15, [pc, #772]	@ 80057c4 <neai_anomalydetection_learn+0x9fc>
 80054c2:	ed85 8a00 	vstr	s16, [r5]
 80054c6:	eeb4 fae7 	vcmpe.f32	s30, s15
 80054ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ce:	ed85 ea01 	vstr	s28, [r5, #4]
 80054d2:	edc5 da02 	vstr	s27, [r5, #8]
 80054d6:	ed85 da03 	vstr	s26, [r5, #12]
 80054da:	edc5 ca04 	vstr	s25, [r5, #16]
 80054de:	ed85 ca05 	vstr	s24, [r5, #20]
 80054e2:	edc5 ba06 	vstr	s23, [r5, #24]
 80054e6:	ed85 ba07 	vstr	s22, [r5, #28]
 80054ea:	edc5 aa08 	vstr	s21, [r5, #32]
 80054ee:	f240 8248 	bls.w	8005982 <neai_anomalydetection_learn+0xbba>
 80054f2:	4eb5      	ldr	r6, [pc, #724]	@ (80057c8 <neai_anomalydetection_learn+0xa00>)
 80054f4:	edd6 ea00 	vldr	s29, [r6]
 80054f8:	edd6 3a01 	vldr	s7, [r6, #4]
 80054fc:	ed96 4a02 	vldr	s8, [r6, #8]
 8005500:	edd6 4a03 	vldr	s9, [r6, #12]
 8005504:	ed96 5a04 	vldr	s10, [r6, #16]
 8005508:	edd6 5a05 	vldr	s11, [r6, #20]
 800550c:	ed96 6a06 	vldr	s12, [r6, #24]
 8005510:	edd6 6a07 	vldr	s13, [r6, #28]
 8005514:	ed96 7a08 	vldr	s14, [r6, #32]
 8005518:	eef4 eae3 	vcmpe.f32	s29, s7
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	bf54      	ite	pl
 8005522:	eeb0 aa6e 	vmovpl.f32	s20, s29
 8005526:	eeb0 aa63 	vmovmi.f32	s20, s7
 800552a:	eeb4 aa44 	vcmp.f32	s20, s8
 800552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005532:	bf48      	it	mi
 8005534:	eeb0 aa44 	vmovmi.f32	s20, s8
 8005538:	eeb4 aa64 	vcmp.f32	s20, s9
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	bf48      	it	mi
 8005542:	eeb0 aa64 	vmovmi.f32	s20, s9
 8005546:	eeb4 aa45 	vcmp.f32	s20, s10
 800554a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554e:	bf48      	it	mi
 8005550:	eeb0 aa45 	vmovmi.f32	s20, s10
 8005554:	eeb4 aa65 	vcmp.f32	s20, s11
 8005558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800555c:	bf48      	it	mi
 800555e:	eeb0 aa65 	vmovmi.f32	s20, s11
 8005562:	eeb4 aa46 	vcmp.f32	s20, s12
 8005566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556a:	bf48      	it	mi
 800556c:	eeb0 aa46 	vmovmi.f32	s20, s12
 8005570:	eeb4 aa66 	vcmp.f32	s20, s13
 8005574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005578:	bf48      	it	mi
 800557a:	eeb0 aa66 	vmovmi.f32	s20, s13
 800557e:	eeb4 aa47 	vcmp.f32	s20, s14
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	eef4 eae3 	vcmpe.f32	s29, s7
 800558a:	bf48      	it	mi
 800558c:	eeb0 aa47 	vmovmi.f32	s20, s14
 8005590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005594:	bfd4      	ite	le
 8005596:	eef0 9a6e 	vmovle.f32	s19, s29
 800559a:	eef0 9a63 	vmovgt.f32	s19, s7
 800559e:	eef4 9a44 	vcmp.f32	s19, s8
 80055a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a6:	bfc8      	it	gt
 80055a8:	eef0 9a44 	vmovgt.f32	s19, s8
 80055ac:	eef4 9a64 	vcmp.f32	s19, s9
 80055b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b4:	bfc8      	it	gt
 80055b6:	eef0 9a64 	vmovgt.f32	s19, s9
 80055ba:	eef4 9a45 	vcmp.f32	s19, s10
 80055be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c2:	bfc8      	it	gt
 80055c4:	eef0 9a45 	vmovgt.f32	s19, s10
 80055c8:	eef4 9a65 	vcmp.f32	s19, s11
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	bfc8      	it	gt
 80055d2:	eef0 9a65 	vmovgt.f32	s19, s11
 80055d6:	ee6e 1aae 	vmul.f32	s3, s29, s29
 80055da:	eef4 9a46 	vcmp.f32	s19, s12
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	ee23 1aa3 	vmul.f32	s2, s7, s7
 80055e6:	ee71 1a83 	vadd.f32	s3, s3, s6
 80055ea:	ee28 2a08 	vmul.f32	s4, s16, s16
 80055ee:	bfc8      	it	gt
 80055f0:	eef0 9a46 	vmovgt.f32	s19, s12
 80055f4:	ee71 1a21 	vadd.f32	s3, s2, s3
 80055f8:	eef4 9a66 	vcmp.f32	s19, s13
 80055fc:	ee32 2a03 	vadd.f32	s4, s4, s6
 8005600:	ee6e 0a0e 	vmul.f32	s1, s28, s28
 8005604:	ee24 1a04 	vmul.f32	s2, s8, s8
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	ee70 0a82 	vadd.f32	s1, s1, s4
 8005610:	ee31 1a21 	vadd.f32	s2, s2, s3
 8005614:	bfc8      	it	gt
 8005616:	eef0 9a66 	vmovgt.f32	s19, s13
 800561a:	ee2e 2a88 	vmul.f32	s4, s29, s16
 800561e:	ee6d 1aad 	vmul.f32	s3, s27, s27
 8005622:	eef4 9a47 	vcmp.f32	s19, s14
 8005626:	ee71 1aa0 	vadd.f32	s3, s3, s1
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	ee32 2a03 	vadd.f32	s4, s4, s6
 8005632:	eeb4 8ace 	vcmpe.f32	s16, s28
 8005636:	ee63 0a8e 	vmul.f32	s1, s7, s28
 800563a:	bfc8      	it	gt
 800563c:	eef0 9a47 	vmovgt.f32	s19, s14
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	ee70 0a82 	vadd.f32	s1, s1, s4
 8005648:	bf54      	ite	pl
 800564a:	eeb0 9a48 	vmovpl.f32	s18, s16
 800564e:	eeb0 9a4e 	vmovmi.f32	s18, s28
 8005652:	ee24 2aa4 	vmul.f32	s4, s9, s9
 8005656:	eeb4 9a6d 	vcmp.f32	s18, s27
 800565a:	ee32 2a01 	vadd.f32	s4, s4, s2
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	ee2d 1a0d 	vmul.f32	s2, s26, s26
 8005666:	bf48      	it	mi
 8005668:	eeb0 9a6d 	vmovmi.f32	s18, s27
 800566c:	ee31 1a21 	vadd.f32	s2, s2, s3
 8005670:	eeb4 9a4d 	vcmp.f32	s18, s26
 8005674:	ee64 1a2d 	vmul.f32	s3, s8, s27
 8005678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567c:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8005680:	bf48      	it	mi
 8005682:	eeb0 9a4d 	vmovmi.f32	s18, s26
 8005686:	ee65 0a05 	vmul.f32	s1, s10, s10
 800568a:	eeb4 9a6c 	vcmp.f32	s18, s25
 800568e:	ee70 0a82 	vadd.f32	s1, s1, s4
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	ee2c 2aac 	vmul.f32	s4, s25, s25
 800569a:	bf48      	it	mi
 800569c:	eeb0 9a6c 	vmovmi.f32	s18, s25
 80056a0:	ee32 2a01 	vadd.f32	s4, s4, s2
 80056a4:	eeb4 9a4c 	vcmp.f32	s18, s24
 80056a8:	ee24 1a8d 	vmul.f32	s2, s9, s26
 80056ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b0:	ee31 1a21 	vadd.f32	s2, s2, s3
 80056b4:	bf48      	it	mi
 80056b6:	eeb0 9a4c 	vmovmi.f32	s18, s24
 80056ba:	ee65 1aa5 	vmul.f32	s3, s11, s11
 80056be:	eeb4 9a6b 	vcmp.f32	s18, s23
 80056c2:	ee71 1aa0 	vadd.f32	s3, s3, s1
 80056c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ca:	ee6c 0a0c 	vmul.f32	s1, s24, s24
 80056ce:	bf48      	it	mi
 80056d0:	eeb0 9a6b 	vmovmi.f32	s18, s23
 80056d4:	ee70 0a82 	vadd.f32	s1, s1, s4
 80056d8:	eeb4 9a4b 	vcmp.f32	s18, s22
 80056dc:	ee25 2a2c 	vmul.f32	s4, s10, s25
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	ee32 2a01 	vadd.f32	s4, s4, s2
 80056e8:	bf48      	it	mi
 80056ea:	eeb0 9a4b 	vmovmi.f32	s18, s22
 80056ee:	ee7e 2a83 	vadd.f32	s5, s29, s6
 80056f2:	ee78 7a03 	vadd.f32	s15, s16, s6
 80056f6:	ee26 1a06 	vmul.f32	s2, s12, s12
 80056fa:	eeb4 9a6a 	vcmp.f32	s18, s21
 80056fe:	ee31 1a21 	vadd.f32	s2, s2, s3
 8005702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005706:	ee72 2aa3 	vadd.f32	s5, s5, s7
 800570a:	eeb4 8ace 	vcmpe.f32	s16, s28
 800570e:	ee77 7a8e 	vadd.f32	s15, s15, s28
 8005712:	ee6b 1aab 	vmul.f32	s3, s23, s23
 8005716:	bf48      	it	mi
 8005718:	eeb0 9a6a 	vmovmi.f32	s18, s21
 800571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005720:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8005724:	bfd4      	ite	le
 8005726:	eef0 8a48 	vmovle.f32	s17, s16
 800572a:	eef0 8a4e 	vmovgt.f32	s17, s28
 800572e:	ee72 2a84 	vadd.f32	s5, s5, s8
 8005732:	ee77 7aad 	vadd.f32	s15, s15, s27
 8005736:	ee65 0a8c 	vmul.f32	s1, s11, s24
 800573a:	eef4 8a6d 	vcmp.f32	s17, s27
 800573e:	ee70 0a82 	vadd.f32	s1, s1, s4
 8005742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005746:	ee72 2aa4 	vadd.f32	s5, s5, s9
 800574a:	ee77 7a8d 	vadd.f32	s15, s15, s26
 800574e:	ee26 2aa6 	vmul.f32	s4, s13, s13
 8005752:	bfc8      	it	gt
 8005754:	eef0 8a6d 	vmovgt.f32	s17, s27
 8005758:	ee32 2a01 	vadd.f32	s4, s4, s2
 800575c:	eef4 8a4d 	vcmp.f32	s17, s26
 8005760:	ee72 2a85 	vadd.f32	s5, s5, s10
 8005764:	ee77 7aac 	vadd.f32	s15, s15, s25
 8005768:	ee2b 1a0b 	vmul.f32	s2, s22, s22
 800576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005770:	ee31 1a21 	vadd.f32	s2, s2, s3
 8005774:	bfc8      	it	gt
 8005776:	eef0 8a4d 	vmovgt.f32	s17, s26
 800577a:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800577e:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8005782:	ee66 1a2b 	vmul.f32	s3, s12, s23
 8005786:	eef4 8a6c 	vcmp.f32	s17, s25
 800578a:	ee71 1aa0 	vadd.f32	s3, s3, s1
 800578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005792:	ee72 2a86 	vadd.f32	s5, s5, s12
 8005796:	ee77 7aab 	vadd.f32	s15, s15, s23
 800579a:	ee27 0a07 	vmul.f32	s0, s14, s14
 800579e:	ee66 0a8b 	vmul.f32	s1, s13, s22
 80057a2:	bfc8      	it	gt
 80057a4:	eef0 8a6c 	vmovgt.f32	s17, s25
 80057a8:	eef4 8a4c 	vcmp.f32	s17, s24
 80057ac:	e010      	b.n	80057d0 <neai_anomalydetection_learn+0xa08>
 80057ae:	bf00      	nop
 80057b0:	200004a8 	.word	0x200004a8
 80057b4:	00000000 	.word	0x00000000
 80057b8:	200000c0 	.word	0x200000c0
 80057bc:	200007c0 	.word	0x200007c0
 80057c0:	437f0000 	.word	0x437f0000
 80057c4:	bf7d70a4 	.word	0xbf7d70a4
 80057c8:	20000778 	.word	0x20000778
 80057cc:	00000000 	.word	0x00000000
 80057d0:	ee30 0a02 	vadd.f32	s0, s0, s4
 80057d4:	ee70 0aa1 	vadd.f32	s1, s1, s3
 80057d8:	ee72 2aa6 	vadd.f32	s5, s5, s13
 80057dc:	ee77 7a8b 	vadd.f32	s15, s15, s22
 80057e0:	ee2a 2aaa 	vmul.f32	s4, s21, s21
 80057e4:	ee67 1a2a 	vmul.f32	s3, s14, s21
 80057e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ec:	bfc8      	it	gt
 80057ee:	eef0 8a4c 	vmovgt.f32	s17, s24
 80057f2:	ee72 2a87 	vadd.f32	s5, s5, s14
 80057f6:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80057fa:	ee32 2a01 	vadd.f32	s4, s4, s2
 80057fe:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8005802:	eeb2 1a02 	vmov.f32	s2, #34	@ 0x41100000  9.0
 8005806:	eef4 8a6b 	vcmp.f32	s17, s23
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	ee20 0a01 	vmul.f32	s0, s0, s2
 8005812:	ee22 2a01 	vmul.f32	s4, s4, s2
 8005816:	ee61 1a81 	vmul.f32	s3, s3, s2
 800581a:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800581e:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005822:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005826:	bfc8      	it	gt
 8005828:	eef0 8a6b 	vmovgt.f32	s17, s23
 800582c:	eef4 8a4b 	vcmp.f32	s17, s22
 8005830:	ee30 0a41 	vsub.f32	s0, s0, s2
 8005834:	ee32 2a67 	vsub.f32	s4, s4, s15
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	bfc8      	it	gt
 800583e:	eef0 8a4b 	vmovgt.f32	s17, s22
 8005842:	ee20 0a02 	vmul.f32	s0, s0, s4
 8005846:	eef4 8a6a 	vcmp.f32	s17, s21
 800584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005852:	bfc8      	it	gt
 8005854:	eef0 8a6a 	vmovgt.f32	s17, s21
 8005858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585c:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005860:	f102 834d 	bmi.w	8007efe <neai_anomalydetection_learn+0x3136>
 8005864:	eeb1 2ac0 	vsqrt.f32	s4, s0
 8005868:	eec2 7a82 	vdiv.f32	s15, s5, s4
 800586c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 8005870:	eef4 7ae2 	vcmpe.f32	s15, s5
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	f200 875e 	bhi.w	8006738 <neai_anomalydetection_learn+0x1970>
 800587c:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8005880:	eef4 7ae2 	vcmpe.f32	s15, s5
 8005884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005888:	bfb8      	it	lt
 800588a:	eef0 7a43 	vmovlt.f32	s15, s6
 800588e:	eef4 7acf 	vcmpe.f32	s15, s30
 8005892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005896:	f2c0 83fe 	blt.w	8006096 <neai_anomalydetection_learn+0x12ce>
 800589a:	ee79 8a68 	vsub.f32	s17, s18, s17
 800589e:	ee7a 9a69 	vsub.f32	s19, s20, s19
 80058a2:	ee68 7aaf 	vmul.f32	s15, s17, s31
 80058a6:	eef4 9ae7 	vcmpe.f32	s19, s15
 80058aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ae:	f2c0 83f2 	blt.w	8006096 <neai_anomalydetection_learn+0x12ce>
 80058b2:	ee69 7aaf 	vmul.f32	s15, s19, s31
 80058b6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	f2c0 83ea 	blt.w	8006096 <neai_anomalydetection_learn+0x12ce>
 80058c2:	ee7e 7aa3 	vadd.f32	s15, s29, s7
 80058c6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80058ca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80058ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 80058d2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80058d6:	eef2 5a02 	vmov.f32	s11, #34	@ 0x41100000  9.0
 80058da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80058e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80058ee:	ee78 7a0e 	vadd.f32	s15, s16, s28
 80058f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80058f6:	ee77 7aad 	vadd.f32	s15, s15, s27
 80058fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fe:	ee77 7a8d 	vadd.f32	s15, s15, s26
 8005902:	bf48      	it	mi
 8005904:	eef1 6a47 	vnegmi.f32	s13, s14
 8005908:	ee77 7aac 	vadd.f32	s15, s15, s25
 800590c:	bf58      	it	pl
 800590e:	eef0 6a47 	vmovpl.f32	s13, s14
 8005912:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8005916:	ee77 7aab 	vadd.f32	s15, s15, s23
 800591a:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800591e:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8005922:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8005926:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800592a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592e:	bf4c      	ite	mi
 8005930:	eef1 7a46 	vnegmi.f32	s15, s12
 8005934:	eef0 7a46 	vmovpl.f32	s15, s12
 8005938:	ee67 5aaf 	vmul.f32	s11, s15, s31
 800593c:	eef4 5ae6 	vcmpe.f32	s11, s13
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	f200 83a7 	bhi.w	8006096 <neai_anomalydetection_learn+0x12ce>
 8005948:	ee66 6aaf 	vmul.f32	s13, s13, s31
 800594c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005954:	f2c0 839f 	blt.w	8006096 <neai_anomalydetection_learn+0x12ce>
 8005958:	ee37 7a46 	vsub.f32	s14, s14, s12
 800595c:	ee79 9aa8 	vadd.f32	s19, s19, s17
 8005960:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005964:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596c:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8005970:	bf48      	it	mi
 8005972:	eeb1 7a47 	vnegmi.f32	s14, s14
 8005976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	f2c0 838a 	blt.w	8006096 <neai_anomalydetection_learn+0x12ce>
 8005982:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8005986:	f042 82b4 	bne.w	8007ef2 <neai_anomalydetection_learn+0x312a>
 800598a:	9b05      	ldr	r3, [sp, #20]
 800598c:	2b09      	cmp	r3, #9
 800598e:	bf8c      	ite	hi
 8005990:	207f      	movhi	r0, #127	@ 0x7f
 8005992:	207e      	movls	r0, #126	@ 0x7e
 8005994:	f7ff ba23 	b.w	8004dde <neai_anomalydetection_learn+0x16>
 8005998:	4547      	cmp	r7, r8
 800599a:	f47f aa6f 	bne.w	8004e7c <neai_anomalydetection_learn+0xb4>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	2b19      	cmp	r3, #25
 80059a2:	f042 8220 	bne.w	8007de6 <neai_anomalydetection_learn+0x301e>
 80059a6:	ed5f da77 	vldr	s27, [pc, #-476]	@ 80057cc <neai_anomalydetection_learn+0xa04>
 80059aa:	f8df a410 	ldr.w	sl, [pc, #1040]	@ 8005dbc <neai_anomalydetection_learn+0xff4>
 80059ae:	eddd 2a00 	vldr	s5, [sp]
 80059b2:	f04f 0b00 	mov.w	fp, #0
 80059b6:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80059ba:	edda 7a05 	vldr	s15, [sl, #20]
 80059be:	ed9a 7a04 	vldr	s14, [sl, #16]
 80059c2:	eddf 6afc 	vldr	s13, [pc, #1008]	@ 8005db4 <neai_anomalydetection_learn+0xfec>
 80059c6:	ee02 3a10 	vmov	s4, r3
 80059ca:	f89a 3005 	ldrb.w	r3, [sl, #5]
 80059ce:	ee04 3a90 	vmov	s9, r3
 80059d2:	f89a 3006 	ldrb.w	r3, [sl, #6]
 80059d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059da:	ee05 3a10 	vmov	s10, r3
 80059de:	f89a 3007 	ldrb.w	r3, [sl, #7]
 80059e2:	ee87 4a26 	vdiv.f32	s8, s14, s13
 80059e6:	f1bb 0f18 	cmp.w	fp, #24
 80059ea:	ee05 3a90 	vmov	s11, r3
 80059ee:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80059f2:	ee06 3a10 	vmov	s12, r3
 80059f6:	f89a 3009 	ldrb.w	r3, [sl, #9]
 80059fa:	ee06 3a90 	vmov	s13, r3
 80059fe:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8005a02:	ee07 3a10 	vmov	s14, r3
 8005a06:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8005a0a:	ee0f 3a90 	vmov	s31, r3
 8005a0e:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8005a12:	ee0f 3a10 	vmov	s30, r3
 8005a16:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8005a1a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8005a1e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8005a22:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005a26:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005a2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005a2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a32:	eef8 faef 	vcvt.f32.s32	s31, s31
 8005a36:	eeb8 facf 	vcvt.f32.s32	s30, s30
 8005a3a:	ee22 2a04 	vmul.f32	s4, s4, s8
 8005a3e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8005a42:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005a46:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005a4a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005a4e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005a52:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a56:	ee6f fa84 	vmul.f32	s31, s31, s8
 8005a5a:	ee2f fa04 	vmul.f32	s30, s30, s8
 8005a5e:	ee32 2a27 	vadd.f32	s4, s4, s15
 8005a62:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005a66:	ee35 5a27 	vadd.f32	s10, s10, s15
 8005a6a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a7a:	ee7f faa7 	vadd.f32	s31, s31, s15
 8005a7e:	ee3f fa27 	vadd.f32	s30, s30, s15
 8005a82:	ed85 2a00 	vstr	s4, [r5]
 8005a86:	edc5 4a01 	vstr	s9, [r5, #4]
 8005a8a:	ed85 5a02 	vstr	s10, [r5, #8]
 8005a8e:	edc5 5a03 	vstr	s11, [r5, #12]
 8005a92:	ed85 6a04 	vstr	s12, [r5, #16]
 8005a96:	edc5 6a05 	vstr	s13, [r5, #20]
 8005a9a:	ed85 7a06 	vstr	s14, [r5, #24]
 8005a9e:	edc5 fa07 	vstr	s31, [r5, #28]
 8005aa2:	ed85 fa08 	vstr	s30, [r5, #32]
 8005aa6:	f002 81c4 	beq.w	8007e32 <neai_anomalydetection_learn+0x306a>
 8005aaa:	eef4 4ac2 	vcmpe.f32	s9, s4
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	bfd4      	ite	le
 8005ab4:	eef0 3a42 	vmovle.f32	s7, s4
 8005ab8:	eef0 3a64 	vmovgt.f32	s7, s9
 8005abc:	eef4 3ac5 	vcmpe.f32	s7, s10
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	bf48      	it	mi
 8005ac6:	eef0 3a45 	vmovmi.f32	s7, s10
 8005aca:	eef4 3ae5 	vcmpe.f32	s7, s11
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	bf48      	it	mi
 8005ad4:	eef0 3a65 	vmovmi.f32	s7, s11
 8005ad8:	eef4 3ac6 	vcmpe.f32	s7, s12
 8005adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae0:	bf48      	it	mi
 8005ae2:	eef0 3a46 	vmovmi.f32	s7, s12
 8005ae6:	eef4 3ae6 	vcmpe.f32	s7, s13
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	bf48      	it	mi
 8005af0:	eef0 3a66 	vmovmi.f32	s7, s13
 8005af4:	eef4 3ac7 	vcmpe.f32	s7, s14
 8005af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afc:	bf48      	it	mi
 8005afe:	eef0 3a47 	vmovmi.f32	s7, s14
 8005b02:	eef4 3aef 	vcmpe.f32	s7, s31
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	bf48      	it	mi
 8005b0c:	eef0 3a6f 	vmovmi.f32	s7, s31
 8005b10:	eef4 3acf 	vcmpe.f32	s7, s30
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	ee22 3a02 	vmul.f32	s6, s4, s4
 8005b1c:	eef4 4ac2 	vcmpe.f32	s9, s4
 8005b20:	bf48      	it	mi
 8005b22:	eef0 3a4f 	vmovmi.f32	s7, s30
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	bf54      	ite	pl
 8005b2c:	eeb0 4a42 	vmovpl.f32	s8, s4
 8005b30:	eeb0 4a64 	vmovmi.f32	s8, s9
 8005b34:	ee33 3a2d 	vadd.f32	s6, s6, s27
 8005b38:	ee32 ea2d 	vadd.f32	s28, s4, s27
 8005b3c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005b40:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8005b44:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4c:	ee3e ea24 	vadd.f32	s28, s28, s9
 8005b50:	ee25 3a05 	vmul.f32	s6, s10, s10
 8005b54:	bfc8      	it	gt
 8005b56:	eeb0 4a45 	vmovgt.f32	s8, s10
 8005b5a:	ee33 3a27 	vadd.f32	s6, s6, s15
 8005b5e:	eeb4 4ae5 	vcmpe.f32	s8, s11
 8005b62:	ee3e ea05 	vadd.f32	s28, s28, s10
 8005b66:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8005b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005b72:	bfc8      	it	gt
 8005b74:	eeb0 4a65 	vmovgt.f32	s8, s11
 8005b78:	ee3e ea25 	vadd.f32	s28, s28, s11
 8005b7c:	ee26 3a06 	vmul.f32	s6, s12, s12
 8005b80:	eeb4 4ac6 	vcmpe.f32	s8, s12
 8005b84:	ee33 3a27 	vadd.f32	s6, s6, s15
 8005b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8c:	ee3e ea06 	vadd.f32	s28, s28, s12
 8005b90:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8005b94:	bfc8      	it	gt
 8005b96:	eeb0 4a46 	vmovgt.f32	s8, s12
 8005b9a:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005b9e:	eeb4 4ae6 	vcmpe.f32	s8, s13
 8005ba2:	ee3e ea26 	vadd.f32	s28, s28, s13
 8005ba6:	ee27 3a07 	vmul.f32	s6, s14, s14
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	ee33 3a27 	vadd.f32	s6, s6, s15
 8005bb2:	bfc8      	it	gt
 8005bb4:	eeb0 4a66 	vmovgt.f32	s8, s13
 8005bb8:	ee3e ea07 	vadd.f32	s28, s28, s14
 8005bbc:	ee6f 7aaf 	vmul.f32	s15, s31, s31
 8005bc0:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8005bc4:	ee77 7a83 	vadd.f32	s15, s15, s6
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8005bd0:	ee2f 3a0f 	vmul.f32	s6, s30, s30
 8005bd4:	bfc8      	it	gt
 8005bd6:	eeb0 4a47 	vmovgt.f32	s8, s14
 8005bda:	ee3e ea0f 	vadd.f32	s28, s28, s30
 8005bde:	eeb4 4aef 	vcmpe.f32	s8, s31
 8005be2:	ee33 3a27 	vadd.f32	s6, s6, s15
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	eef2 ea02 	vmov.f32	s29, #34	@ 0x41100000  9.0
 8005bee:	ee6e 7a0e 	vmul.f32	s15, s28, s28
 8005bf2:	bfc8      	it	gt
 8005bf4:	eeb0 4a6f 	vmovgt.f32	s8, s31
 8005bf8:	ee23 3a2e 	vmul.f32	s6, s6, s29
 8005bfc:	eeb4 4acf 	vcmpe.f32	s8, s30
 8005c00:	ee33 3a67 	vsub.f32	s6, s6, s15
 8005c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c08:	eef0 7a4e 	vmov.f32	s15, s28
 8005c0c:	f10b 0301 	add.w	r3, fp, #1
 8005c10:	4f69      	ldr	r7, [pc, #420]	@ (8005db8 <neai_anomalydetection_learn+0xff0>)
 8005c12:	eeb0 ea61 	vmov.f32	s28, s3
 8005c16:	bfc8      	it	gt
 8005c18:	eeb0 4a4f 	vmovgt.f32	s8, s30
 8005c1c:	46d1      	mov	r9, sl
 8005c1e:	4698      	mov	r8, r3
 8005c20:	eef0 1a67 	vmov.f32	s3, s15
 8005c24:	edd9 7a0f 	vldr	s15, [r9, #60]	@ 0x3c
 8005c28:	edd9 0a0e 	vldr	s1, [r9, #56]	@ 0x38
 8005c2c:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8005db4 <neai_anomalydetection_learn+0xfec>
 8005c30:	f899 202c 	ldrb.w	r2, [r9, #44]	@ 0x2c
 8005c34:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005c38:	ee0d 2a10 	vmov	s26, r2
 8005c3c:	ee80 1a81 	vdiv.f32	s2, s1, s2
 8005c40:	f899 202d 	ldrb.w	r2, [r9, #45]	@ 0x2d
 8005c44:	ee09 2a10 	vmov	s18, r2
 8005c48:	f899 202e 	ldrb.w	r2, [r9, #46]	@ 0x2e
 8005c4c:	ee0c 2a90 	vmov	s25, r2
 8005c50:	f899 202f 	ldrb.w	r2, [r9, #47]	@ 0x2f
 8005c54:	ee0c 2a10 	vmov	s24, r2
 8005c58:	f899 2030 	ldrb.w	r2, [r9, #48]	@ 0x30
 8005c5c:	ee0b 2a90 	vmov	s23, r2
 8005c60:	f899 2031 	ldrb.w	r2, [r9, #49]	@ 0x31
 8005c64:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8005c68:	ee0b 2a10 	vmov	s22, r2
 8005c6c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8005c70:	f899 2032 	ldrb.w	r2, [r9, #50]	@ 0x32
 8005c74:	ee2d da01 	vmul.f32	s26, s26, s2
 8005c78:	ee29 9a01 	vmul.f32	s18, s18, s2
 8005c7c:	ee0a 2a90 	vmov	s21, r2
 8005c80:	f899 2033 	ldrb.w	r2, [r9, #51]	@ 0x33
 8005c84:	eef8 caec 	vcvt.f32.s32	s25, s25
 8005c88:	ee39 9a27 	vadd.f32	s18, s18, s15
 8005c8c:	ee3d da27 	vadd.f32	s26, s26, s15
 8005c90:	ee0a 2a10 	vmov	s20, r2
 8005c94:	f899 2034 	ldrb.w	r2, [r9, #52]	@ 0x34
 8005c98:	ed87 da00 	vstr	s26, [r7]
 8005c9c:	ee6c ca81 	vmul.f32	s25, s25, s2
 8005ca0:	eeb4 9acd 	vcmpe.f32	s18, s26
 8005ca4:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8005ca8:	ee09 2a90 	vmov	s19, r2
 8005cac:	ee7c caa7 	vadd.f32	s25, s25, s15
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	bfd4      	ite	le
 8005cb6:	eef0 8a4d 	vmovle.f32	s17, s26
 8005cba:	eef0 8a49 	vmovgt.f32	s17, s18
 8005cbe:	ee2c ca01 	vmul.f32	s24, s24, s2
 8005cc2:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8005cc6:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8005cca:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8005cce:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8005cd2:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8005cd6:	eef4 8a6c 	vcmp.f32	s17, s25
 8005cda:	ee3c ca27 	vadd.f32	s24, s24, s15
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	ee6b ba81 	vmul.f32	s23, s23, s2
 8005ce6:	ee2b ba01 	vmul.f32	s22, s22, s2
 8005cea:	ee6a aa81 	vmul.f32	s21, s21, s2
 8005cee:	ee2a aa01 	vmul.f32	s20, s20, s2
 8005cf2:	ee69 9a81 	vmul.f32	s19, s19, s2
 8005cf6:	ee2d 1a0d 	vmul.f32	s2, s26, s26
 8005cfa:	bf48      	it	mi
 8005cfc:	eef0 8a6c 	vmovmi.f32	s17, s25
 8005d00:	eef4 8a4c 	vcmp.f32	s17, s24
 8005d04:	ee31 1a2d 	vadd.f32	s2, s2, s27
 8005d08:	ee69 0a09 	vmul.f32	s1, s18, s18
 8005d0c:	ee7b baa7 	vadd.f32	s23, s23, s15
 8005d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d14:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005d18:	bf48      	it	mi
 8005d1a:	eef0 8a4c 	vmovmi.f32	s17, s24
 8005d1e:	ee2d 1a02 	vmul.f32	s2, s26, s4
 8005d22:	ee2c 0aac 	vmul.f32	s0, s25, s25
 8005d26:	eef4 8a6b 	vcmp.f32	s17, s23
 8005d2a:	ee3b ba27 	vadd.f32	s22, s22, s15
 8005d2e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	ee31 1a2d 	vadd.f32	s2, s2, s27
 8005d3a:	ee69 0a24 	vmul.f32	s1, s18, s9
 8005d3e:	bf48      	it	mi
 8005d40:	eef0 8a6b 	vmovmi.f32	s17, s23
 8005d44:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005d48:	eef4 8a4b 	vcmp.f32	s17, s22
 8005d4c:	ee2c 1a0c 	vmul.f32	s2, s24, s24
 8005d50:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	ee31 1a00 	vadd.f32	s2, s2, s0
 8005d5c:	bf48      	it	mi
 8005d5e:	eef0 8a4b 	vmovmi.f32	s17, s22
 8005d62:	ee2c 0a85 	vmul.f32	s0, s25, s10
 8005d66:	eef4 8a6a 	vcmp.f32	s17, s21
 8005d6a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005d6e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	ee6b 0aab 	vmul.f32	s1, s23, s23
 8005d7a:	bf48      	it	mi
 8005d7c:	eef0 8a6a 	vmovmi.f32	s17, s21
 8005d80:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005d84:	eef4 8a4a 	vcmp.f32	s17, s20
 8005d88:	ee2c 1a25 	vmul.f32	s2, s24, s11
 8005d8c:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8005d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d94:	ee31 1a00 	vadd.f32	s2, s2, s0
 8005d98:	bf48      	it	mi
 8005d9a:	eef0 8a4a 	vmovmi.f32	s17, s20
 8005d9e:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8005da2:	ee2b 0a0b 	vmul.f32	s0, s22, s22
 8005da6:	eef4 8a69 	vcmp.f32	s17, s19
 8005daa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db2:	e007      	b.n	8005dc4 <neai_anomalydetection_learn+0xffc>
 8005db4:	437f0000 	.word	0x437f0000
 8005db8:	2000079c 	.word	0x2000079c
 8005dbc:	200000c0 	.word	0x200000c0
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	ee77 7a89 	vadd.f32	s15, s15, s18
 8005dc8:	eeb4 9acd 	vcmpe.f32	s18, s26
 8005dcc:	ee6b 0a86 	vmul.f32	s1, s23, s12
 8005dd0:	bf48      	it	mi
 8005dd2:	eef0 8a69 	vmovmi.f32	s17, s19
 8005dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dda:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005dde:	bf54      	ite	pl
 8005de0:	eeb0 8a4d 	vmovpl.f32	s16, s26
 8005de4:	eeb0 8a49 	vmovmi.f32	s16, s18
 8005de8:	ee77 7aac 	vadd.f32	s15, s15, s25
 8005dec:	ee2a 1aaa 	vmul.f32	s2, s21, s21
 8005df0:	eeb4 8a6c 	vcmp.f32	s16, s25
 8005df4:	ee31 1a00 	vadd.f32	s2, s2, s0
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8005e00:	ee2b 0a26 	vmul.f32	s0, s22, s13
 8005e04:	bfc8      	it	gt
 8005e06:	eeb0 8a6c 	vmovgt.f32	s16, s25
 8005e0a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005e0e:	eeb4 8a4c 	vcmp.f32	s16, s24
 8005e12:	ee77 7aab 	vadd.f32	s15, s15, s23
 8005e16:	ee6a 0a0a 	vmul.f32	s1, s20, s20
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005e22:	bfc8      	it	gt
 8005e24:	eeb0 8a4c 	vmovgt.f32	s16, s24
 8005e28:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8005e2c:	ee2a 1a87 	vmul.f32	s2, s21, s14
 8005e30:	eeb4 8a6b 	vcmp.f32	s16, s23
 8005e34:	ee31 1a00 	vadd.f32	s2, s2, s0
 8005e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8005e40:	ee29 0aa9 	vmul.f32	s0, s19, s19
 8005e44:	bfc8      	it	gt
 8005e46:	eeb0 8a6b 	vmovgt.f32	s16, s23
 8005e4a:	eeb4 8a4b 	vcmp.f32	s16, s22
 8005e4e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005e52:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8005e56:	ee6a 0a2f 	vmul.f32	s1, s20, s31
 8005e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8005e62:	bfc8      	it	gt
 8005e64:	eeb0 8a4b 	vmovgt.f32	s16, s22
 8005e68:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8005e6c:	ee29 1a8f 	vmul.f32	s2, s19, s30
 8005e70:	eeb4 8a6a 	vcmp.f32	s16, s21
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	ee31 1a20 	vadd.f32	s2, s2, s1
 8005e7c:	ee20 0a2e 	vmul.f32	s0, s0, s29
 8005e80:	ee67 0aa7 	vmul.f32	s1, s15, s15
 8005e84:	bfc8      	it	gt
 8005e86:	eeb0 8a6a 	vmovgt.f32	s16, s21
 8005e8a:	eeb4 8a4a 	vcmp.f32	s16, s20
 8005e8e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e96:	bfc8      	it	gt
 8005e98:	eeb0 8a4a 	vmovgt.f32	s16, s20
 8005e9c:	ee20 0a03 	vmul.f32	s0, s0, s6
 8005ea0:	eeb4 8a69 	vcmp.f32	s16, s19
 8005ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea8:	ee21 1a2e 	vmul.f32	s2, s2, s29
 8005eac:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8005eb0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005eb4:	bfc8      	it	gt
 8005eb6:	eeb0 8a69 	vmovgt.f32	s16, s19
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	bf58      	it	pl
 8005ec0:	eef1 0ac0 	vsqrtpl.f32	s1, s0
 8005ec4:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005ec8:	ed87 9a01 	vstr	s18, [r7, #4]
 8005ecc:	edc7 ca02 	vstr	s25, [r7, #8]
 8005ed0:	ed87 ca03 	vstr	s24, [r7, #12]
 8005ed4:	edc7 ba04 	vstr	s23, [r7, #16]
 8005ed8:	ed87 ba05 	vstr	s22, [r7, #20]
 8005edc:	edc7 aa06 	vstr	s21, [r7, #24]
 8005ee0:	ed87 aa07 	vstr	s20, [r7, #28]
 8005ee4:	edc7 9a08 	vstr	s19, [r7, #32]
 8005ee8:	f101 87c7 	bmi.w	8007e7a <neai_anomalydetection_learn+0x30b2>
 8005eec:	ee87 1aa0 	vdiv.f32	s2, s15, s1
 8005ef0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005ef4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	f200 8427 	bhi.w	800674e <neai_anomalydetection_learn+0x1986>
 8005f00:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8005f04:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8005f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0c:	bfb8      	it	lt
 8005f0e:	eeb0 1a6d 	vmovlt.f32	s2, s27
 8005f12:	eef4 2ac1 	vcmpe.f32	s5, s2
 8005f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1a:	f200 80ad 	bhi.w	8006078 <neai_anomalydetection_learn+0x12b0>
 8005f1e:	ee38 8ac8 	vsub.f32	s16, s17, s16
 8005f22:	ee33 1ac4 	vsub.f32	s2, s7, s8
 8005f26:	ee6e 7a08 	vmul.f32	s15, s28, s16
 8005f2a:	eef4 7ac1 	vcmpe.f32	s15, s2
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	f200 80a1 	bhi.w	8006078 <neai_anomalydetection_learn+0x12b0>
 8005f36:	ee6e 7a01 	vmul.f32	s15, s28, s2
 8005f3a:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f42:	f200 8099 	bhi.w	8006078 <neai_anomalydetection_learn+0x12b0>
 8005f46:	ee74 7a82 	vadd.f32	s15, s9, s4
 8005f4a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8005f4e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005f52:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f5e:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8005f62:	ee77 7a8f 	vadd.f32	s15, s15, s30
 8005f66:	ee87 0aae 	vdiv.f32	s0, s15, s29
 8005f6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	f101 854b 	bmi.w	8007a0c <neai_anomalydetection_learn+0x2c44>
 8005f76:	eef0 0a40 	vmov.f32	s1, s0
 8005f7a:	ee79 7a0d 	vadd.f32	s15, s18, s26
 8005f7e:	ee77 7aac 	vadd.f32	s15, s15, s25
 8005f82:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8005f86:	ee77 7aab 	vadd.f32	s15, s15, s23
 8005f8a:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8005f8e:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8005f92:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8005f96:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8005f9a:	eec7 8aae 	vdiv.f32	s17, s15, s29
 8005f9e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	f101 852d 	bmi.w	8007a04 <neai_anomalydetection_learn+0x2c3c>
 8005faa:	eef0 7a68 	vmov.f32	s15, s17
 8005fae:	ee2e 9a27 	vmul.f32	s18, s28, s15
 8005fb2:	eeb4 9ae0 	vcmpe.f32	s18, s1
 8005fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fba:	d85d      	bhi.n	8006078 <neai_anomalydetection_learn+0x12b0>
 8005fbc:	ee6e 0a20 	vmul.f32	s1, s28, s1
 8005fc0:	eef4 0ae7 	vcmpe.f32	s1, s15
 8005fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc8:	d856      	bhi.n	8006078 <neai_anomalydetection_learn+0x12b0>
 8005fca:	ee70 8a68 	vsub.f32	s17, s0, s17
 8005fce:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	d501      	bpl.n	8005fdc <neai_anomalydetection_learn+0x1214>
 8005fd8:	eef1 8a68 	vneg.f32	s17, s17
 8005fdc:	ee38 8a01 	vadd.f32	s16, s16, s2
 8005fe0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005fe4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005fe8:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff0:	db42      	blt.n	8006078 <neai_anomalydetection_learn+0x12b0>
 8005ff2:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 8005ff6:	eb08 0088 	add.w	r0, r8, r8, lsl #2
 8005ffa:	fa5f f38b 	uxtb.w	r3, fp
 8005ffe:	46dc      	mov	ip, fp
 8006000:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 8006004:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800600e:	f854 200a 	ldr.w	r2, [r4, sl]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	f854 300e 	ldr.w	r3, [r4, lr]
 8006018:	429a      	cmp	r2, r3
 800601a:	fa5f f988 	uxtb.w	r9, r8
 800601e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006022:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006026:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 800602a:	f241 866c 	bls.w	8007d06 <neai_anomalydetection_learn+0x2f3e>
 800602e:	2300      	movs	r3, #0
 8006030:	f10e 0004 	add.w	r0, lr, #4
 8006034:	46e0      	mov	r8, ip
 8006036:	f10e 0c18 	add.w	ip, lr, #24
 800603a:	610b      	str	r3, [r1, #16]
 800603c:	614b      	str	r3, [r1, #20]
 800603e:	624b      	str	r3, [r1, #36]	@ 0x24
 8006040:	eb04 020c 	add.w	r2, r4, ip
 8006044:	1821      	adds	r1, r4, r0
 8006046:	2300      	movs	r3, #0
 8006048:	f844 300e 	str.w	r3, [r4, lr]
 800604c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006050:	5023      	str	r3, [r4, r0]
 8006052:	f8dd b000 	ldr.w	fp, [sp]
 8006056:	604b      	str	r3, [r1, #4]
 8006058:	720b      	strb	r3, [r1, #8]
 800605a:	f844 300c 	str.w	r3, [r4, ip]
 800605e:	6053      	str	r3, [r2, #4]
 8006060:	7213      	strb	r3, [r2, #8]
 8006062:	eb0b 0308 	add.w	r3, fp, r8
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	f8dd a004 	ldr.w	sl, [sp, #4]
 800606c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006070:	f103 0218 	add.w	r2, r3, #24
 8006074:	3304      	adds	r3, #4
 8006076:	e37d      	b.n	8006774 <neai_anomalydetection_learn+0x19ac>
 8006078:	f108 0801 	add.w	r8, r8, #1
 800607c:	fa5f f288 	uxtb.w	r2, r8
 8006080:	2a18      	cmp	r2, #24
 8006082:	f109 0928 	add.w	r9, r9, #40	@ 0x28
 8006086:	f67f adcd 	bls.w	8005c24 <neai_anomalydetection_learn+0xe5c>
 800608a:	eef0 1a4e 	vmov.f32	s3, s28
 800608e:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
 8006092:	469b      	mov	fp, r3
 8006094:	e48f      	b.n	80059b6 <neai_anomalydetection_learn+0xbee>
 8006096:	4557      	cmp	r7, sl
 8006098:	f47f a9aa 	bne.w	80053f0 <neai_anomalydetection_learn+0x628>
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	2b19      	cmp	r3, #25
 80060a0:	eef0 1a6f 	vmov.f32	s3, s31
 80060a4:	f041 869f 	bne.w	8007de6 <neai_anomalydetection_learn+0x301e>
 80060a8:	ed5f dabb 	vldr	s27, [pc, #-748]	@ 8005dc0 <neai_anomalydetection_learn+0xff8>
 80060ac:	f8df a40c 	ldr.w	sl, [pc, #1036]	@ 80064bc <neai_anomalydetection_learn+0x16f4>
 80060b0:	eddd 2a00 	vldr	s5, [sp]
 80060b4:	f04f 0b00 	mov.w	fp, #0
 80060b8:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80060bc:	edda 7a05 	vldr	s15, [sl, #20]
 80060c0:	edda 6a04 	vldr	s13, [sl, #16]
 80060c4:	ed9f 7afb 	vldr	s14, [pc, #1004]	@ 80064b4 <neai_anomalydetection_learn+0x16ec>
 80060c8:	ee02 3a10 	vmov	s4, r3
 80060cc:	f89a 3005 	ldrb.w	r3, [sl, #5]
 80060d0:	ee04 3a90 	vmov	s9, r3
 80060d4:	f89a 3006 	ldrb.w	r3, [sl, #6]
 80060d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060dc:	ee05 3a10 	vmov	s10, r3
 80060e0:	f89a 3007 	ldrb.w	r3, [sl, #7]
 80060e4:	ee86 7a87 	vdiv.f32	s14, s13, s14
 80060e8:	f1bb 0f18 	cmp.w	fp, #24
 80060ec:	ee05 3a90 	vmov	s11, r3
 80060f0:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80060f4:	ee06 3a10 	vmov	s12, r3
 80060f8:	f89a 3009 	ldrb.w	r3, [sl, #9]
 80060fc:	ee06 3a90 	vmov	s13, r3
 8006100:	f89a 300a 	ldrb.w	r3, [sl, #10]
 8006104:	ee0f 3a90 	vmov	s31, r3
 8006108:	f89a 300b 	ldrb.w	r3, [sl, #11]
 800610c:	ee0f 3a10 	vmov	s30, r3
 8006110:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8006114:	ee0e 3a90 	vmov	s29, r3
 8006118:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 800611c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8006120:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8006124:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006128:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800612c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006130:	eef8 faef 	vcvt.f32.s32	s31, s31
 8006134:	eeb8 facf 	vcvt.f32.s32	s30, s30
 8006138:	eef8 eaee 	vcvt.f32.s32	s29, s29
 800613c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006140:	ee64 4a87 	vmul.f32	s9, s9, s14
 8006144:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006148:	ee65 5a87 	vmul.f32	s11, s11, s14
 800614c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006150:	ee66 6a87 	vmul.f32	s13, s13, s14
 8006154:	ee6f fa87 	vmul.f32	s31, s31, s14
 8006158:	ee2f fa07 	vmul.f32	s30, s30, s14
 800615c:	ee6e ea87 	vmul.f32	s29, s29, s14
 8006160:	ee32 2a27 	vadd.f32	s4, s4, s15
 8006164:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8006168:	ee35 5a27 	vadd.f32	s10, s10, s15
 800616c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006170:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006174:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006178:	ee7f faa7 	vadd.f32	s31, s31, s15
 800617c:	ee3f fa27 	vadd.f32	s30, s30, s15
 8006180:	ee7e eaa7 	vadd.f32	s29, s29, s15
 8006184:	ed85 2a00 	vstr	s4, [r5]
 8006188:	edc5 4a01 	vstr	s9, [r5, #4]
 800618c:	ed85 5a02 	vstr	s10, [r5, #8]
 8006190:	edc5 5a03 	vstr	s11, [r5, #12]
 8006194:	ed85 6a04 	vstr	s12, [r5, #16]
 8006198:	edc5 6a05 	vstr	s13, [r5, #20]
 800619c:	edc5 fa06 	vstr	s31, [r5, #24]
 80061a0:	ed85 fa07 	vstr	s30, [r5, #28]
 80061a4:	edc5 ea08 	vstr	s29, [r5, #32]
 80061a8:	f001 8643 	beq.w	8007e32 <neai_anomalydetection_learn+0x306a>
 80061ac:	eeb4 2ae4 	vcmpe.f32	s4, s9
 80061b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b4:	bf54      	ite	pl
 80061b6:	eef0 3a42 	vmovpl.f32	s7, s4
 80061ba:	eef0 3a64 	vmovmi.f32	s7, s9
 80061be:	eef4 3ac5 	vcmpe.f32	s7, s10
 80061c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c6:	bf48      	it	mi
 80061c8:	eef0 3a45 	vmovmi.f32	s7, s10
 80061cc:	eef4 3ae5 	vcmpe.f32	s7, s11
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	bf48      	it	mi
 80061d6:	eef0 3a65 	vmovmi.f32	s7, s11
 80061da:	eef4 3ac6 	vcmpe.f32	s7, s12
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	bf48      	it	mi
 80061e4:	eef0 3a46 	vmovmi.f32	s7, s12
 80061e8:	eef4 3ae6 	vcmpe.f32	s7, s13
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	bf48      	it	mi
 80061f2:	eef0 3a66 	vmovmi.f32	s7, s13
 80061f6:	eef4 3aef 	vcmpe.f32	s7, s31
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	bf48      	it	mi
 8006200:	eef0 3a6f 	vmovmi.f32	s7, s31
 8006204:	eef4 3acf 	vcmpe.f32	s7, s30
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	bf48      	it	mi
 800620e:	eef0 3a4f 	vmovmi.f32	s7, s30
 8006212:	eef4 3aee 	vcmpe.f32	s7, s29
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	ee22 7a02 	vmul.f32	s14, s4, s4
 800621e:	eeb4 2ae4 	vcmpe.f32	s4, s9
 8006222:	bf48      	it	mi
 8006224:	eef0 3a6e 	vmovmi.f32	s7, s29
 8006228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622c:	bfd4      	ite	le
 800622e:	eeb0 4a42 	vmovle.f32	s8, s4
 8006232:	eeb0 4a64 	vmovgt.f32	s8, s9
 8006236:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800623a:	ee37 7a2d 	vadd.f32	s14, s14, s27
 800623e:	ee32 da2d 	vadd.f32	s26, s4, s27
 8006242:	eeb4 4ac5 	vcmpe.f32	s8, s10
 8006246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800624a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624e:	ee3d da24 	vadd.f32	s26, s26, s9
 8006252:	ee25 7a05 	vmul.f32	s14, s10, s10
 8006256:	bfc8      	it	gt
 8006258:	eeb0 4a45 	vmovgt.f32	s8, s10
 800625c:	eeb4 4ae5 	vcmpe.f32	s8, s11
 8006260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006264:	ee3d da05 	vadd.f32	s26, s26, s10
 8006268:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800626c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006270:	bfc8      	it	gt
 8006272:	eeb0 4a65 	vmovgt.f32	s8, s11
 8006276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800627a:	ee3d da25 	vadd.f32	s26, s26, s11
 800627e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8006282:	eeb4 4ac6 	vcmpe.f32	s8, s12
 8006286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	ee3d da06 	vadd.f32	s26, s26, s12
 8006292:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8006296:	bfc8      	it	gt
 8006298:	eeb0 4a46 	vmovgt.f32	s8, s12
 800629c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a0:	eeb4 4ae6 	vcmpe.f32	s8, s13
 80062a4:	ee2f 7aaf 	vmul.f32	s14, s31, s31
 80062a8:	ee3d da26 	vadd.f32	s26, s26, s13
 80062ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062b4:	bfc8      	it	gt
 80062b6:	eeb0 4a66 	vmovgt.f32	s8, s13
 80062ba:	ee3d da2f 	vadd.f32	s26, s26, s31
 80062be:	ee6f 7a0f 	vmul.f32	s15, s30, s30
 80062c2:	eeb4 4aef 	vcmpe.f32	s8, s31
 80062c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ce:	ee3d da0f 	vadd.f32	s26, s26, s30
 80062d2:	ee2e 3aae 	vmul.f32	s6, s29, s29
 80062d6:	bfc8      	it	gt
 80062d8:	eeb0 4a6f 	vmovgt.f32	s8, s31
 80062dc:	ee3d da2e 	vadd.f32	s26, s26, s29
 80062e0:	eeb4 4acf 	vcmpe.f32	s8, s30
 80062e4:	ee33 3a27 	vadd.f32	s6, s6, s15
 80062e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ec:	eeb2 ea02 	vmov.f32	s28, #34	@ 0x41100000  9.0
 80062f0:	bfc8      	it	gt
 80062f2:	eeb0 4a4f 	vmovgt.f32	s8, s30
 80062f6:	ee6d 7a0d 	vmul.f32	s15, s26, s26
 80062fa:	ee23 3a0e 	vmul.f32	s6, s6, s28
 80062fe:	eeb4 4aee 	vcmpe.f32	s8, s29
 8006302:	eef0 0a42 	vmov.f32	s1, s4
 8006306:	eeb0 1a6f 	vmov.f32	s2, s31
 800630a:	eeb0 7a4f 	vmov.f32	s14, s30
 800630e:	ee33 3a67 	vsub.f32	s6, s6, s15
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	eef0 7a6e 	vmov.f32	s15, s29
 800631a:	f10b 0301 	add.w	r3, fp, #1
 800631e:	4f66      	ldr	r7, [pc, #408]	@ (80064b8 <neai_anomalydetection_learn+0x16f0>)
 8006320:	bfc8      	it	gt
 8006322:	eeb0 4a6e 	vmovgt.f32	s8, s29
 8006326:	eeb0 2a4d 	vmov.f32	s4, s26
 800632a:	eef0 fa65 	vmov.f32	s31, s11
 800632e:	eeb0 fa45 	vmov.f32	s30, s10
 8006332:	eef0 ea64 	vmov.f32	s29, s9
 8006336:	46d1      	mov	r9, sl
 8006338:	4698      	mov	r8, r3
 800633a:	eef0 ca61 	vmov.f32	s25, s3
 800633e:	eef0 4a67 	vmov.f32	s9, s15
 8006342:	eeb0 5a47 	vmov.f32	s10, s14
 8006346:	eef0 5a41 	vmov.f32	s11, s2
 800634a:	eeb0 da60 	vmov.f32	s26, s1
 800634e:	edd9 7a0f 	vldr	s15, [r9, #60]	@ 0x3c
 8006352:	edd9 1a0e 	vldr	s3, [r9, #56]	@ 0x38
 8006356:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80064b4 <neai_anomalydetection_learn+0x16ec>
 800635a:	f899 202c 	ldrb.w	r2, [r9, #44]	@ 0x2c
 800635e:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8006362:	ee08 2a10 	vmov	s16, r2
 8006366:	ee81 7a87 	vdiv.f32	s14, s3, s14
 800636a:	f899 202d 	ldrb.w	r2, [r9, #45]	@ 0x2d
 800636e:	ee0c 2a10 	vmov	s24, r2
 8006372:	f899 202e 	ldrb.w	r2, [r9, #46]	@ 0x2e
 8006376:	ee0b 2a90 	vmov	s23, r2
 800637a:	f899 202f 	ldrb.w	r2, [r9, #47]	@ 0x2f
 800637e:	ee0b 2a10 	vmov	s22, r2
 8006382:	f899 2030 	ldrb.w	r2, [r9, #48]	@ 0x30
 8006386:	ee0a 2a90 	vmov	s21, r2
 800638a:	f899 2031 	ldrb.w	r2, [r9, #49]	@ 0x31
 800638e:	ee0a 2a10 	vmov	s20, r2
 8006392:	f899 2032 	ldrb.w	r2, [r9, #50]	@ 0x32
 8006396:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800639a:	ee09 2a90 	vmov	s19, r2
 800639e:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 80063a2:	f899 2033 	ldrb.w	r2, [r9, #51]	@ 0x33
 80063a6:	ee28 8a07 	vmul.f32	s16, s16, s14
 80063aa:	ee2c ca07 	vmul.f32	s24, s24, s14
 80063ae:	ee09 2a10 	vmov	s18, r2
 80063b2:	f899 2034 	ldrb.w	r2, [r9, #52]	@ 0x34
 80063b6:	eef8 baeb 	vcvt.f32.s32	s23, s23
 80063ba:	ee3c ca27 	vadd.f32	s24, s24, s15
 80063be:	ee38 8a27 	vadd.f32	s16, s16, s15
 80063c2:	ee08 2a90 	vmov	s17, r2
 80063c6:	ee6b ba87 	vmul.f32	s23, s23, s14
 80063ca:	eeb4 8acc 	vcmpe.f32	s16, s24
 80063ce:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 80063d2:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80063d6:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80063da:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 80063de:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80063e2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80063e6:	ee7b baa7 	vadd.f32	s23, s23, s15
 80063ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ee:	bf54      	ite	pl
 80063f0:	eef0 1a48 	vmovpl.f32	s3, s16
 80063f4:	eef0 1a4c 	vmovmi.f32	s3, s24
 80063f8:	ee2b ba07 	vmul.f32	s22, s22, s14
 80063fc:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006400:	ee2a aa07 	vmul.f32	s20, s20, s14
 8006404:	ee69 9a87 	vmul.f32	s19, s19, s14
 8006408:	ee29 9a07 	vmul.f32	s18, s18, s14
 800640c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006410:	eef4 1a6b 	vcmp.f32	s3, s23
 8006414:	ee3b ba27 	vadd.f32	s22, s22, s15
 8006418:	ee7a aaa7 	vadd.f32	s21, s21, s15
 800641c:	ee3a aa27 	vadd.f32	s20, s20, s15
 8006420:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8006424:	ee39 9a27 	vadd.f32	s18, s18, s15
 8006428:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	ee68 7a08 	vmul.f32	s15, s16, s16
 8006434:	bf48      	it	mi
 8006436:	eef0 1a6b 	vmovmi.f32	s3, s23
 800643a:	eef4 1a4b 	vcmp.f32	s3, s22
 800643e:	ee2c 1a0c 	vmul.f32	s2, s24, s24
 8006442:	ee77 7aad 	vadd.f32	s15, s15, s27
 8006446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644a:	ee71 7a27 	vadd.f32	s15, s2, s15
 800644e:	bf48      	it	mi
 8006450:	eef0 1a4b 	vmovmi.f32	s3, s22
 8006454:	ee28 1a0d 	vmul.f32	s2, s16, s26
 8006458:	eef4 1a6a 	vcmp.f32	s3, s21
 800645c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006460:	ee31 1a2d 	vadd.f32	s2, s2, s27
 8006464:	ee2b 0aab 	vmul.f32	s0, s23, s23
 8006468:	ee6c 0a2e 	vmul.f32	s1, s24, s29
 800646c:	bf48      	it	mi
 800646e:	eef0 1a6a 	vmovmi.f32	s3, s21
 8006472:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006476:	ee70 0a81 	vadd.f32	s1, s1, s2
 800647a:	eef4 1a4a 	vcmp.f32	s3, s20
 800647e:	ee2b 1a0b 	vmul.f32	s2, s22, s22
 8006482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006486:	ee31 1a00 	vadd.f32	s2, s2, s0
 800648a:	bf48      	it	mi
 800648c:	eef0 1a4a 	vmovmi.f32	s3, s20
 8006490:	ee2b 0a8f 	vmul.f32	s0, s23, s30
 8006494:	eef4 1a69 	vcmp.f32	s3, s19
 8006498:	ee30 0a20 	vadd.f32	s0, s0, s1
 800649c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a0:	ee6a 0aaa 	vmul.f32	s1, s21, s21
 80064a4:	bf48      	it	mi
 80064a6:	eef0 1a69 	vmovmi.f32	s3, s19
 80064aa:	ee70 0a81 	vadd.f32	s1, s1, s2
 80064ae:	eef4 1a49 	vcmp.f32	s3, s18
 80064b2:	e005      	b.n	80064c0 <neai_anomalydetection_learn+0x16f8>
 80064b4:	437f0000 	.word	0x437f0000
 80064b8:	2000079c 	.word	0x2000079c
 80064bc:	200000c0 	.word	0x200000c0
 80064c0:	ee2b 1a2f 	vmul.f32	s2, s22, s31
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	ee31 1a00 	vadd.f32	s2, s2, s0
 80064cc:	bf48      	it	mi
 80064ce:	eef0 1a49 	vmovmi.f32	s3, s18
 80064d2:	ee38 7a2d 	vadd.f32	s14, s16, s27
 80064d6:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 80064da:	eef4 1a68 	vcmp.f32	s3, s17
 80064de:	ee30 0a20 	vadd.f32	s0, s0, s1
 80064e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e6:	ee37 7a0c 	vadd.f32	s14, s14, s24
 80064ea:	eeb4 8acc 	vcmpe.f32	s16, s24
 80064ee:	ee6a 0a86 	vmul.f32	s1, s21, s12
 80064f2:	bf48      	it	mi
 80064f4:	eef0 1a68 	vmovmi.f32	s3, s17
 80064f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fc:	ee70 0a81 	vadd.f32	s1, s1, s2
 8006500:	bfd4      	ite	le
 8006502:	eef0 7a48 	vmovle.f32	s15, s16
 8006506:	eef0 7a4c 	vmovgt.f32	s15, s24
 800650a:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800650e:	ee29 1aa9 	vmul.f32	s2, s19, s19
 8006512:	eef4 7a6b 	vcmp.f32	s15, s23
 8006516:	ee31 1a00 	vadd.f32	s2, s2, s0
 800651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651e:	ee37 7a0b 	vadd.f32	s14, s14, s22
 8006522:	ee2a 0a26 	vmul.f32	s0, s20, s13
 8006526:	bfc8      	it	gt
 8006528:	eef0 7a6b 	vmovgt.f32	s15, s23
 800652c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006530:	eef4 7a4b 	vcmp.f32	s15, s22
 8006534:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8006538:	ee69 0a09 	vmul.f32	s1, s18, s18
 800653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006540:	ee70 0a81 	vadd.f32	s1, s1, s2
 8006544:	bfc8      	it	gt
 8006546:	eef0 7a4b 	vmovgt.f32	s15, s22
 800654a:	ee37 7a0a 	vadd.f32	s14, s14, s20
 800654e:	ee29 1aa5 	vmul.f32	s2, s19, s11
 8006552:	eef4 7a6a 	vcmp.f32	s15, s21
 8006556:	ee31 1a00 	vadd.f32	s2, s2, s0
 800655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800655e:	ee37 7a29 	vadd.f32	s14, s14, s19
 8006562:	ee28 0aa8 	vmul.f32	s0, s17, s17
 8006566:	bfc8      	it	gt
 8006568:	eef0 7a6a 	vmovgt.f32	s15, s21
 800656c:	eef4 7a4a 	vcmp.f32	s15, s20
 8006570:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006574:	ee37 7a09 	vadd.f32	s14, s14, s18
 8006578:	ee69 0a05 	vmul.f32	s1, s18, s10
 800657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006580:	ee70 0a81 	vadd.f32	s1, s1, s2
 8006584:	bfc8      	it	gt
 8006586:	eef0 7a4a 	vmovgt.f32	s15, s20
 800658a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800658e:	ee28 1aa4 	vmul.f32	s2, s17, s9
 8006592:	eef4 7a69 	vcmp.f32	s15, s19
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	ee31 1a20 	vadd.f32	s2, s2, s1
 800659e:	ee20 0a0e 	vmul.f32	s0, s0, s28
 80065a2:	ee67 0a07 	vmul.f32	s1, s14, s14
 80065a6:	bfc8      	it	gt
 80065a8:	eef0 7a69 	vmovgt.f32	s15, s19
 80065ac:	eef4 7a49 	vcmp.f32	s15, s18
 80065b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80065b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b8:	bfc8      	it	gt
 80065ba:	eef0 7a49 	vmovgt.f32	s15, s18
 80065be:	ee23 0a00 	vmul.f32	s0, s6, s0
 80065c2:	eef4 7a68 	vcmp.f32	s15, s17
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	ee21 1a0e 	vmul.f32	s2, s2, s28
 80065ce:	ee22 7a07 	vmul.f32	s14, s4, s14
 80065d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80065d6:	bfc8      	it	gt
 80065d8:	eef0 7a68 	vmovgt.f32	s15, s17
 80065dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e0:	bf58      	it	pl
 80065e2:	eef1 0ac0 	vsqrtpl.f32	s1, s0
 80065e6:	ee31 7a47 	vsub.f32	s14, s2, s14
 80065ea:	ed87 8a00 	vstr	s16, [r7]
 80065ee:	ed87 ca01 	vstr	s24, [r7, #4]
 80065f2:	edc7 ba02 	vstr	s23, [r7, #8]
 80065f6:	ed87 ba03 	vstr	s22, [r7, #12]
 80065fa:	edc7 aa04 	vstr	s21, [r7, #16]
 80065fe:	ed87 aa05 	vstr	s20, [r7, #20]
 8006602:	edc7 9a06 	vstr	s19, [r7, #24]
 8006606:	ed87 9a07 	vstr	s18, [r7, #28]
 800660a:	edc7 8a08 	vstr	s17, [r7, #32]
 800660e:	f101 853e 	bmi.w	800808e <neai_anomalydetection_learn+0x32c6>
 8006612:	ee87 1a20 	vdiv.f32	s2, s14, s1
 8006616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800661a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	f200 8091 	bhi.w	8006748 <neai_anomalydetection_learn+0x1980>
 8006626:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800662a:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800662e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006632:	bfb8      	it	lt
 8006634:	eeb0 1a6d 	vmovlt.f32	s2, s27
 8006638:	eeb4 1ae2 	vcmpe.f32	s2, s5
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	db6b      	blt.n	800671a <neai_anomalydetection_learn+0x1952>
 8006642:	ee71 7ae7 	vsub.f32	s15, s3, s15
 8006646:	ee73 1ac4 	vsub.f32	s3, s7, s8
 800664a:	ee27 7aac 	vmul.f32	s14, s15, s25
 800664e:	eef4 1ac7 	vcmpe.f32	s3, s14
 8006652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006656:	db60      	blt.n	800671a <neai_anomalydetection_learn+0x1952>
 8006658:	ee21 7aac 	vmul.f32	s14, s3, s25
 800665c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006664:	db59      	blt.n	800671a <neai_anomalydetection_learn+0x1952>
 8006666:	ee3d 7a2e 	vadd.f32	s14, s26, s29
 800666a:	ee37 7a0f 	vadd.f32	s14, s14, s30
 800666e:	ee37 7a2f 	vadd.f32	s14, s14, s31
 8006672:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006676:	ee37 7a26 	vadd.f32	s14, s14, s13
 800667a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800667e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006682:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006686:	ee87 1a0e 	vdiv.f32	s2, s14, s28
 800668a:	ee38 7a0c 	vadd.f32	s14, s16, s24
 800668e:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8006692:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8006696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669a:	ee37 7a0b 	vadd.f32	s14, s14, s22
 800669e:	bf48      	it	mi
 80066a0:	eef1 0a41 	vnegmi.f32	s1, s2
 80066a4:	ee37 7a2a 	vadd.f32	s14, s14, s21
 80066a8:	bf58      	it	pl
 80066aa:	eef0 0a41 	vmovpl.f32	s1, s2
 80066ae:	ee37 7a0a 	vadd.f32	s14, s14, s20
 80066b2:	ee37 7a29 	vadd.f32	s14, s14, s19
 80066b6:	ee37 7a09 	vadd.f32	s14, s14, s18
 80066ba:	ee37 7a28 	vadd.f32	s14, s14, s17
 80066be:	ee87 0a0e 	vdiv.f32	s0, s14, s28
 80066c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ca:	bf4c      	ite	mi
 80066cc:	eeb1 7a40 	vnegmi.f32	s14, s0
 80066d0:	eeb0 7a40 	vmovpl.f32	s14, s0
 80066d4:	ee27 8a2c 	vmul.f32	s16, s14, s25
 80066d8:	eeb4 8ae0 	vcmpe.f32	s16, s1
 80066dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e0:	d81b      	bhi.n	800671a <neai_anomalydetection_learn+0x1952>
 80066e2:	ee60 0aac 	vmul.f32	s1, s1, s25
 80066e6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	db14      	blt.n	800671a <neai_anomalydetection_learn+0x1952>
 80066f0:	ee31 1a40 	vsub.f32	s2, s2, s0
 80066f4:	ee71 7aa7 	vadd.f32	s15, s3, s15
 80066f8:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80066fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006708:	bf48      	it	mi
 800670a:	eeb1 1a41 	vnegmi.f32	s2, s2
 800670e:	eef4 7ac1 	vcmpe.f32	s15, s2
 8006712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006716:	f6bf ac6c 	bge.w	8005ff2 <neai_anomalydetection_learn+0x122a>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	fa5f f288 	uxtb.w	r2, r8
 8006722:	2a18      	cmp	r2, #24
 8006724:	f109 0928 	add.w	r9, r9, #40	@ 0x28
 8006728:	f67f ae11 	bls.w	800634e <neai_anomalydetection_learn+0x1586>
 800672c:	eef0 1a6c 	vmov.f32	s3, s25
 8006730:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
 8006734:	469b      	mov	fp, r3
 8006736:	e4bf      	b.n	80060b8 <neai_anomalydetection_learn+0x12f0>
 8006738:	eef0 7a43 	vmov.f32	s15, s6
 800673c:	f7ff b8a7 	b.w	800588e <neai_anomalydetection_learn+0xac6>
 8006740:	eeb0 7a42 	vmov.f32	s14, s4
 8006744:	f7fe bdcd 	b.w	80052e2 <neai_anomalydetection_learn+0x51a>
 8006748:	eeb0 1a6d 	vmov.f32	s2, s27
 800674c:	e774      	b.n	8006638 <neai_anomalydetection_learn+0x1870>
 800674e:	eeb0 1a6d 	vmov.f32	s2, s27
 8006752:	f7ff bbde 	b.w	8005f12 <neai_anomalydetection_learn+0x114a>
 8006756:	9b02      	ldr	r3, [sp, #8]
 8006758:	f88b 3000 	strb.w	r3, [fp]
 800675c:	469a      	mov	sl, r3
 800675e:	9306      	str	r3, [sp, #24]
 8006760:	4cea      	ldr	r4, [pc, #936]	@ (8006b0c <neai_anomalydetection_learn+0x1d44>)
 8006762:	4beb      	ldr	r3, [pc, #940]	@ (8006b10 <neai_anomalydetection_learn+0x1d48>)
 8006764:	4deb      	ldr	r5, [pc, #940]	@ (8006b14 <neai_anomalydetection_learn+0x1d4c>)
 8006766:	4eec      	ldr	r6, [pc, #944]	@ (8006b18 <neai_anomalydetection_learn+0x1d50>)
 8006768:	4fec      	ldr	r7, [pc, #944]	@ (8006b1c <neai_anomalydetection_learn+0x1d54>)
 800676a:	9304      	str	r3, [sp, #16]
 800676c:	2218      	movs	r2, #24
 800676e:	2304      	movs	r3, #4
 8006770:	468b      	mov	fp, r1
 8006772:	4688      	mov	r8, r1
 8006774:	eb0b 0008 	add.w	r0, fp, r8
 8006778:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
 800677c:	ed91 8a05 	vldr	s16, [r1, #20]
 8006780:	edd1 7a04 	vldr	s15, [r1, #16]
 8006784:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 8006788:	ed9f 7ae6 	vldr	s14, [pc, #920]	@ 8006b24 <neai_anomalydetection_learn+0x1d5c>
 800678c:	edd1 6a09 	vldr	s13, [r1, #36]	@ 0x24
 8006790:	9016      	str	r0, [sp, #88]	@ 0x58
 8006792:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8006796:	18a1      	adds	r1, r4, r2
 8006798:	2802      	cmp	r0, #2
 800679a:	ee87 9a87 	vdiv.f32	s18, s15, s14
 800679e:	eb04 0903 	add.w	r9, r4, r3
 80067a2:	9100      	str	r1, [sp, #0]
 80067a4:	eec6 8a87 	vdiv.f32	s17, s13, s14
 80067a8:	f200 873c 	bhi.w	8007624 <neai_anomalydetection_learn+0x285c>
 80067ac:	f899 3001 	ldrb.w	r3, [r9, #1]
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	f899 3002 	ldrb.w	r3, [r9, #2]
 80067b6:	784a      	ldrb	r2, [r1, #1]
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	f899 3003 	ldrb.w	r3, [r9, #3]
 80067be:	9308      	str	r3, [sp, #32]
 80067c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80067c2:	f899 3004 	ldrb.w	r3, [r9, #4]
 80067c6:	788a      	ldrb	r2, [r1, #2]
 80067c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ca:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067cc:	f899 3005 	ldrb.w	r3, [r9, #5]
 80067d0:	78ca      	ldrb	r2, [r1, #3]
 80067d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067d4:	9210      	str	r2, [sp, #64]	@ 0x40
 80067d6:	f899 3006 	ldrb.w	r3, [r9, #6]
 80067da:	790a      	ldrb	r2, [r1, #4]
 80067dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067de:	9211      	str	r2, [sp, #68]	@ 0x44
 80067e0:	f899 3007 	ldrb.w	r3, [r9, #7]
 80067e4:	794a      	ldrb	r2, [r1, #5]
 80067e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80067e8:	9212      	str	r2, [sp, #72]	@ 0x48
 80067ea:	f899 3008 	ldrb.w	r3, [r9, #8]
 80067ee:	798a      	ldrb	r2, [r1, #6]
 80067f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80067f2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80067f4:	7a0b      	ldrb	r3, [r1, #8]
 80067f6:	79ca      	ldrb	r2, [r1, #7]
 80067f8:	9214      	str	r2, [sp, #80]	@ 0x50
 80067fa:	9315      	str	r3, [sp, #84]	@ 0x54
 80067fc:	eddd 7a03 	vldr	s15, [sp, #12]
 8006800:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006802:	eef8 aae7 	vcvt.f32.s32	s21, s15
 8006806:	eddd 7a07 	vldr	s15, [sp, #28]
 800680a:	eeb8 aae7 	vcvt.f32.s32	s20, s15
 800680e:	eddd 7a08 	vldr	s15, [sp, #32]
 8006812:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8006816:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 800681a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800681e:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8006822:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8006826:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 800682a:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 800682e:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8006832:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8006836:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 800683a:	eef8 3ae7 	vcvt.f32.s32	s7, s15
 800683e:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 8006842:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006846:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 800684a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 800684e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 8006852:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8006856:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 800685a:	eeb8 3ae7 	vcvt.f32.s32	s6, s15
 800685e:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 8006862:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8006866:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 800686a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 800686e:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
 8006872:	3301      	adds	r3, #1
 8006874:	ee07 3a10 	vmov	s14, r3
 8006878:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800687c:	f899 3000 	ldrb.w	r3, [r9]
 8006880:	eddd 7a15 	vldr	s15, [sp, #84]	@ 0x54
 8006884:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006894:	ee06 3a90 	vmov	s13, r3
 8006898:	ee67 7a89 	vmul.f32	s15, s15, s18
 800689c:	ee6a aa89 	vmul.f32	s21, s21, s18
 80068a0:	ee2a aa09 	vmul.f32	s20, s20, s18
 80068a4:	ee69 9a89 	vmul.f32	s19, s19, s18
 80068a8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80068ac:	ee60 0a89 	vmul.f32	s1, s1, s18
 80068b0:	ee61 1a89 	vmul.f32	s3, s3, s18
 80068b4:	ee62 2a89 	vmul.f32	s5, s5, s18
 80068b8:	ee63 3a89 	vmul.f32	s7, s7, s18
 80068bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80068c0:	ee7a aa88 	vadd.f32	s21, s21, s16
 80068c4:	ee3a aa08 	vadd.f32	s20, s20, s16
 80068c8:	ee79 9a88 	vadd.f32	s19, s19, s16
 80068cc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80068d0:	ee70 0a88 	vadd.f32	s1, s1, s16
 80068d4:	ee71 1a88 	vadd.f32	s3, s3, s16
 80068d8:	ee72 2a88 	vadd.f32	s5, s5, s16
 80068dc:	ee73 3a88 	vadd.f32	s7, s7, s16
 80068e0:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80068e4:	ee37 8a88 	vadd.f32	s16, s15, s16
 80068e8:	edd6 7a00 	vldr	s15, [r6]
 80068ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80068f0:	ee37 9ac8 	vsub.f32	s18, s15, s16
 80068f4:	ee26 6a28 	vmul.f32	s12, s12, s17
 80068f8:	ee21 1a28 	vmul.f32	s2, s2, s17
 80068fc:	ee22 2a28 	vmul.f32	s4, s4, s17
 8006900:	ee23 3a28 	vmul.f32	s6, s6, s17
 8006904:	ee24 4a28 	vmul.f32	s8, s8, s17
 8006908:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800690c:	ee25 5a28 	vmul.f32	s10, s10, s17
 8006910:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8006914:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8006918:	ee68 8a08 	vmul.f32	s17, s16, s16
 800691c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8006920:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8006924:	ee67 8aa7 	vmul.f32	s17, s15, s15
 8006928:	eec9 7a07 	vdiv.f32	s15, s18, s14
 800692c:	eb0b 0308 	add.w	r3, fp, r8
 8006930:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006934:	ee21 1a01 	vmul.f32	s2, s2, s2
 8006938:	ee77 7a88 	vadd.f32	s15, s15, s16
 800693c:	ee38 8ae6 	vsub.f32	s16, s17, s13
 8006940:	ee22 2a02 	vmul.f32	s4, s4, s4
 8006944:	eec8 8a07 	vdiv.f32	s17, s16, s14
 8006948:	ee27 8aa7 	vmul.f32	s16, s15, s15
 800694c:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8006950:	ee23 3a03 	vmul.f32	s6, s6, s6
 8006954:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8006958:	ed96 8a01 	vldr	s16, [r6, #4]
 800695c:	edc5 7a00 	vstr	s15, [r5]
 8006960:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006968:	bfa8      	it	ge
 800696a:	eeb1 bae6 	vsqrtge.f32	s22, s13
 800696e:	ee6a 6aaa 	vmul.f32	s13, s21, s21
 8006972:	ee78 8a6a 	vsub.f32	s17, s16, s21
 8006976:	ee76 6a26 	vadd.f32	s13, s12, s13
 800697a:	ee28 8a08 	vmul.f32	s16, s16, s16
 800697e:	ee88 6a87 	vdiv.f32	s12, s17, s14
 8006982:	ee38 8a66 	vsub.f32	s16, s16, s13
 8006986:	ee36 6a2a 	vadd.f32	s12, s12, s21
 800698a:	eec8 8a07 	vdiv.f32	s17, s16, s14
 800698e:	ee26 8a06 	vmul.f32	s16, s12, s12
 8006992:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8006996:	bfb8      	it	lt
 8006998:	ed9f ba61 	vldrlt	s22, [pc, #388]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 800699c:	ed85 6a01 	vstr	s12, [r5, #4]
 80069a0:	ee76 6ac8 	vsub.f32	s13, s13, s16
 80069a4:	ee2a 8a0a 	vmul.f32	s16, s20, s20
 80069a8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80069ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b0:	bfa8      	it	ge
 80069b2:	eef1 eae6 	vsqrtge.f32	s29, s13
 80069b6:	edd6 6a02 	vldr	s13, [r6, #8]
 80069ba:	bfb8      	it	lt
 80069bc:	eddf ea58 	vldrlt	s29, [pc, #352]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 80069c0:	ed87 ba00 	vstr	s22, [r7]
 80069c4:	ee31 1a08 	vadd.f32	s2, s2, s16
 80069c8:	ee76 8aca 	vsub.f32	s17, s13, s20
 80069cc:	ee26 8aa6 	vmul.f32	s16, s13, s13
 80069d0:	eec8 6a87 	vdiv.f32	s13, s17, s14
 80069d4:	ee38 8a41 	vsub.f32	s16, s16, s2
 80069d8:	ee76 ba8a 	vadd.f32	s23, s13, s20
 80069dc:	eec8 8a07 	vdiv.f32	s17, s16, s14
 80069e0:	ee2b 8aab 	vmul.f32	s16, s23, s23
 80069e4:	ee31 1a28 	vadd.f32	s2, s2, s17
 80069e8:	edc7 ea01 	vstr	s29, [r7, #4]
 80069ec:	ee31 1a48 	vsub.f32	s2, s2, s16
 80069f0:	ee29 8aa9 	vmul.f32	s16, s19, s19
 80069f4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80069f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fc:	bfa8      	it	ge
 80069fe:	eeb1 eac1 	vsqrtge.f32	s28, s2
 8006a02:	ed96 1a03 	vldr	s2, [r6, #12]
 8006a06:	bfb8      	it	lt
 8006a08:	ed9f ea45 	vldrlt	s28, [pc, #276]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006a0c:	edc5 ba02 	vstr	s23, [r5, #8]
 8006a10:	ee32 2a08 	vadd.f32	s4, s4, s16
 8006a14:	ee31 8a69 	vsub.f32	s16, s2, s19
 8006a18:	ee21 1a01 	vmul.f32	s2, s2, s2
 8006a1c:	eec8 aa07 	vdiv.f32	s21, s16, s14
 8006a20:	ee31 1a42 	vsub.f32	s2, s2, s4
 8006a24:	ee7a aaa9 	vadd.f32	s21, s21, s19
 8006a28:	ee81 8a07 	vdiv.f32	s16, s2, s14
 8006a2c:	ee2a 1aaa 	vmul.f32	s2, s21, s21
 8006a30:	ee32 2a08 	vadd.f32	s4, s4, s16
 8006a34:	ed87 ea02 	vstr	s28, [r7, #8]
 8006a38:	ee32 2a41 	vsub.f32	s4, s4, s2
 8006a3c:	edc5 aa03 	vstr	s21, [r5, #12]
 8006a40:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	bfac      	ite	ge
 8006a4a:	eef1 dac2 	vsqrtge.f32	s27, s4
 8006a4e:	eddf da34 	vldrlt	s27, [pc, #208]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006a52:	ee20 1a00 	vmul.f32	s2, s0, s0
 8006a56:	edc7 da03 	vstr	s27, [r7, #12]
 8006a5a:	ed96 2a04 	vldr	s4, [r6, #16]
 8006a5e:	ee33 3a01 	vadd.f32	s6, s6, s2
 8006a62:	ee32 1a40 	vsub.f32	s2, s4, s0
 8006a66:	ee22 2a02 	vmul.f32	s4, s4, s4
 8006a6a:	ee81 aa07 	vdiv.f32	s20, s2, s14
 8006a6e:	ee32 2a43 	vsub.f32	s4, s4, s6
 8006a72:	ee3a aa00 	vadd.f32	s20, s20, s0
 8006a76:	ee82 1a07 	vdiv.f32	s2, s4, s14
 8006a7a:	ee2a 2a0a 	vmul.f32	s4, s20, s20
 8006a7e:	ee33 3a01 	vadd.f32	s6, s6, s2
 8006a82:	ee24 4a04 	vmul.f32	s8, s8, s8
 8006a86:	ee33 3a42 	vsub.f32	s6, s6, s4
 8006a8a:	ee20 2aa0 	vmul.f32	s4, s1, s1
 8006a8e:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	bfa8      	it	ge
 8006a98:	eeb1 dac3 	vsqrtge.f32	s26, s6
 8006a9c:	ed96 3a05 	vldr	s6, [r6, #20]
 8006aa0:	bfb8      	it	lt
 8006aa2:	ed9f da1f 	vldrlt	s26, [pc, #124]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006aa6:	ed85 aa04 	vstr	s20, [r5, #16]
 8006aaa:	ee34 4a02 	vadd.f32	s8, s8, s4
 8006aae:	ee33 2a60 	vsub.f32	s4, s6, s1
 8006ab2:	ee23 3a03 	vmul.f32	s6, s6, s6
 8006ab6:	eec2 9a07 	vdiv.f32	s19, s4, s14
 8006aba:	ee33 3a44 	vsub.f32	s6, s6, s8
 8006abe:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8006ac2:	ee83 2a07 	vdiv.f32	s4, s6, s14
 8006ac6:	ee29 3aa9 	vmul.f32	s6, s19, s19
 8006aca:	ee34 4a02 	vadd.f32	s8, s8, s4
 8006ace:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8006ad2:	ee34 4a43 	vsub.f32	s8, s8, s6
 8006ad6:	ee21 3aa1 	vmul.f32	s6, s3, s3
 8006ada:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8006ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae2:	bfa8      	it	ge
 8006ae4:	eef1 cac4 	vsqrtge.f32	s25, s8
 8006ae8:	ed96 4a06 	vldr	s8, [r6, #24]
 8006aec:	bfb8      	it	lt
 8006aee:	eddf ca0c 	vldrlt	s25, [pc, #48]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006af2:	ed87 da04 	vstr	s26, [r7, #16]
 8006af6:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006afa:	ee34 3a61 	vsub.f32	s6, s8, s3
 8006afe:	ee24 4a04 	vmul.f32	s8, s8, s8
 8006b02:	ee83 9a07 	vdiv.f32	s18, s6, s14
 8006b06:	ee34 4a64 	vsub.f32	s8, s8, s9
 8006b0a:	e00f      	b.n	8006b2c <neai_anomalydetection_learn+0x1d64>
 8006b0c:	200000c0 	.word	0x200000c0
 8006b10:	200004a8 	.word	0x200004a8
 8006b14:	200007c0 	.word	0x200007c0
 8006b18:	20000778 	.word	0x20000778
 8006b1c:	2000079c 	.word	0x2000079c
 8006b20:	00000000 	.word	0x00000000
 8006b24:	437f0000 	.word	0x437f0000
 8006b28:	4d732fdc 	.word	0x4d732fdc
 8006b2c:	ee39 9a21 	vadd.f32	s18, s18, s3
 8006b30:	ee84 3a07 	vdiv.f32	s6, s8, s14
 8006b34:	ee29 4a09 	vmul.f32	s8, s18, s18
 8006b38:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006b3c:	ee25 5a05 	vmul.f32	s10, s10, s10
 8006b40:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8006b44:	ee22 4aa2 	vmul.f32	s8, s5, s5
 8006b48:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	bfa8      	it	ge
 8006b52:	eeb1 cae4 	vsqrtge.f32	s24, s9
 8006b56:	edd6 4a07 	vldr	s9, [r6, #28]
 8006b5a:	bfb8      	it	lt
 8006b5c:	ed1f ca10 	vldrlt	s24, [pc, #-64]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006b60:	edc5 9a05 	vstr	s19, [r5, #20]
 8006b64:	ee35 5a04 	vadd.f32	s10, s10, s8
 8006b68:	ee34 4ae2 	vsub.f32	s8, s9, s5
 8006b6c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8006b70:	eec4 8a07 	vdiv.f32	s17, s8, s14
 8006b74:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006b78:	ee78 8aa2 	vadd.f32	s17, s17, s5
 8006b7c:	ee84 4a87 	vdiv.f32	s8, s9, s14
 8006b80:	ee68 4aa8 	vmul.f32	s9, s17, s17
 8006b84:	ee35 5a04 	vadd.f32	s10, s10, s8
 8006b88:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8006b8c:	ee35 5a64 	vsub.f32	s10, s10, s9
 8006b90:	ee63 4aa3 	vmul.f32	s9, s7, s7
 8006b94:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	bfa8      	it	ge
 8006b9e:	eef1 6ac5 	vsqrtge.f32	s13, s10
 8006ba2:	ed96 5a08 	vldr	s10, [r6, #32]
 8006ba6:	bfb8      	it	lt
 8006ba8:	ed5f 6a23 	vldrlt	s13, [pc, #-140]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006bac:	edc7 ca05 	vstr	s25, [r7, #20]
 8006bb0:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8006bb4:	ee75 4a63 	vsub.f32	s9, s10, s7
 8006bb8:	ee25 5a05 	vmul.f32	s10, s10, s10
 8006bbc:	ee84 8a87 	vdiv.f32	s16, s9, s14
 8006bc0:	ee35 5a65 	vsub.f32	s10, s10, s11
 8006bc4:	ee38 8a23 	vadd.f32	s16, s16, s7
 8006bc8:	eec5 4a07 	vdiv.f32	s9, s10, s14
 8006bcc:	ed85 9a06 	vstr	s18, [r5, #24]
 8006bd0:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8006bd4:	ee68 5a08 	vmul.f32	s11, s16, s16
 8006bd8:	ed87 ca06 	vstr	s24, [r7, #24]
 8006bdc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006be0:	edcd 6a03 	vstr	s13, [sp, #12]
 8006be4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	bfa8      	it	ge
 8006bee:	eeb1 fac7 	vsqrtge.f32	s30, s14
 8006bf2:	eef4 7ac6 	vcmpe.f32	s15, s12
 8006bf6:	bfb8      	it	lt
 8006bf8:	ed1f fa37 	vldrlt	s30, [pc, #-220]	@ 8006b20 <neai_anomalydetection_learn+0x1d58>
 8006bfc:	edc5 8a07 	vstr	s17, [r5, #28]
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	bf54      	ite	pl
 8006c06:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006c0a:	eeb0 7a46 	vmovmi.f32	s14, s12
 8006c0e:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8006c12:	bf54      	ite	pl
 8006c14:	edc3 7a04 	vstrpl	s15, [r3, #16]
 8006c18:	ed83 6a04 	vstrmi	s12, [r3, #16]
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	edc7 6a07 	vstr	s13, [r7, #28]
 8006c24:	ed85 8a08 	vstr	s16, [r5, #32]
 8006c28:	ed87 fa08 	vstr	s30, [r7, #32]
 8006c2c:	d507      	bpl.n	8006c3e <neai_anomalydetection_learn+0x1e76>
 8006c2e:	eb0b 0308 	add.w	r3, fp, r8
 8006c32:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006c36:	edc3 ba04 	vstr	s23, [r3, #16]
 8006c3a:	eeb0 7a6b 	vmov.f32	s14, s23
 8006c3e:	eeb4 7aea 	vcmpe.f32	s14, s21
 8006c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c46:	d507      	bpl.n	8006c58 <neai_anomalydetection_learn+0x1e90>
 8006c48:	eb0b 0308 	add.w	r3, fp, r8
 8006c4c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006c50:	edc3 aa04 	vstr	s21, [r3, #16]
 8006c54:	eeb0 7a6a 	vmov.f32	s14, s21
 8006c58:	eeb4 7aca 	vcmpe.f32	s14, s20
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	d507      	bpl.n	8006c72 <neai_anomalydetection_learn+0x1eaa>
 8006c62:	eb0b 0308 	add.w	r3, fp, r8
 8006c66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006c6a:	ed83 aa04 	vstr	s20, [r3, #16]
 8006c6e:	eeb0 7a4a 	vmov.f32	s14, s20
 8006c72:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	d507      	bpl.n	8006c8c <neai_anomalydetection_learn+0x1ec4>
 8006c7c:	eb0b 0308 	add.w	r3, fp, r8
 8006c80:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006c84:	edc3 9a04 	vstr	s19, [r3, #16]
 8006c88:	eeb0 7a69 	vmov.f32	s14, s19
 8006c8c:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8006c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c94:	d507      	bpl.n	8006ca6 <neai_anomalydetection_learn+0x1ede>
 8006c96:	eb0b 0308 	add.w	r3, fp, r8
 8006c9a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006c9e:	ed83 9a04 	vstr	s18, [r3, #16]
 8006ca2:	eeb0 7a49 	vmov.f32	s14, s18
 8006ca6:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8006caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cae:	d507      	bpl.n	8006cc0 <neai_anomalydetection_learn+0x1ef8>
 8006cb0:	eb0b 0308 	add.w	r3, fp, r8
 8006cb4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006cb8:	edc3 8a04 	vstr	s17, [r3, #16]
 8006cbc:	eeb0 7a68 	vmov.f32	s14, s17
 8006cc0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8006cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc8:	dd07      	ble.n	8006cda <neai_anomalydetection_learn+0x1f12>
 8006cca:	eb0b 0308 	add.w	r3, fp, r8
 8006cce:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006cd2:	ed83 8a04 	vstr	s16, [r3, #16]
 8006cd6:	eeb0 7a48 	vmov.f32	s14, s16
 8006cda:	eef4 7ac6 	vcmpe.f32	s15, s12
 8006cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce2:	bfd4      	ite	le
 8006ce4:	eef0 5a67 	vmovle.f32	s11, s15
 8006ce8:	eef0 5a46 	vmovgt.f32	s11, s12
 8006cec:	eb0b 0308 	add.w	r3, fp, r8
 8006cf0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006cf4:	eef4 5aeb 	vcmpe.f32	s11, s23
 8006cf8:	bfd4      	ite	le
 8006cfa:	edc3 7a05 	vstrle	s15, [r3, #20]
 8006cfe:	ed83 6a05 	vstrgt	s12, [r3, #20]
 8006d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d06:	dd07      	ble.n	8006d18 <neai_anomalydetection_learn+0x1f50>
 8006d08:	eb0b 0308 	add.w	r3, fp, r8
 8006d0c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d10:	edc3 ba05 	vstr	s23, [r3, #20]
 8006d14:	eef0 5a6b 	vmov.f32	s11, s23
 8006d18:	eef4 5aea 	vcmpe.f32	s11, s21
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	dd07      	ble.n	8006d32 <neai_anomalydetection_learn+0x1f6a>
 8006d22:	eb0b 0308 	add.w	r3, fp, r8
 8006d26:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d2a:	edc3 aa05 	vstr	s21, [r3, #20]
 8006d2e:	eef0 5a6a 	vmov.f32	s11, s21
 8006d32:	eef4 5aca 	vcmpe.f32	s11, s20
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	dd07      	ble.n	8006d4c <neai_anomalydetection_learn+0x1f84>
 8006d3c:	eb0b 0308 	add.w	r3, fp, r8
 8006d40:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d44:	ed83 aa05 	vstr	s20, [r3, #20]
 8006d48:	eef0 5a4a 	vmov.f32	s11, s20
 8006d4c:	eef4 5ae9 	vcmpe.f32	s11, s19
 8006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d54:	dd07      	ble.n	8006d66 <neai_anomalydetection_learn+0x1f9e>
 8006d56:	eb0b 0308 	add.w	r3, fp, r8
 8006d5a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d5e:	edc3 9a05 	vstr	s19, [r3, #20]
 8006d62:	eef0 5a69 	vmov.f32	s11, s19
 8006d66:	eef4 5ac9 	vcmpe.f32	s11, s18
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	dd07      	ble.n	8006d80 <neai_anomalydetection_learn+0x1fb8>
 8006d70:	eb0b 0308 	add.w	r3, fp, r8
 8006d74:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d78:	ed83 9a05 	vstr	s18, [r3, #20]
 8006d7c:	eef0 5a49 	vmov.f32	s11, s18
 8006d80:	eef4 5ae8 	vcmpe.f32	s11, s17
 8006d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d88:	dd07      	ble.n	8006d9a <neai_anomalydetection_learn+0x1fd2>
 8006d8a:	eb0b 0308 	add.w	r3, fp, r8
 8006d8e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006d92:	edc3 8a05 	vstr	s17, [r3, #20]
 8006d96:	eef0 5a68 	vmov.f32	s11, s17
 8006d9a:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	d507      	bpl.n	8006db4 <neai_anomalydetection_learn+0x1fec>
 8006da4:	eb0b 0308 	add.w	r3, fp, r8
 8006da8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006dac:	ed83 8a05 	vstr	s16, [r3, #20]
 8006db0:	eef0 5a48 	vmov.f32	s11, s16
 8006db4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006db8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006dbc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc4:	bf8c      	ite	hi
 8006dc6:	ed1f 5aa9 	vldrhi	s10, [pc, #-676]	@ 8006b24 <neai_anomalydetection_learn+0x1d5c>
 8006dca:	ed5f faa9 	vldrls	s31, [pc, #-676]	@ 8006b28 <neai_anomalydetection_learn+0x1d60>
 8006dce:	ed8d 6a07 	vstr	s12, [sp, #28]
 8006dd2:	bf88      	it	hi
 8006dd4:	eec5 fa07 	vdivhi.f32	s31, s10, s14
 8006dd8:	2700      	movs	r7, #0
 8006dda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006dde:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dea:	bfb4      	ite	lt
 8006dec:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006df0:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006df8:	ee17 0a90 	vmov	r0, s15
 8006dfc:	f7f9 fcc4 	bl	8000788 <__aeabi_i2d>
 8006e00:	ed9d 6a07 	vldr	s12, [sp, #28]
 8006e04:	ed9f 1bf8 	vldr	d1, [pc, #992]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006e08:	ec41 0b10 	vmov	d0, r0, r1
 8006e0c:	ed8d 6a07 	vstr	s12, [sp, #28]
 8006e10:	f002 fb64 	bl	80094dc <fmax>
 8006e14:	ec51 0b10 	vmov	r0, r1, d0
 8006e18:	f7f9 fda8 	bl	800096c <__aeabi_d2f>
 8006e1c:	eddf 0af4 	vldr	s1, [pc, #976]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8006e20:	ee00 0a10 	vmov	s0, r0
 8006e24:	f002 fbae 	bl	8009584 <fminf>
 8006e28:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006e2c:	ed9d 6a07 	vldr	s12, [sp, #28]
 8006e30:	ee17 3a90 	vmov	r3, s15
 8006e34:	f889 3000 	strb.w	r3, [r9]
 8006e38:	eb0b 0308 	add.w	r3, fp, r8
 8006e3c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006e40:	edd3 7a05 	vldr	s15, [r3, #20]
 8006e44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006e48:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e4c:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e58:	bfb4      	ite	lt
 8006e5a:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006e5e:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e66:	ee17 0a90 	vmov	r0, s15
 8006e6a:	f7f9 fc8d 	bl	8000788 <__aeabi_i2d>
 8006e6e:	ed9f 1bde 	vldr	d1, [pc, #888]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006e72:	ec41 0b10 	vmov	d0, r0, r1
 8006e76:	f002 fb31 	bl	80094dc <fmax>
 8006e7a:	ec51 0b10 	vmov	r0, r1, d0
 8006e7e:	f7f9 fd75 	bl	800096c <__aeabi_d2f>
 8006e82:	eddf 0adb 	vldr	s1, [pc, #876]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8006e86:	ee00 0a10 	vmov	s0, r0
 8006e8a:	f002 fb7b 	bl	8009584 <fminf>
 8006e8e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006e92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e96:	ee17 3a90 	vmov	r3, s15
 8006e9a:	f889 3001 	strb.w	r3, [r9, #1]
 8006e9e:	eb0b 0308 	add.w	r3, fp, r8
 8006ea2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006ea6:	edd3 7a05 	vldr	s15, [r3, #20]
 8006eaa:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 8006eae:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eba:	bfb4      	ite	lt
 8006ebc:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006ec0:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ec8:	ee17 0a90 	vmov	r0, s15
 8006ecc:	f7f9 fc5c 	bl	8000788 <__aeabi_i2d>
 8006ed0:	ed9f 1bc5 	vldr	d1, [pc, #788]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006ed4:	ec41 0b10 	vmov	d0, r0, r1
 8006ed8:	f002 fb00 	bl	80094dc <fmax>
 8006edc:	ec51 0b10 	vmov	r0, r1, d0
 8006ee0:	f7f9 fd44 	bl	800096c <__aeabi_d2f>
 8006ee4:	eddf 0ac2 	vldr	s1, [pc, #776]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8006ee8:	ee00 0a10 	vmov	s0, r0
 8006eec:	f002 fb4a 	bl	8009584 <fminf>
 8006ef0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006ef4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006ef8:	ee17 3a90 	vmov	r3, s15
 8006efc:	f889 3002 	strb.w	r3, [r9, #2]
 8006f00:	eb0b 0308 	add.w	r3, fp, r8
 8006f04:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006f08:	edd3 7a05 	vldr	s15, [r3, #20]
 8006f0c:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8006f10:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1c:	bfb4      	ite	lt
 8006f1e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006f22:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2a:	ee17 0a90 	vmov	r0, s15
 8006f2e:	f7f9 fc2b 	bl	8000788 <__aeabi_i2d>
 8006f32:	ed9f 1bad 	vldr	d1, [pc, #692]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006f36:	ec41 0b10 	vmov	d0, r0, r1
 8006f3a:	f002 facf 	bl	80094dc <fmax>
 8006f3e:	ec51 0b10 	vmov	r0, r1, d0
 8006f42:	f7f9 fd13 	bl	800096c <__aeabi_d2f>
 8006f46:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8006f4a:	ee00 0a10 	vmov	s0, r0
 8006f4e:	f002 fb19 	bl	8009584 <fminf>
 8006f52:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006f56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f5a:	ee17 3a90 	vmov	r3, s15
 8006f5e:	f889 3003 	strb.w	r3, [r9, #3]
 8006f62:	eb0b 0308 	add.w	r3, fp, r8
 8006f66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006f6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006f6e:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8006f72:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	bfb4      	ite	lt
 8006f80:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006f84:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f8c:	ee17 0a90 	vmov	r0, s15
 8006f90:	f7f9 fbfa 	bl	8000788 <__aeabi_i2d>
 8006f94:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006f98:	ec41 0b10 	vmov	d0, r0, r1
 8006f9c:	f002 fa9e 	bl	80094dc <fmax>
 8006fa0:	ec51 0b10 	vmov	r0, r1, d0
 8006fa4:	f7f9 fce2 	bl	800096c <__aeabi_d2f>
 8006fa8:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8006fac:	ee00 0a10 	vmov	s0, r0
 8006fb0:	f002 fae8 	bl	8009584 <fminf>
 8006fb4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006fb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fbc:	ee17 3a90 	vmov	r3, s15
 8006fc0:	f889 3004 	strb.w	r3, [r9, #4]
 8006fc4:	eb0b 0308 	add.w	r3, fp, r8
 8006fc8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006fcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8006fd0:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8006fd4:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	bfb4      	ite	lt
 8006fe2:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8006fe6:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8006fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fee:	ee17 0a90 	vmov	r0, s15
 8006ff2:	f7f9 fbc9 	bl	8000788 <__aeabi_i2d>
 8006ff6:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8006ffa:	ec41 0b10 	vmov	d0, r0, r1
 8006ffe:	f002 fa6d 	bl	80094dc <fmax>
 8007002:	ec51 0b10 	vmov	r0, r1, d0
 8007006:	f7f9 fcb1 	bl	800096c <__aeabi_d2f>
 800700a:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 800700e:	ee00 0a10 	vmov	s0, r0
 8007012:	f002 fab7 	bl	8009584 <fminf>
 8007016:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800701a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800701e:	ee17 3a90 	vmov	r3, s15
 8007022:	f889 3005 	strb.w	r3, [r9, #5]
 8007026:	eb0b 0308 	add.w	r3, fp, r8
 800702a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800702e:	edd3 7a05 	vldr	s15, [r3, #20]
 8007032:	ee79 7a67 	vsub.f32	s15, s18, s15
 8007036:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800703a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	bfb4      	ite	lt
 8007044:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8007048:	ee77 7a87 	vaddge.f32	s15, s15, s14
 800704c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007050:	ee17 0a90 	vmov	r0, s15
 8007054:	f7f9 fb98 	bl	8000788 <__aeabi_i2d>
 8007058:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 800705c:	ec41 0b10 	vmov	d0, r0, r1
 8007060:	f002 fa3c 	bl	80094dc <fmax>
 8007064:	ec51 0b10 	vmov	r0, r1, d0
 8007068:	f7f9 fc80 	bl	800096c <__aeabi_d2f>
 800706c:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8007070:	ee00 0a10 	vmov	s0, r0
 8007074:	f002 fa86 	bl	8009584 <fminf>
 8007078:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800707c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007080:	ee17 3a90 	vmov	r3, s15
 8007084:	f889 3006 	strb.w	r3, [r9, #6]
 8007088:	eb0b 0308 	add.w	r3, fp, r8
 800708c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007090:	edd3 7a05 	vldr	s15, [r3, #20]
 8007094:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8007098:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800709c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	bfb4      	ite	lt
 80070a6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80070aa:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80070ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070b2:	ee17 0a90 	vmov	r0, s15
 80070b6:	f7f9 fb67 	bl	8000788 <__aeabi_i2d>
 80070ba:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 80070be:	ec41 0b10 	vmov	d0, r0, r1
 80070c2:	f002 fa0b 	bl	80094dc <fmax>
 80070c6:	ec51 0b10 	vmov	r0, r1, d0
 80070ca:	f7f9 fc4f 	bl	800096c <__aeabi_d2f>
 80070ce:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 80070d2:	ee00 0a10 	vmov	s0, r0
 80070d6:	f002 fa55 	bl	8009584 <fminf>
 80070da:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80070de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80070e2:	ee17 3a90 	vmov	r3, s15
 80070e6:	f889 3007 	strb.w	r3, [r9, #7]
 80070ea:	eb0b 0308 	add.w	r3, fp, r8
 80070ee:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80070f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80070f6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80070fa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80070fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	bfac      	ite	ge
 8007108:	ee77 7a87 	vaddge.f32	s15, s15, s14
 800710c:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8007110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007114:	ee17 0a90 	vmov	r0, s15
 8007118:	f7f9 fb36 	bl	8000788 <__aeabi_i2d>
 800711c:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 80071e8 <neai_anomalydetection_learn+0x2420>
 8007120:	ec41 0b10 	vmov	d0, r0, r1
 8007124:	f002 f9da 	bl	80094dc <fmax>
 8007128:	ec51 0b10 	vmov	r0, r1, d0
 800712c:	f7f9 fc1e 	bl	800096c <__aeabi_d2f>
 8007130:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 8007134:	ee00 0a10 	vmov	s0, r0
 8007138:	f002 fa24 	bl	8009584 <fminf>
 800713c:	eeb4 baee 	vcmpe.f32	s22, s29
 8007140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007144:	bf54      	ite	pl
 8007146:	eeb0 8a4b 	vmovpl.f32	s16, s22
 800714a:	eeb0 8a6e 	vmovmi.f32	s16, s29
 800714e:	eeb4 8a4e 	vcmp.f32	s16, s28
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	bf48      	it	mi
 8007158:	eeb0 8a4e 	vmovmi.f32	s16, s28
 800715c:	eeb4 8a6d 	vcmp.f32	s16, s27
 8007160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007164:	bf48      	it	mi
 8007166:	eeb0 8a6d 	vmovmi.f32	s16, s27
 800716a:	eeb4 8a4d 	vcmp.f32	s16, s26
 800716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007172:	bf48      	it	mi
 8007174:	eeb0 8a4d 	vmovmi.f32	s16, s26
 8007178:	eeb4 8a6c 	vcmp.f32	s16, s25
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	bf48      	it	mi
 8007182:	eeb0 8a6c 	vmovmi.f32	s16, s25
 8007186:	eeb4 8a4c 	vcmp.f32	s16, s24
 800718a:	eddd 7a03 	vldr	s15, [sp, #12]
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	bf48      	it	mi
 8007194:	eeb0 8a4c 	vmovmi.f32	s16, s24
 8007198:	eeb4 8a67 	vcmp.f32	s16, s15
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	bf48      	it	mi
 80071a2:	eeb0 8a67 	vmovmi.f32	s16, s15
 80071a6:	eeb4 8a4f 	vcmp.f32	s16, s30
 80071aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ae:	bf48      	it	mi
 80071b0:	eeb0 8a4f 	vmovmi.f32	s16, s30
 80071b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80071b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	ee17 3a90 	vmov	r3, s15
 80071c4:	bf12      	itee	ne
 80071c6:	eddf 7a0a 	vldrne	s15, [pc, #40]	@ 80071f0 <neai_anomalydetection_learn+0x2428>
 80071ca:	eddf 8a0a 	vldreq	s17, [pc, #40]	@ 80071f4 <neai_anomalydetection_learn+0x242c>
 80071ce:	ed9f 8a0a 	vldreq	s16, [pc, #40]	@ 80071f8 <neai_anomalydetection_learn+0x2430>
 80071d2:	f889 3008 	strb.w	r3, [r9, #8]
 80071d6:	bf18      	it	ne
 80071d8:	eec7 8a88 	vdivne.f32	s17, s15, s16
 80071dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80071e0:	ee28 ba8b 	vmul.f32	s22, s17, s22
 80071e4:	e00a      	b.n	80071fc <neai_anomalydetection_learn+0x2434>
 80071e6:	bf00      	nop
	...
 80071f0:	437f0000 	.word	0x437f0000
 80071f4:	50bdfd64 	.word	0x50bdfd64
 80071f8:	322bcc77 	.word	0x322bcc77
 80071fc:	ee68 eaae 	vmul.f32	s29, s17, s29
 8007200:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8007204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007208:	bfb4      	ite	lt
 800720a:	ee3b ba67 	vsublt.f32	s22, s22, s15
 800720e:	ee3b ba27 	vaddge.f32	s22, s22, s15
 8007212:	ee28 ea8e 	vmul.f32	s28, s17, s28
 8007216:	eefd 7acb 	vcvt.s32.f32	s15, s22
 800721a:	ee68 daad 	vmul.f32	s27, s17, s27
 800721e:	ee17 0a90 	vmov	r0, s15
 8007222:	f7f9 fab1 	bl	8000788 <__aeabi_i2d>
 8007226:	ed9f 1bd8 	vldr	d1, [pc, #864]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 800722a:	ec41 0b10 	vmov	d0, r0, r1
 800722e:	f002 f955 	bl	80094dc <fmax>
 8007232:	ec51 0b10 	vmov	r0, r1, d0
 8007236:	f7f9 fb99 	bl	800096c <__aeabi_d2f>
 800723a:	eddf 0ad5 	vldr	s1, [pc, #852]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 800723e:	ee00 0a10 	vmov	s0, r0
 8007242:	f002 f99f 	bl	8009584 <fminf>
 8007246:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800724a:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007252:	ee17 3a90 	vmov	r3, s15
 8007256:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800725a:	bfb4      	ite	lt
 800725c:	ee7e eae7 	vsublt.f32	s29, s29, s15
 8007260:	ee7e eaa7 	vaddge.f32	s29, s29, s15
 8007264:	9a00      	ldr	r2, [sp, #0]
 8007266:	eefd 7aee 	vcvt.s32.f32	s15, s29
 800726a:	7013      	strb	r3, [r2, #0]
 800726c:	ee17 0a90 	vmov	r0, s15
 8007270:	f7f9 fa8a 	bl	8000788 <__aeabi_i2d>
 8007274:	ed9f 1bc4 	vldr	d1, [pc, #784]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 8007278:	ec41 0b10 	vmov	d0, r0, r1
 800727c:	f002 f92e 	bl	80094dc <fmax>
 8007280:	ec51 0b10 	vmov	r0, r1, d0
 8007284:	f7f9 fb72 	bl	800096c <__aeabi_d2f>
 8007288:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 800728c:	ee00 0a10 	vmov	s0, r0
 8007290:	f002 f978 	bl	8009584 <fminf>
 8007294:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007298:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	ee17 3a90 	vmov	r3, s15
 80072a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80072a8:	bfb4      	ite	lt
 80072aa:	ee3e ea67 	vsublt.f32	s28, s28, s15
 80072ae:	ee3e ea27 	vaddge.f32	s28, s28, s15
 80072b2:	9a00      	ldr	r2, [sp, #0]
 80072b4:	eefd 7ace 	vcvt.s32.f32	s15, s28
 80072b8:	7053      	strb	r3, [r2, #1]
 80072ba:	ee17 0a90 	vmov	r0, s15
 80072be:	f7f9 fa63 	bl	8000788 <__aeabi_i2d>
 80072c2:	ed9f 1bb1 	vldr	d1, [pc, #708]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 80072c6:	ec41 0b10 	vmov	d0, r0, r1
 80072ca:	f002 f907 	bl	80094dc <fmax>
 80072ce:	ec51 0b10 	vmov	r0, r1, d0
 80072d2:	f7f9 fb4b 	bl	800096c <__aeabi_d2f>
 80072d6:	eddf 0aae 	vldr	s1, [pc, #696]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 80072da:	ee00 0a10 	vmov	s0, r0
 80072de:	f002 f951 	bl	8009584 <fminf>
 80072e2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80072e6:	eef5 dac0 	vcmpe.f32	s27, #0.0
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	ee17 3a90 	vmov	r3, s15
 80072f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80072f6:	bfb4      	ite	lt
 80072f8:	ee7d dae7 	vsublt.f32	s27, s27, s15
 80072fc:	ee7d daa7 	vaddge.f32	s27, s27, s15
 8007300:	9a00      	ldr	r2, [sp, #0]
 8007302:	eefd 7aed 	vcvt.s32.f32	s15, s27
 8007306:	7093      	strb	r3, [r2, #2]
 8007308:	ee17 0a90 	vmov	r0, s15
 800730c:	f7f9 fa3c 	bl	8000788 <__aeabi_i2d>
 8007310:	ed9f 1b9d 	vldr	d1, [pc, #628]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 8007314:	ec41 0b10 	vmov	d0, r0, r1
 8007318:	f002 f8e0 	bl	80094dc <fmax>
 800731c:	ec51 0b10 	vmov	r0, r1, d0
 8007320:	f7f9 fb24 	bl	800096c <__aeabi_d2f>
 8007324:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 8007328:	ee00 0a10 	vmov	s0, r0
 800732c:	f002 f92a 	bl	8009584 <fminf>
 8007330:	ee28 da8d 	vmul.f32	s26, s17, s26
 8007334:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007338:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	ee17 3a90 	vmov	r3, s15
 8007344:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007348:	bfb4      	ite	lt
 800734a:	ee3d da67 	vsublt.f32	s26, s26, s15
 800734e:	ee3d da27 	vaddge.f32	s26, s26, s15
 8007352:	9a00      	ldr	r2, [sp, #0]
 8007354:	eefd 7acd 	vcvt.s32.f32	s15, s26
 8007358:	70d3      	strb	r3, [r2, #3]
 800735a:	ee17 0a90 	vmov	r0, s15
 800735e:	f7f9 fa13 	bl	8000788 <__aeabi_i2d>
 8007362:	ed9f 1b89 	vldr	d1, [pc, #548]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 8007366:	ec41 0b10 	vmov	d0, r0, r1
 800736a:	f002 f8b7 	bl	80094dc <fmax>
 800736e:	ec51 0b10 	vmov	r0, r1, d0
 8007372:	f7f9 fafb 	bl	800096c <__aeabi_d2f>
 8007376:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 800737a:	ee00 0a10 	vmov	s0, r0
 800737e:	f002 f901 	bl	8009584 <fminf>
 8007382:	ee68 caac 	vmul.f32	s25, s17, s25
 8007386:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800738a:	eef5 cac0 	vcmpe.f32	s25, #0.0
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	ee17 3a90 	vmov	r3, s15
 8007396:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800739a:	bfb4      	ite	lt
 800739c:	ee7c cae7 	vsublt.f32	s25, s25, s15
 80073a0:	ee7c caa7 	vaddge.f32	s25, s25, s15
 80073a4:	9a00      	ldr	r2, [sp, #0]
 80073a6:	eefd 7aec 	vcvt.s32.f32	s15, s25
 80073aa:	7113      	strb	r3, [r2, #4]
 80073ac:	ee17 0a90 	vmov	r0, s15
 80073b0:	f7f9 f9ea 	bl	8000788 <__aeabi_i2d>
 80073b4:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 80073b8:	ec41 0b10 	vmov	d0, r0, r1
 80073bc:	f002 f88e 	bl	80094dc <fmax>
 80073c0:	ec51 0b10 	vmov	r0, r1, d0
 80073c4:	f7f9 fad2 	bl	800096c <__aeabi_d2f>
 80073c8:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 80073cc:	ee00 0a10 	vmov	s0, r0
 80073d0:	f002 f8d8 	bl	8009584 <fminf>
 80073d4:	ee28 ca8c 	vmul.f32	s24, s17, s24
 80073d8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80073dc:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	ee17 3a90 	vmov	r3, s15
 80073e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80073ec:	bfb4      	ite	lt
 80073ee:	ee3c ca67 	vsublt.f32	s24, s24, s15
 80073f2:	ee3c ca27 	vaddge.f32	s24, s24, s15
 80073f6:	9a00      	ldr	r2, [sp, #0]
 80073f8:	eefd 7acc 	vcvt.s32.f32	s15, s24
 80073fc:	7153      	strb	r3, [r2, #5]
 80073fe:	ee17 0a90 	vmov	r0, s15
 8007402:	f7f9 f9c1 	bl	8000788 <__aeabi_i2d>
 8007406:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 800740a:	ec41 0b10 	vmov	d0, r0, r1
 800740e:	f002 f865 	bl	80094dc <fmax>
 8007412:	ec51 0b10 	vmov	r0, r1, d0
 8007416:	f7f9 faa9 	bl	800096c <__aeabi_d2f>
 800741a:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 800741e:	ee00 0a10 	vmov	s0, r0
 8007422:	f002 f8af 	bl	8009584 <fminf>
 8007426:	eddd 7a03 	vldr	s15, [sp, #12]
 800742a:	9a00      	ldr	r2, [sp, #0]
 800742c:	ee68 baa7 	vmul.f32	s23, s17, s15
 8007430:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007434:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8007438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743c:	ee17 3a90 	vmov	r3, s15
 8007440:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007444:	bfb4      	ite	lt
 8007446:	ee7b bae7 	vsublt.f32	s23, s23, s15
 800744a:	ee7b baa7 	vaddge.f32	s23, s23, s15
 800744e:	7193      	strb	r3, [r2, #6]
 8007450:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8007454:	ee68 8a8f 	vmul.f32	s17, s17, s30
 8007458:	ee17 0a90 	vmov	r0, s15
 800745c:	f7f9 f994 	bl	8000788 <__aeabi_i2d>
 8007460:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 8007464:	ec41 0b10 	vmov	d0, r0, r1
 8007468:	f002 f838 	bl	80094dc <fmax>
 800746c:	ec51 0b10 	vmov	r0, r1, d0
 8007470:	f7f9 fa7c 	bl	800096c <__aeabi_d2f>
 8007474:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 8007478:	ee00 0a10 	vmov	s0, r0
 800747c:	f002 f882 	bl	8009584 <fminf>
 8007480:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007484:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007488:	ee17 3a90 	vmov	r3, s15
 800748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007490:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007494:	bfac      	ite	ge
 8007496:	ee78 8aa7 	vaddge.f32	s17, s17, s15
 800749a:	ee78 8ae7 	vsublt.f32	s17, s17, s15
 800749e:	9a00      	ldr	r2, [sp, #0]
 80074a0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80074a4:	71d3      	strb	r3, [r2, #7]
 80074a6:	ee17 0a90 	vmov	r0, s15
 80074aa:	f7f9 f96d 	bl	8000788 <__aeabi_i2d>
 80074ae:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8007588 <neai_anomalydetection_learn+0x27c0>
 80074b2:	ec41 0b10 	vmov	d0, r0, r1
 80074b6:	f002 f811 	bl	80094dc <fmax>
 80074ba:	ec51 0b10 	vmov	r0, r1, d0
 80074be:	f7f9 fa55 	bl	800096c <__aeabi_d2f>
 80074c2:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8007590 <neai_anomalydetection_learn+0x27c8>
 80074c6:	ee00 0a10 	vmov	s0, r0
 80074ca:	f002 f85b 	bl	8009584 <fminf>
 80074ce:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80074d2:	9900      	ldr	r1, [sp, #0]
 80074d4:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80075a4 <neai_anomalydetection_learn+0x27dc>
 80074d8:	ee17 2a90 	vmov	r2, s15
 80074dc:	eb0b 0308 	add.w	r3, fp, r8
 80074e0:	720a      	strb	r2, [r1, #8]
 80074e2:	00da      	lsls	r2, r3, #3
 80074e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80074e8:	ed83 8a09 	vstr	s16, [r3, #36]	@ 0x24
 80074ec:	58a3      	ldr	r3, [r4, r2]
 80074ee:	4929      	ldr	r1, [pc, #164]	@ (8007594 <neai_anomalydetection_learn+0x27cc>)
 80074f0:	f89c 5000 	ldrb.w	r5, [ip]
 80074f4:	3301      	adds	r3, #1
 80074f6:	50a3      	str	r3, [r4, r2]
 80074f8:	780a      	ldrb	r2, [r1, #0]
 80074fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074fe:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8007502:	4293      	cmp	r3, r2
 8007504:	bf24      	itt	cs
 8007506:	9b01      	ldrcs	r3, [sp, #4]
 8007508:	700b      	strbcs	r3, [r1, #0]
 800750a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800750e:	462a      	mov	r2, r5
 8007510:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	18ee      	adds	r6, r5, r3
 8007518:	469e      	mov	lr, r3
 800751a:	fbb2 f3fe 	udiv	r3, r2, lr
 800751e:	fb0e 2313 	mls	r3, lr, r3, r2
 8007522:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007526:	3201      	adds	r2, #1
 8007528:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 800752c:	4281      	cmp	r1, r0
 800752e:	d802      	bhi.n	8007536 <neai_anomalydetection_learn+0x276e>
 8007530:	b2dd      	uxtb	r5, r3
 8007532:	4608      	mov	r0, r1
 8007534:	2701      	movs	r7, #1
 8007536:	4296      	cmp	r6, r2
 8007538:	dcef      	bgt.n	800751a <neai_anomalydetection_learn+0x2752>
 800753a:	b10f      	cbz	r7, 8007540 <neai_anomalydetection_learn+0x2778>
 800753c:	f88c 5000 	strb.w	r5, [ip]
 8007540:	f10a 33ff 	add.w	r3, sl, #4294967295	@ 0xffffffff
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	f240 8463 	bls.w	8007e12 <neai_anomalydetection_learn+0x304a>
 800754c:	9904      	ldr	r1, [sp, #16]
 800754e:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <neai_anomalydetection_learn+0x27d0>)
 8007550:	600b      	str	r3, [r1, #0]
 8007552:	f3ca 0387 	ubfx	r3, sl, #2, #8
 8007556:	2b01      	cmp	r3, #1
 8007558:	d026      	beq.n	80075a8 <neai_anomalydetection_learn+0x27e0>
 800755a:	4a10      	ldr	r2, [pc, #64]	@ (800759c <neai_anomalydetection_learn+0x27d4>)
 800755c:	604a      	str	r2, [r1, #4]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d022      	beq.n	80075a8 <neai_anomalydetection_learn+0x27e0>
 8007562:	f102 3204 	add.w	r2, r2, #67372036	@ 0x4040404
 8007566:	2b03      	cmp	r3, #3
 8007568:	608a      	str	r2, [r1, #8]
 800756a:	d01d      	beq.n	80075a8 <neai_anomalydetection_learn+0x27e0>
 800756c:	f102 3204 	add.w	r2, r2, #67372036	@ 0x4040404
 8007570:	2b04      	cmp	r3, #4
 8007572:	60ca      	str	r2, [r1, #12]
 8007574:	d018      	beq.n	80075a8 <neai_anomalydetection_learn+0x27e0>
 8007576:	2b05      	cmp	r3, #5
 8007578:	bf1c      	itt	ne
 800757a:	4b09      	ldrne	r3, [pc, #36]	@ (80075a0 <neai_anomalydetection_learn+0x27d8>)
 800757c:	614b      	strne	r3, [r1, #20]
 800757e:	f102 3204 	add.w	r2, r2, #67372036	@ 0x4040404
 8007582:	610a      	str	r2, [r1, #16]
 8007584:	e010      	b.n	80075a8 <neai_anomalydetection_learn+0x27e0>
 8007586:	bf00      	nop
 8007588:	00000000 	.word	0x00000000
 800758c:	3ff00000 	.word	0x3ff00000
 8007590:	437f0000 	.word	0x437f0000
 8007594:	200000bd 	.word	0x200000bd
 8007598:	03020100 	.word	0x03020100
 800759c:	07060504 	.word	0x07060504
 80075a0:	17161514 	.word	0x17161514
 80075a4:	200000bc 	.word	0x200000bc
 80075a8:	f01a 0f03 	tst.w	sl, #3
 80075ac:	d00e      	beq.n	80075cc <neai_anomalydetection_learn+0x2804>
 80075ae:	f00a 03fc 	and.w	r3, sl, #252	@ 0xfc
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	9904      	ldr	r1, [sp, #16]
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	4552      	cmp	r2, sl
 80075ba:	54cb      	strb	r3, [r1, r3]
 80075bc:	d206      	bcs.n	80075cc <neai_anomalydetection_learn+0x2804>
 80075be:	3302      	adds	r3, #2
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	4553      	cmp	r3, sl
 80075c4:	548a      	strb	r2, [r1, r2]
 80075c6:	d201      	bcs.n	80075cc <neai_anomalydetection_learn+0x2804>
 80075c8:	9a04      	ldr	r2, [sp, #16]
 80075ca:	54d3      	strb	r3, [r2, r3]
 80075cc:	f8df c048 	ldr.w	ip, [pc, #72]	@ 8007618 <neai_anomalydetection_learn+0x2850>
 80075d0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80075d4:	4667      	mov	r7, ip
 80075d6:	f10c 0c01 	add.w	ip, ip, #1
 80075da:	4660      	mov	r0, ip
 80075dc:	4673      	mov	r3, lr
 80075de:	783a      	ldrb	r2, [r7, #0]
 80075e0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80075e4:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 80075e8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80075ec:	f854 6036 	ldr.w	r6, [r4, r6, lsl #3]
 80075f0:	f854 5035 	ldr.w	r5, [r4, r5, lsl #3]
 80075f4:	3301      	adds	r3, #1
 80075f6:	42ae      	cmp	r6, r5
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	bf3c      	itt	cc
 80075fc:	7039      	strbcc	r1, [r7, #0]
 80075fe:	f800 2c01 	strbcc.w	r2, [r0, #-1]
 8007602:	4553      	cmp	r3, sl
 8007604:	d3eb      	bcc.n	80075de <neai_anomalydetection_learn+0x2816>
 8007606:	f10e 0e01 	add.w	lr, lr, #1
 800760a:	fa5f fe8e 	uxtb.w	lr, lr
 800760e:	45d6      	cmp	lr, sl
 8007610:	d1e0      	bne.n	80075d4 <neai_anomalydetection_learn+0x280c>
 8007612:	f7fe b9ba 	b.w	800598a <neai_anomalydetection_learn+0xbc2>
 8007616:	bf00      	nop
 8007618:	200004a8 	.word	0x200004a8
 800761c:	00000000 	.word	0x00000000
 8007620:	42c80000 	.word	0x42c80000
 8007624:	5ce3      	ldrb	r3, [r4, r3]
 8007626:	ed1f 6a03 	vldr	s12, [pc, #-12]	@ 800761c <neai_anomalydetection_learn+0x2854>
 800762a:	ee09 3a90 	vmov	s19, r3
 800762e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	f899 3002 	ldrb.w	r3, [r9, #2]
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	f899 3003 	ldrb.w	r3, [r9, #3]
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	f899 3004 	ldrb.w	r3, [r9, #4]
 8007644:	9309      	str	r3, [sp, #36]	@ 0x24
 8007646:	f899 3005 	ldrb.w	r3, [r9, #5]
 800764a:	930a      	str	r3, [sp, #40]	@ 0x28
 800764c:	f899 3006 	ldrb.w	r3, [r9, #6]
 8007650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007652:	f899 3007 	ldrb.w	r3, [r9, #7]
 8007656:	930c      	str	r3, [sp, #48]	@ 0x30
 8007658:	f899 3008 	ldrb.w	r3, [r9, #8]
 800765c:	930e      	str	r3, [sp, #56]	@ 0x38
 800765e:	5ca3      	ldrb	r3, [r4, r2]
 8007660:	eddd 7a03 	vldr	s15, [sp, #12]
 8007664:	ee0e 3a10 	vmov	s28, r3
 8007668:	9b00      	ldr	r3, [sp, #0]
 800766a:	eef8 dae7 	vcvt.f32.s32	s27, s15
 800766e:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 8007672:	785a      	ldrb	r2, [r3, #1]
 8007674:	920d      	str	r2, [sp, #52]	@ 0x34
 8007676:	eeb8 eace 	vcvt.f32.s32	s28, s28
 800767a:	789a      	ldrb	r2, [r3, #2]
 800767c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800767e:	ee69 9a89 	vmul.f32	s19, s19, s18
 8007682:	ee6d da89 	vmul.f32	s27, s27, s18
 8007686:	78da      	ldrb	r2, [r3, #3]
 8007688:	9210      	str	r2, [sp, #64]	@ 0x40
 800768a:	ee79 9a88 	vadd.f32	s19, s19, s16
 800768e:	ee7d da88 	vadd.f32	s27, s27, s16
 8007692:	791a      	ldrb	r2, [r3, #4]
 8007694:	9211      	str	r2, [sp, #68]	@ 0x44
 8007696:	ee2e ea28 	vmul.f32	s28, s28, s17
 800769a:	795a      	ldrb	r2, [r3, #5]
 800769c:	edc5 9a00 	vstr	s19, [r5]
 80076a0:	edc5 da01 	vstr	s27, [r5, #4]
 80076a4:	ed87 ea00 	vstr	s28, [r7]
 80076a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80076aa:	eddd 7a07 	vldr	s15, [sp, #28]
 80076ae:	799a      	ldrb	r2, [r3, #6]
 80076b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80076b2:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 80076b6:	eddd 7a08 	vldr	s15, [sp, #32]
 80076ba:	eef8 cae7 	vcvt.f32.s32	s25, s15
 80076be:	eddd 7a09 	vldr	s15, [sp, #36]	@ 0x24
 80076c2:	eeb8 cae7 	vcvt.f32.s32	s24, s15
 80076c6:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80076ca:	eef8 bae7 	vcvt.f32.s32	s23, s15
 80076ce:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80076d2:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 80076d6:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80076da:	eef8 aae7 	vcvt.f32.s32	s21, s15
 80076de:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80076e2:	eeb8 aae7 	vcvt.f32.s32	s20, s15
 80076e6:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80076ea:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 80076ee:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80076f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f6:	ee2d da09 	vmul.f32	s26, s26, s18
 80076fa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80076fe:	ee6c ca89 	vmul.f32	s25, s25, s18
 8007702:	edcd 7a19 	vstr	s15, [sp, #100]	@ 0x64
 8007706:	edc7 7a02 	vstr	s15, [r7, #8]
 800770a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 800770e:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8007712:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 8007716:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 800771a:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 800771e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007722:	ee2c ca09 	vmul.f32	s24, s24, s18
 8007726:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800772a:	ee6b ba89 	vmul.f32	s23, s23, s18
 800772e:	edcd 7a17 	vstr	s15, [sp, #92]	@ 0x5c
 8007732:	edc7 7a05 	vstr	s15, [r7, #20]
 8007736:	ee07 2a90 	vmov	s15, r2
 800773a:	ee2b ba09 	vmul.f32	s22, s22, s18
 800773e:	ee6a aa89 	vmul.f32	s21, s21, s18
 8007742:	ee2a aa09 	vmul.f32	s20, s20, s18
 8007746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800774a:	ee3d da08 	vadd.f32	s26, s26, s16
 800774e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8007752:	ee3c ca08 	vadd.f32	s24, s24, s16
 8007756:	ee7b ba88 	vadd.f32	s23, s23, s16
 800775a:	ee3b ba08 	vadd.f32	s22, s22, s16
 800775e:	ee7a aa88 	vadd.f32	s21, s21, s16
 8007762:	ee3a aa08 	vadd.f32	s20, s20, s16
 8007766:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800776a:	ee22 2a28 	vmul.f32	s4, s4, s17
 800776e:	ee21 1a28 	vmul.f32	s2, s2, s17
 8007772:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8007776:	79da      	ldrb	r2, [r3, #7]
 8007778:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 800777c:	edc7 7a06 	vstr	s15, [r7, #24]
 8007780:	ed85 da02 	vstr	s26, [r5, #8]
 8007784:	edc5 ca03 	vstr	s25, [r5, #12]
 8007788:	ed85 ca04 	vstr	s24, [r5, #16]
 800778c:	edc5 ba05 	vstr	s23, [r5, #20]
 8007790:	ed85 ba06 	vstr	s22, [r5, #24]
 8007794:	edc5 aa07 	vstr	s21, [r5, #28]
 8007798:	ed85 aa08 	vstr	s20, [r5, #32]
 800779c:	ed87 2a01 	vstr	s4, [r7, #4]
 80077a0:	ed87 1a03 	vstr	s2, [r7, #12]
 80077a4:	edc7 1a04 	vstr	s3, [r7, #16]
 80077a8:	9214      	str	r2, [sp, #80]	@ 0x50
 80077aa:	edd6 3a00 	vldr	s7, [r6]
 80077ae:	ed96 4a01 	vldr	s8, [r6, #4]
 80077b2:	edd6 4a02 	vldr	s9, [r6, #8]
 80077b6:	ed96 5a03 	vldr	s10, [r6, #12]
 80077ba:	edd6 fa06 	vldr	s31, [r6, #24]
 80077be:	ed96 fa07 	vldr	s30, [r6, #28]
 80077c2:	edd6 ea08 	vldr	s29, [r6, #32]
 80077c6:	7a1b      	ldrb	r3, [r3, #8]
 80077c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80077ca:	ee63 5aa3 	vmul.f32	s11, s7, s7
 80077ce:	ee69 6aa9 	vmul.f32	s13, s19, s19
 80077d2:	ee75 5a86 	vadd.f32	s11, s11, s12
 80077d6:	ee64 2a04 	vmul.f32	s5, s8, s8
 80077da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80077de:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80077e2:	ee6d 5aad 	vmul.f32	s11, s27, s27
 80077e6:	ee24 3aa4 	vmul.f32	s6, s9, s9
 80077ea:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80077ee:	ee63 6aa9 	vmul.f32	s13, s7, s19
 80077f2:	ee33 3a22 	vadd.f32	s6, s6, s5
 80077f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80077fa:	ee64 2a2d 	vmul.f32	s5, s8, s27
 80077fe:	ee73 7a86 	vadd.f32	s15, s7, s12
 8007802:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007806:	ee39 7a86 	vadd.f32	s14, s19, s12
 800780a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800780e:	ee2d 6a0d 	vmul.f32	s12, s26, s26
 8007812:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007816:	ee36 6a25 	vadd.f32	s12, s12, s11
 800781a:	ee24 3a8d 	vmul.f32	s6, s9, s26
 800781e:	edd6 5a04 	vldr	s11, [r6, #16]
 8007822:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007826:	ee6c 0aac 	vmul.f32	s1, s25, s25
 800782a:	ee65 2aa5 	vmul.f32	s5, s11, s11
 800782e:	ee70 0a86 	vadd.f32	s1, s1, s12
 8007832:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007836:	ee6c 6a0c 	vmul.f32	s13, s24, s24
 800783a:	ed96 6a05 	vldr	s12, [r6, #20]
 800783e:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8007842:	ee65 0a2c 	vmul.f32	s1, s10, s25
 8007846:	ee77 7a84 	vadd.f32	s15, s15, s8
 800784a:	ee70 0a83 	vadd.f32	s1, s1, s6
 800784e:	ee26 3a06 	vmul.f32	s6, s12, s12
 8007852:	ee37 7a2d 	vadd.f32	s14, s14, s27
 8007856:	ee33 3a22 	vadd.f32	s6, s6, s5
 800785a:	ee6b 2aab 	vmul.f32	s5, s23, s23
 800785e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8007862:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007866:	ee65 6a8c 	vmul.f32	s13, s11, s24
 800786a:	ee37 7a0d 	vadd.f32	s14, s14, s26
 800786e:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8007872:	ee6f 0aaf 	vmul.f32	s1, s31, s31
 8007876:	ee37 7a2c 	vadd.f32	s14, s14, s25
 800787a:	ee70 0a83 	vadd.f32	s1, s1, s6
 800787e:	ee2b 3a0b 	vmul.f32	s6, s22, s22
 8007882:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007886:	ee33 3a22 	vadd.f32	s6, s6, s5
 800788a:	ee66 2a2b 	vmul.f32	s5, s12, s23
 800788e:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8007892:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007896:	ee6f 6a0f 	vmul.f32	s13, s30, s30
 800789a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800789e:	ee76 6aa0 	vadd.f32	s13, s13, s1
 80078a2:	ee6a 0aaa 	vmul.f32	s1, s21, s21
 80078a6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 80078aa:	ee70 0a83 	vadd.f32	s1, s1, s6
 80078ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80078b2:	ee2f 3a8b 	vmul.f32	s6, s31, s22
 80078b6:	ee37 7a0b 	vadd.f32	s14, s14, s22
 80078ba:	ee33 3a22 	vadd.f32	s6, s6, s5
 80078be:	ee77 7aaf 	vadd.f32	s15, s15, s31
 80078c2:	ee6e 2aae 	vmul.f32	s5, s29, s29
 80078c6:	ee2f 0a2a 	vmul.f32	s0, s30, s21
 80078ca:	ee72 2aa6 	vadd.f32	s5, s5, s13
 80078ce:	ee30 0a03 	vadd.f32	s0, s0, s6
 80078d2:	ee37 7a2a 	vadd.f32	s14, s14, s21
 80078d6:	ee77 7a8f 	vadd.f32	s15, s15, s30
 80078da:	ee6a 6a0a 	vmul.f32	s13, s20, s20
 80078de:	ee2a 3a2e 	vmul.f32	s6, s20, s29
 80078e2:	ee3a 7a07 	vadd.f32	s14, s20, s14
 80078e6:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80078ea:	ee76 6aa0 	vadd.f32	s13, s13, s1
 80078ee:	ee33 3a00 	vadd.f32	s6, s6, s0
 80078f2:	eef2 0a02 	vmov.f32	s1, #34	@ 0x41100000  9.0
 80078f6:	ee62 2aa0 	vmul.f32	s5, s5, s1
 80078fa:	ee66 6aa0 	vmul.f32	s13, s13, s1
 80078fe:	ee23 3a20 	vmul.f32	s6, s6, s1
 8007902:	ee67 0aa7 	vmul.f32	s1, s15, s15
 8007906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800790a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800790e:	ee72 0ae0 	vsub.f32	s1, s5, s1
 8007912:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007916:	ee07 2a10 	vmov	s14, r2
 800791a:	ee20 0aa6 	vmul.f32	s0, s1, s13
 800791e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007922:	ee07 3a10 	vmov	s14, r3
 8007926:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800792a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800792e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8007932:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793a:	ee73 7a67 	vsub.f32	s15, s6, s15
 800793e:	edc7 6a07 	vstr	s13, [r7, #28]
 8007942:	ed87 7a08 	vstr	s14, [r7, #32]
 8007946:	f100 8339 	bmi.w	8007fbc <neai_anomalydetection_learn+0x31f4>
 800794a:	eeb1 3ac0 	vsqrt.f32	s6, s0
 800794e:	eec7 2a83 	vdiv.f32	s5, s15, s6
 8007952:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007956:	eef4 2ae7 	vcmpe.f32	s5, s15
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	d84e      	bhi.n	80079fe <neai_anomalydetection_learn+0x2c36>
 8007960:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8007964:	eef4 2ae7 	vcmpe.f32	s5, s15
 8007968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796c:	db47      	blt.n	80079fe <neai_anomalydetection_learn+0x2c36>
 800796e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8007972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007976:	d04d      	beq.n	8007a14 <neai_anomalydetection_learn+0x2c4c>
 8007978:	ee73 3ae9 	vsub.f32	s7, s7, s19
 800797c:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	f100 81f2 	bmi.w	8007d6c <neai_anomalydetection_learn+0x2fa4>
 8007988:	eec3 7a8e 	vdiv.f32	s15, s7, s28
 800798c:	ed1f 3add 	vldr	s6, [pc, #-884]	@ 800761c <neai_anomalydetection_learn+0x2854>
 8007990:	eef4 7ac3 	vcmpe.f32	s15, s6
 8007994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007998:	f300 836e 	bgt.w	8008078 <neai_anomalydetection_learn+0x32b0>
 800799c:	eeb5 2a40 	vcmp.f32	s4, #0.0
 80079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a4:	ee77 3a83 	vadd.f32	s7, s15, s6
 80079a8:	f040 81dd 	bne.w	8007d66 <neai_anomalydetection_learn+0x2f9e>
 80079ac:	ed1f 4ae4 	vldr	s8, [pc, #-912]	@ 8007620 <neai_anomalydetection_learn+0x2858>
 80079b0:	ee74 7a63 	vsub.f32	s15, s8, s7
 80079b4:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 80079b8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80079bc:	ee77 3aa3 	vadd.f32	s7, s15, s7
 80079c0:	eddd 7a19 	vldr	s15, [sp, #100]	@ 0x64
 80079c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079cc:	eef0 7a44 	vmov.f32	s15, s8
 80079d0:	d044      	beq.n	8007a5c <neai_anomalydetection_learn+0x2c94>
 80079d2:	ee74 4acd 	vsub.f32	s9, s9, s26
 80079d6:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80079da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079de:	d501      	bpl.n	80079e4 <neai_anomalydetection_learn+0x2c1c>
 80079e0:	eef1 4a64 	vneg.f32	s9, s9
 80079e4:	ed9d 4a19 	vldr	s8, [sp, #100]	@ 0x64
 80079e8:	ee84 4a84 	vdiv.f32	s8, s9, s8
 80079ec:	e02f      	b.n	8007a4e <neai_anomalydetection_learn+0x2c86>
 80079ee:	eef1 7a46 	vneg.f32	s15, s12
 80079f2:	f7fd bcca 	b.w	800538a <neai_anomalydetection_learn+0x5c2>
 80079f6:	eef1 6a47 	vneg.f32	s13, s14
 80079fa:	f7fd bcaa 	b.w	8005352 <neai_anomalydetection_learn+0x58a>
 80079fe:	eddf 2ae8 	vldr	s5, [pc, #928]	@ 8007da0 <neai_anomalydetection_learn+0x2fd8>
 8007a02:	e7b4      	b.n	800796e <neai_anomalydetection_learn+0x2ba6>
 8007a04:	eef1 7a68 	vneg.f32	s15, s17
 8007a08:	f7fe bad1 	b.w	8005fae <neai_anomalydetection_learn+0x11e6>
 8007a0c:	eef1 0a40 	vneg.f32	s1, s0
 8007a10:	f7fe bab3 	b.w	8005f7a <neai_anomalydetection_learn+0x11b2>
 8007a14:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	f040 818c 	bne.w	8007d38 <neai_anomalydetection_learn+0x2f70>
 8007a20:	ed9f 3ae0 	vldr	s6, [pc, #896]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007a24:	eef0 3a43 	vmov.f32	s7, s6
 8007a28:	eef0 7a43 	vmov.f32	s15, s6
 8007a2c:	ee33 3a63 	vsub.f32	s6, s6, s7
 8007a30:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8007a34:	ee23 3a04 	vmul.f32	s6, s6, s8
 8007a38:	ed9d 4a19 	vldr	s8, [sp, #100]	@ 0x64
 8007a3c:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8007a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a44:	ee73 3a23 	vadd.f32	s7, s6, s7
 8007a48:	d1c3      	bne.n	80079d2 <neai_anomalydetection_learn+0x2c0a>
 8007a4a:	ed9f 4ad6 	vldr	s8, [pc, #856]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007a4e:	eeb4 4a67 	vcmp.f32	s8, s15
 8007a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a56:	bfc8      	it	gt
 8007a58:	eef0 7a44 	vmovgt.f32	s15, s8
 8007a5c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8007a60:	eeb0 3a08 	vmov.f32	s6, #8	@ 0x40400000  3.0
 8007a64:	eec4 4a03 	vdiv.f32	s9, s8, s6
 8007a68:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8007a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a70:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007a74:	f000 8180 	beq.w	8007d78 <neai_anomalydetection_learn+0x2fb0>
 8007a78:	ee35 5a6c 	vsub.f32	s10, s10, s25
 8007a7c:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8007a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a84:	d501      	bpl.n	8007a8a <neai_anomalydetection_learn+0x2cc2>
 8007a86:	eeb1 5a45 	vneg.f32	s10, s10
 8007a8a:	ee85 4a01 	vdiv.f32	s8, s10, s2
 8007a8e:	eef4 7a44 	vcmp.f32	s15, s8
 8007a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a96:	bf48      	it	mi
 8007a98:	eef0 7a44 	vmovmi.f32	s15, s8
 8007a9c:	ee34 4a64 	vsub.f32	s8, s8, s9
 8007aa0:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8007aa4:	ee24 4a05 	vmul.f32	s8, s8, s10
 8007aa8:	eef5 1a40 	vcmp.f32	s3, #0.0
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	ee34 4a24 	vadd.f32	s8, s8, s9
 8007ab4:	f000 8194 	beq.w	8007de0 <neai_anomalydetection_learn+0x3018>
 8007ab8:	ee75 5acc 	vsub.f32	s11, s11, s24
 8007abc:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8007ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac4:	d501      	bpl.n	8007aca <neai_anomalydetection_learn+0x2d02>
 8007ac6:	eef1 5a65 	vneg.f32	s11, s11
 8007aca:	ee85 5aa1 	vdiv.f32	s10, s11, s3
 8007ace:	eef4 7a45 	vcmp.f32	s15, s10
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	bf48      	it	mi
 8007ad8:	eef0 7a45 	vmovmi.f32	s15, s10
 8007adc:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007ae0:	eef1 4a04 	vmov.f32	s9, #20	@ 0x40a00000  5.0
 8007ae4:	eec5 5a24 	vdiv.f32	s11, s10, s9
 8007ae8:	ed9d 5a17 	vldr	s10, [sp, #92]	@ 0x5c
 8007aec:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8007af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af4:	ee75 5a84 	vadd.f32	s11, s11, s8
 8007af8:	f000 816f 	beq.w	8007dda <neai_anomalydetection_learn+0x3012>
 8007afc:	ee36 6a6b 	vsub.f32	s12, s12, s23
 8007b00:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8007b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b08:	d501      	bpl.n	8007b0e <neai_anomalydetection_learn+0x2d46>
 8007b0a:	eeb1 6a46 	vneg.f32	s12, s12
 8007b0e:	ed9d 5a17 	vldr	s10, [sp, #92]	@ 0x5c
 8007b12:	ee86 5a05 	vdiv.f32	s10, s12, s10
 8007b16:	eef4 7a45 	vcmp.f32	s15, s10
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	bf48      	it	mi
 8007b20:	eef0 7a45 	vmovmi.f32	s15, s10
 8007b24:	ee35 5a65 	vsub.f32	s10, s10, s11
 8007b28:	eef1 4a08 	vmov.f32	s9, #24	@ 0x40c00000  6.0
 8007b2c:	ee85 6a24 	vdiv.f32	s12, s10, s9
 8007b30:	ee36 6a25 	vadd.f32	s12, s12, s11
 8007b34:	eddd 5a18 	vldr	s11, [sp, #96]	@ 0x60
 8007b38:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	f000 8148 	beq.w	8007dd4 <neai_anomalydetection_learn+0x300c>
 8007b44:	ee7f facb 	vsub.f32	s31, s31, s22
 8007b48:	eef5 fac0 	vcmpe.f32	s31, #0.0
 8007b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b50:	d501      	bpl.n	8007b56 <neai_anomalydetection_learn+0x2d8e>
 8007b52:	eef1 fa6f 	vneg.f32	s31, s31
 8007b56:	eddd 5a18 	vldr	s11, [sp, #96]	@ 0x60
 8007b5a:	eecf 5aa5 	vdiv.f32	s11, s31, s11
 8007b5e:	eef4 7a65 	vcmp.f32	s15, s11
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	bf48      	it	mi
 8007b68:	eef0 7a65 	vmovmi.f32	s15, s11
 8007b6c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8007b70:	eef1 4a0c 	vmov.f32	s9, #28	@ 0x40e00000  7.0
 8007b74:	ee85 5aa4 	vdiv.f32	s10, s11, s9
 8007b78:	eef5 6a40 	vcmp.f32	s13, #0.0
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	ee75 5a06 	vadd.f32	s11, s10, s12
 8007b84:	f000 80fb 	beq.w	8007d7e <neai_anomalydetection_learn+0x2fb6>
 8007b88:	ee3f fa6a 	vsub.f32	s30, s30, s21
 8007b8c:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	d501      	bpl.n	8007b9a <neai_anomalydetection_learn+0x2dd2>
 8007b96:	eeb1 fa4f 	vneg.f32	s30, s30
 8007b9a:	ee8f 6a26 	vdiv.f32	s12, s30, s13
 8007b9e:	eef4 7a46 	vcmp.f32	s15, s12
 8007ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba6:	ee76 6a65 	vsub.f32	s13, s12, s11
 8007baa:	bf48      	it	mi
 8007bac:	eef0 7a46 	vmovmi.f32	s15, s12
 8007bb0:	eeb4 6a00 	vmov.f32	s12, #64	@ 0x3e000000  0.125
 8007bb4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007bb8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007bc4:	f000 80d5 	beq.w	8007d72 <neai_anomalydetection_learn+0x2faa>
 8007bc8:	ee7e eaca 	vsub.f32	s29, s29, s20
 8007bcc:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd4:	bf48      	it	mi
 8007bd6:	eef1 ea6e 	vnegmi.f32	s29, s29
 8007bda:	ee8e 6a87 	vdiv.f32	s12, s29, s14
 8007bde:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 8007dcc <neai_anomalydetection_learn+0x3004>
 8007be2:	4871      	ldr	r0, [pc, #452]	@ (8007da8 <neai_anomalydetection_learn+0x2fe0>)
 8007be4:	f8dc 3000 	ldr.w	r3, [ip]
 8007be8:	4970      	ldr	r1, [pc, #448]	@ (8007dac <neai_anomalydetection_learn+0x2fe4>)
 8007bea:	4a71      	ldr	r2, [pc, #452]	@ (8007db0 <neai_anomalydetection_learn+0x2fe8>)
 8007bec:	3301      	adds	r3, #1
 8007bee:	f8cc 3000 	str.w	r3, [ip]
 8007bf2:	eeb4 6a67 	vcmp.f32	s12, s15
 8007bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfa:	bfc8      	it	gt
 8007bfc:	eef0 7a46 	vmovgt.f32	s15, s12
 8007c00:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007c04:	eef2 5a02 	vmov.f32	s11, #34	@ 0x41100000  9.0
 8007c08:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8007c0c:	ee06 3a10 	vmov	s12, r3
 8007c10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007c14:	edd0 6a00 	vldr	s13, [r0]
 8007c18:	ed91 5a00 	vldr	s10, [r1]
 8007c1c:	edd2 5a00 	vldr	s11, [r2]
 8007c20:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8007c24:	ee72 2ae6 	vsub.f32	s5, s5, s13
 8007c28:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007c2c:	eec2 9a86 	vdiv.f32	s19, s5, s12
 8007c30:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007c34:	ee87 aa86 	vdiv.f32	s20, s15, s12
 8007c38:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8007c3c:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8007c40:	ee3a aa25 	vadd.f32	s20, s20, s11
 8007c44:	ee76 7a85 	vadd.f32	s15, s13, s10
 8007c48:	edc0 9a00 	vstr	s19, [r0]
 8007c4c:	edc1 7a00 	vstr	s15, [r1]
 8007c50:	ed82 aa00 	vstr	s20, [r2]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f43e add1 	beq.w	80067fc <neai_anomalydetection_learn+0x1a34>
 8007c5a:	4b56      	ldr	r3, [pc, #344]	@ (8007db4 <neai_anomalydetection_learn+0x2fec>)
 8007c5c:	edd3 aa00 	vldr	s21, [r3]
 8007c60:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8007c64:	ee17 0a90 	vmov	r0, s15
 8007c68:	f7f8 fda0 	bl	80007ac <__aeabi_f2d>
 8007c6c:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8007d88 <neai_anomalydetection_learn+0x2fc0>
 8007c70:	ec41 0b10 	vmov	d0, r0, r1
 8007c74:	f001 fc32 	bl	80094dc <fmax>
 8007c78:	ec51 0b10 	vmov	r0, r1, d0
 8007c7c:	f7f8 fe76 	bl	800096c <__aeabi_d2f>
 8007c80:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8007c84:	ee00 0a10 	vmov	s0, r0
 8007c88:	f001 fc7c 	bl	8009584 <fminf>
 8007c8c:	ee6a 7a2a 	vmul.f32	s15, s20, s21
 8007c90:	4b49      	ldr	r3, [pc, #292]	@ (8007db8 <neai_anomalydetection_learn+0x2ff0>)
 8007c92:	ee17 0a90 	vmov	r0, s15
 8007c96:	ed83 0a00 	vstr	s0, [r3]
 8007c9a:	f7f8 fd87 	bl	80007ac <__aeabi_f2d>
 8007c9e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8007d90 <neai_anomalydetection_learn+0x2fc8>
 8007ca2:	ec41 0b10 	vmov	d0, r0, r1
 8007ca6:	f001 fc19 	bl	80094dc <fmax>
 8007caa:	ec51 0b10 	vmov	r0, r1, d0
 8007cae:	f7f8 fe5d 	bl	800096c <__aeabi_d2f>
 8007cb2:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8007dbc <neai_anomalydetection_learn+0x2ff4>
 8007cb6:	ee00 0a10 	vmov	s0, r0
 8007cba:	f001 fc63 	bl	8009584 <fminf>
 8007cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cc2:	ee79 7ac7 	vsub.f32	s15, s19, s14
 8007cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc0 <neai_anomalydetection_learn+0x2ff8>)
 8007cc8:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8007ccc:	ed83 0a00 	vstr	s0, [r3]
 8007cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cd4:	ee17 0a90 	vmov	r0, s15
 8007cd8:	f7f8 fd68 	bl	80007ac <__aeabi_f2d>
 8007cdc:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8007d98 <neai_anomalydetection_learn+0x2fd0>
 8007ce0:	ec41 0b10 	vmov	d0, r0, r1
 8007ce4:	f001 fbfa 	bl	80094dc <fmax>
 8007ce8:	ec51 0b10 	vmov	r0, r1, d0
 8007cec:	f7f8 fe3e 	bl	800096c <__aeabi_d2f>
 8007cf0:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8007dc4 <neai_anomalydetection_learn+0x2ffc>
 8007cf4:	ee00 0a10 	vmov	s0, r0
 8007cf8:	f001 fc44 	bl	8009584 <fminf>
 8007cfc:	4b32      	ldr	r3, [pc, #200]	@ (8007dc8 <neai_anomalydetection_learn+0x3000>)
 8007cfe:	ed83 0a00 	vstr	s0, [r3]
 8007d02:	f7fe bd7b 	b.w	80067fc <neai_anomalydetection_learn+0x1a34>
 8007d06:	f10a 0c04 	add.w	ip, sl, #4
 8007d0a:	f10a 0e18 	add.w	lr, sl, #24
 8007d0e:	2300      	movs	r3, #0
 8007d10:	eb04 010c 	add.w	r1, r4, ip
 8007d14:	eb04 020e 	add.w	r2, r4, lr
 8007d18:	6103      	str	r3, [r0, #16]
 8007d1a:	6143      	str	r3, [r0, #20]
 8007d1c:	6243      	str	r3, [r0, #36]	@ 0x24
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f844 300a 	str.w	r3, [r4, sl]
 8007d24:	f844 300c 	str.w	r3, [r4, ip]
 8007d28:	604b      	str	r3, [r1, #4]
 8007d2a:	720b      	strb	r3, [r1, #8]
 8007d2c:	f844 300e 	str.w	r3, [r4, lr]
 8007d30:	6053      	str	r3, [r2, #4]
 8007d32:	7213      	strb	r3, [r2, #8]
 8007d34:	f7fe b995 	b.w	8006062 <neai_anomalydetection_learn+0x129a>
 8007d38:	eddf 3a1a 	vldr	s7, [pc, #104]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007d3c:	eef0 7a63 	vmov.f32	s15, s7
 8007d40:	ee34 4a6d 	vsub.f32	s8, s8, s27
 8007d44:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 8007d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4c:	d501      	bpl.n	8007d52 <neai_anomalydetection_learn+0x2f8a>
 8007d4e:	eeb1 4a44 	vneg.f32	s8, s8
 8007d52:	ee84 3a02 	vdiv.f32	s6, s8, s4
 8007d56:	eeb4 3a67 	vcmp.f32	s6, s15
 8007d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5e:	bfc8      	it	gt
 8007d60:	eef0 7a43 	vmovgt.f32	s15, s6
 8007d64:	e662      	b.n	8007a2c <neai_anomalydetection_learn+0x2c64>
 8007d66:	eef0 7a43 	vmov.f32	s15, s6
 8007d6a:	e7e9      	b.n	8007d40 <neai_anomalydetection_learn+0x2f78>
 8007d6c:	eef1 3a63 	vneg.f32	s7, s7
 8007d70:	e60a      	b.n	8007988 <neai_anomalydetection_learn+0x2bc0>
 8007d72:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007d76:	e732      	b.n	8007bde <neai_anomalydetection_learn+0x2e16>
 8007d78:	ed9f 4a0a 	vldr	s8, [pc, #40]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007d7c:	e687      	b.n	8007a8e <neai_anomalydetection_learn+0x2cc6>
 8007d7e:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8007da4 <neai_anomalydetection_learn+0x2fdc>
 8007d82:	e70c      	b.n	8007b9e <neai_anomalydetection_learn+0x2dd6>
 8007d84:	f3af 8000 	nop.w
 8007d88:	40000000 	.word	0x40000000
 8007d8c:	3ff33333 	.word	0x3ff33333
 8007d90:	c0000000 	.word	0xc0000000
 8007d94:	400ccccc 	.word	0x400ccccc
 8007d98:	00000000 	.word	0x00000000
 8007d9c:	3fe00000 	.word	0x3fe00000
 8007da0:	00000000 	.word	0x00000000
 8007da4:	42c80000 	.word	0x42c80000
 8007da8:	20000090 	.word	0x20000090
 8007dac:	20000098 	.word	0x20000098
 8007db0:	20000094 	.word	0x20000094
 8007db4:	200000ac 	.word	0x200000ac
 8007db8:	200000b8 	.word	0x200000b8
 8007dbc:	42480000 	.word	0x42480000
 8007dc0:	200000b4 	.word	0x200000b4
 8007dc4:	3f7ae148 	.word	0x3f7ae148
 8007dc8:	200000b0 	.word	0x200000b0
 8007dcc:	2000009c 	.word	0x2000009c
 8007dd0:	42c80000 	.word	0x42c80000
 8007dd4:	ed5f 5a02 	vldr	s11, [pc, #-8]	@ 8007dd0 <neai_anomalydetection_learn+0x3008>
 8007dd8:	e6c1      	b.n	8007b5e <neai_anomalydetection_learn+0x2d96>
 8007dda:	ed1f 5a03 	vldr	s10, [pc, #-12]	@ 8007dd0 <neai_anomalydetection_learn+0x3008>
 8007dde:	e69a      	b.n	8007b16 <neai_anomalydetection_learn+0x2d4e>
 8007de0:	ed1f 5a05 	vldr	s10, [pc, #-20]	@ 8007dd0 <neai_anomalydetection_learn+0x3008>
 8007de4:	e673      	b.n	8007ace <neai_anomalydetection_learn+0x2d06>
 8007de6:	4619      	mov	r1, r3
 8007de8:	b20b      	sxth	r3, r1
 8007dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007dee:	f101 0a01 	add.w	sl, r1, #1
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	fa5f fa8a 	uxtb.w	sl, sl
 8007df8:	f88b a000 	strb.w	sl, [fp]
 8007dfc:	f103 0218 	add.w	r2, r3, #24
 8007e00:	4fc1      	ldr	r7, [pc, #772]	@ (8008108 <neai_anomalydetection_learn+0x3340>)
 8007e02:	f8cd a018 	str.w	sl, [sp, #24]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4688      	mov	r8, r1
 8007e0a:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 8007e0e:	f7fe bcb1 	b.w	8006774 <neai_anomalydetection_learn+0x19ac>
 8007e12:	9a04      	ldr	r2, [sp, #16]
 8007e14:	2300      	movs	r3, #0
 8007e16:	f1ba 0f01 	cmp.w	sl, #1
 8007e1a:	7013      	strb	r3, [r2, #0]
 8007e1c:	f43d adb5 	beq.w	800598a <neai_anomalydetection_learn+0xbc2>
 8007e20:	2301      	movs	r3, #1
 8007e22:	f1ba 0f03 	cmp.w	sl, #3
 8007e26:	7053      	strb	r3, [r2, #1]
 8007e28:	f47f abd0 	bne.w	80075cc <neai_anomalydetection_learn+0x2804>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f7ff bbcb 	b.w	80075c8 <neai_anomalydetection_learn+0x2800>
 8007e32:	4bb6      	ldr	r3, [pc, #728]	@ (800810c <neai_anomalydetection_learn+0x3344>)
 8007e34:	f893 9000 	ldrb.w	r9, [r3]
 8007e38:	eb09 0289 	add.w	r2, r9, r9, lsl #2
 8007e3c:	00d6      	lsls	r6, r2, #3
 8007e3e:	46c8      	mov	r8, r9
 8007e40:	59a3      	ldr	r3, [r4, r6]
 8007e42:	2b32      	cmp	r3, #50	@ 0x32
 8007e44:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8007e48:	f63d ad9f 	bhi.w	800598a <neai_anomalydetection_learn+0xbc2>
 8007e4c:	fa0f f389 	sxth.w	r3, r9
 8007e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	2100      	movs	r1, #0
 8007e58:	1d1f      	adds	r7, r3, #4
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	6111      	str	r1, [r2, #16]
 8007e5e:	6151      	str	r1, [r2, #20]
 8007e60:	6251      	str	r1, [r2, #36]	@ 0x24
 8007e62:	19e0      	adds	r0, r4, r7
 8007e64:	18e1      	adds	r1, r4, r3
 8007e66:	2200      	movs	r2, #0
 8007e68:	51a2      	str	r2, [r4, r6]
 8007e6a:	51e2      	str	r2, [r4, r7]
 8007e6c:	6042      	str	r2, [r0, #4]
 8007e6e:	7202      	strb	r2, [r0, #8]
 8007e70:	50e2      	str	r2, [r4, r3]
 8007e72:	604a      	str	r2, [r1, #4]
 8007e74:	720a      	strb	r2, [r1, #8]
 8007e76:	f7fd bd84 	b.w	8005982 <neai_anomalydetection_learn+0xbba>
 8007e7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e7c:	ed8d 2a11 	vstr	s4, [sp, #68]	@ 0x44
 8007e80:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8007e84:	ed8d 5a0f 	vstr	s10, [sp, #60]	@ 0x3c
 8007e88:	edcd 5a0e 	vstr	s11, [sp, #56]	@ 0x38
 8007e8c:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8007e90:	edcd 6a0c 	vstr	s13, [sp, #48]	@ 0x30
 8007e94:	ed8d 7a0b 	vstr	s14, [sp, #44]	@ 0x2c
 8007e98:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8007e9c:	ed8d 4a09 	vstr	s8, [sp, #36]	@ 0x24
 8007ea0:	edcd 1a08 	vstr	s3, [sp, #32]
 8007ea4:	ed8d 3a07 	vstr	s6, [sp, #28]
 8007ea8:	edcd 2a03 	vstr	s5, [sp, #12]
 8007eac:	edcd 7a00 	vstr	s15, [sp]
 8007eb0:	f001 faf6 	bl	80094a0 <sqrtf>
 8007eb4:	eddd 7a00 	vldr	s15, [sp]
 8007eb8:	eddd 2a03 	vldr	s5, [sp, #12]
 8007ebc:	ed9d 3a07 	vldr	s6, [sp, #28]
 8007ec0:	eddd 1a08 	vldr	s3, [sp, #32]
 8007ec4:	ed9d 4a09 	vldr	s8, [sp, #36]	@ 0x24
 8007ec8:	eddd 3a0a 	vldr	s7, [sp, #40]	@ 0x28
 8007ecc:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8007ed0:	eddd 6a0c 	vldr	s13, [sp, #48]	@ 0x30
 8007ed4:	ed9d 6a0d 	vldr	s12, [sp, #52]	@ 0x34
 8007ed8:	eddd 5a0e 	vldr	s11, [sp, #56]	@ 0x38
 8007edc:	ed9d 5a0f 	vldr	s10, [sp, #60]	@ 0x3c
 8007ee0:	eddd 4a10 	vldr	s9, [sp, #64]	@ 0x40
 8007ee4:	ed9d 2a11 	vldr	s4, [sp, #68]	@ 0x44
 8007ee8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007eea:	eef0 0a40 	vmov.f32	s1, s0
 8007eee:	f7fd bffd 	b.w	8005eec <neai_anomalydetection_learn+0x1124>
 8007ef2:	4e87      	ldr	r6, [pc, #540]	@ (8008110 <neai_anomalydetection_learn+0x3348>)
 8007ef4:	4f84      	ldr	r7, [pc, #528]	@ (8008108 <neai_anomalydetection_learn+0x3340>)
 8007ef6:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8007efa:	f7fe b8b2 	b.w	8006062 <neai_anomalydetection_learn+0x129a>
 8007efe:	ed8d 3a0f 	vstr	s6, [sp, #60]	@ 0x3c
 8007f02:	ed8d 7a0e 	vstr	s14, [sp, #56]	@ 0x38
 8007f06:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8007f0a:	ed8d 6a0c 	vstr	s12, [sp, #48]	@ 0x30
 8007f0e:	edcd 5a0b 	vstr	s11, [sp, #44]	@ 0x2c
 8007f12:	ed8d 5a0a 	vstr	s10, [sp, #40]	@ 0x28
 8007f16:	edcd 4a09 	vstr	s9, [sp, #36]	@ 0x24
 8007f1a:	ed8d 4a08 	vstr	s8, [sp, #32]
 8007f1e:	edcd 3a07 	vstr	s7, [sp, #28]
 8007f22:	edcd 2a03 	vstr	s5, [sp, #12]
 8007f26:	f001 fabb 	bl	80094a0 <sqrtf>
 8007f2a:	ed9d 3a0f 	vldr	s6, [sp, #60]	@ 0x3c
 8007f2e:	ed9d 7a0e 	vldr	s14, [sp, #56]	@ 0x38
 8007f32:	eddd 6a0d 	vldr	s13, [sp, #52]	@ 0x34
 8007f36:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 8007f3a:	eddd 5a0b 	vldr	s11, [sp, #44]	@ 0x2c
 8007f3e:	ed9d 5a0a 	vldr	s10, [sp, #40]	@ 0x28
 8007f42:	eddd 4a09 	vldr	s9, [sp, #36]	@ 0x24
 8007f46:	ed9d 4a08 	vldr	s8, [sp, #32]
 8007f4a:	eddd 3a07 	vldr	s7, [sp, #28]
 8007f4e:	eddd 2a03 	vldr	s5, [sp, #12]
 8007f52:	eeb0 2a40 	vmov.f32	s4, s0
 8007f56:	f7fd bc87 	b.w	8005868 <neai_anomalydetection_learn+0xaa0>
 8007f5a:	edcd 1a0f 	vstr	s3, [sp, #60]	@ 0x3c
 8007f5e:	ed8d 2a0e 	vstr	s4, [sp, #56]	@ 0x38
 8007f62:	edcd 0a0d 	vstr	s1, [sp, #52]	@ 0x34
 8007f66:	ed8d 4a0c 	vstr	s8, [sp, #48]	@ 0x30
 8007f6a:	edcd 4a0b 	vstr	s9, [sp, #44]	@ 0x2c
 8007f6e:	ed8d 5a0a 	vstr	s10, [sp, #40]	@ 0x28
 8007f72:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8007f76:	ed8d 6a08 	vstr	s12, [sp, #32]
 8007f7a:	edcd 6a07 	vstr	s13, [sp, #28]
 8007f7e:	edcd 7a03 	vstr	s15, [sp, #12]
 8007f82:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8007f86:	f001 fa8b 	bl	80094a0 <sqrtf>
 8007f8a:	eddd 7a03 	vldr	s15, [sp, #12]
 8007f8e:	eddd 6a07 	vldr	s13, [sp, #28]
 8007f92:	ed9d 6a08 	vldr	s12, [sp, #32]
 8007f96:	eddd 5a09 	vldr	s11, [sp, #36]	@ 0x24
 8007f9a:	ed9d 5a0a 	vldr	s10, [sp, #40]	@ 0x28
 8007f9e:	eddd 4a0b 	vldr	s9, [sp, #44]	@ 0x2c
 8007fa2:	ed9d 4a0c 	vldr	s8, [sp, #48]	@ 0x30
 8007fa6:	eddd 0a0d 	vldr	s1, [sp, #52]	@ 0x34
 8007faa:	ed9d 2a0e 	vldr	s4, [sp, #56]	@ 0x38
 8007fae:	eddd 1a0f 	vldr	s3, [sp, #60]	@ 0x3c
 8007fb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fb4:	eef0 3a40 	vmov.f32	s7, s0
 8007fb8:	f7fd b980 	b.w	80052bc <neai_anomalydetection_learn+0x4f4>
 8007fbc:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8007fc0:	edcd 1a24 	vstr	s3, [sp, #144]	@ 0x90
 8007fc4:	ed8d 1a23 	vstr	s2, [sp, #140]	@ 0x8c
 8007fc8:	ed8d 2a22 	vstr	s4, [sp, #136]	@ 0x88
 8007fcc:	ed8d 6a21 	vstr	s12, [sp, #132]	@ 0x84
 8007fd0:	edcd 5a20 	vstr	s11, [sp, #128]	@ 0x80
 8007fd4:	ed8d 5a1f 	vstr	s10, [sp, #124]	@ 0x7c
 8007fd8:	edcd 4a1e 	vstr	s9, [sp, #120]	@ 0x78
 8007fdc:	ed8d 4a1d 	vstr	s8, [sp, #116]	@ 0x74
 8007fe0:	edcd 3a1c 	vstr	s7, [sp, #112]	@ 0x70
 8007fe4:	edcd 7a1b 	vstr	s15, [sp, #108]	@ 0x6c
 8007fe8:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
 8007fec:	f001 fa58 	bl	80094a0 <sqrtf>
 8007ff0:	f899 3001 	ldrb.w	r3, [r9, #1]
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	f899 3002 	ldrb.w	r3, [r9, #2]
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	f899 3003 	ldrb.w	r3, [r9, #3]
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	f899 3004 	ldrb.w	r3, [r9, #4]
 8008006:	9309      	str	r3, [sp, #36]	@ 0x24
 8008008:	f899 3005 	ldrb.w	r3, [r9, #5]
 800800c:	930a      	str	r3, [sp, #40]	@ 0x28
 800800e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8008012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008014:	f899 3007 	ldrb.w	r3, [r9, #7]
 8008018:	930c      	str	r3, [sp, #48]	@ 0x30
 800801a:	f899 3008 	ldrb.w	r3, [r9, #8]
 800801e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	785a      	ldrb	r2, [r3, #1]
 8008024:	920d      	str	r2, [sp, #52]	@ 0x34
 8008026:	789a      	ldrb	r2, [r3, #2]
 8008028:	920f      	str	r2, [sp, #60]	@ 0x3c
 800802a:	78da      	ldrb	r2, [r3, #3]
 800802c:	9210      	str	r2, [sp, #64]	@ 0x40
 800802e:	791a      	ldrb	r2, [r3, #4]
 8008030:	9211      	str	r2, [sp, #68]	@ 0x44
 8008032:	795a      	ldrb	r2, [r3, #5]
 8008034:	9212      	str	r2, [sp, #72]	@ 0x48
 8008036:	799a      	ldrb	r2, [r3, #6]
 8008038:	9213      	str	r2, [sp, #76]	@ 0x4c
 800803a:	79da      	ldrb	r2, [r3, #7]
 800803c:	7a1b      	ldrb	r3, [r3, #8]
 800803e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008040:	eeb0 3a40 	vmov.f32	s6, s0
 8008044:	9315      	str	r3, [sp, #84]	@ 0x54
 8008046:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 800804a:	eddd 1a24 	vldr	s3, [sp, #144]	@ 0x90
 800804e:	ed9d 1a23 	vldr	s2, [sp, #140]	@ 0x8c
 8008052:	ed9d 2a22 	vldr	s4, [sp, #136]	@ 0x88
 8008056:	ed9d 6a21 	vldr	s12, [sp, #132]	@ 0x84
 800805a:	eddd 5a20 	vldr	s11, [sp, #128]	@ 0x80
 800805e:	ed9d 5a1f 	vldr	s10, [sp, #124]	@ 0x7c
 8008062:	eddd 4a1e 	vldr	s9, [sp, #120]	@ 0x78
 8008066:	ed9d 4a1d 	vldr	s8, [sp, #116]	@ 0x74
 800806a:	eddd 3a1c 	vldr	s7, [sp, #112]	@ 0x70
 800806e:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8008072:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
 8008076:	e46a      	b.n	800794e <neai_anomalydetection_learn+0x2b86>
 8008078:	eeb5 2a40 	vcmp.f32	s4, #0.0
 800807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008080:	ee77 3a83 	vadd.f32	s7, s15, s6
 8008084:	f47f ae5c 	bne.w	8007d40 <neai_anomalydetection_learn+0x2f78>
 8008088:	ed9f 3a22 	vldr	s6, [pc, #136]	@ 8008114 <neai_anomalydetection_learn+0x334c>
 800808c:	e663      	b.n	8007d56 <neai_anomalydetection_learn+0x2f8e>
 800808e:	ed8d 3a12 	vstr	s6, [sp, #72]	@ 0x48
 8008092:	9311      	str	r3, [sp, #68]	@ 0x44
 8008094:	edcd 2a10 	vstr	s5, [sp, #64]	@ 0x40
 8008098:	edcd 4a0f 	vstr	s9, [sp, #60]	@ 0x3c
 800809c:	ed8d 5a0e 	vstr	s10, [sp, #56]	@ 0x38
 80080a0:	edcd 5a0d 	vstr	s11, [sp, #52]	@ 0x34
 80080a4:	edcd 6a0c 	vstr	s13, [sp, #48]	@ 0x30
 80080a8:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80080ac:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 80080b0:	ed8d 4a09 	vstr	s8, [sp, #36]	@ 0x24
 80080b4:	ed8d 2a08 	vstr	s4, [sp, #32]
 80080b8:	edcd 1a07 	vstr	s3, [sp, #28]
 80080bc:	edcd 7a03 	vstr	s15, [sp, #12]
 80080c0:	ed8d 7a00 	vstr	s14, [sp]
 80080c4:	f001 f9ec 	bl	80094a0 <sqrtf>
 80080c8:	ed9d 3a12 	vldr	s6, [sp, #72]	@ 0x48
 80080cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080ce:	eddd 2a10 	vldr	s5, [sp, #64]	@ 0x40
 80080d2:	eddd 4a0f 	vldr	s9, [sp, #60]	@ 0x3c
 80080d6:	ed9d 5a0e 	vldr	s10, [sp, #56]	@ 0x38
 80080da:	eddd 5a0d 	vldr	s11, [sp, #52]	@ 0x34
 80080de:	eddd 6a0c 	vldr	s13, [sp, #48]	@ 0x30
 80080e2:	ed9d 6a0b 	vldr	s12, [sp, #44]	@ 0x2c
 80080e6:	eddd 3a0a 	vldr	s7, [sp, #40]	@ 0x28
 80080ea:	ed9d 4a09 	vldr	s8, [sp, #36]	@ 0x24
 80080ee:	ed9d 2a08 	vldr	s4, [sp, #32]
 80080f2:	eddd 1a07 	vldr	s3, [sp, #28]
 80080f6:	eddd 7a03 	vldr	s15, [sp, #12]
 80080fa:	ed9d 7a00 	vldr	s14, [sp]
 80080fe:	eef0 0a40 	vmov.f32	s1, s0
 8008102:	f7fe ba86 	b.w	8006612 <neai_anomalydetection_learn+0x184a>
 8008106:	bf00      	nop
 8008108:	2000079c 	.word	0x2000079c
 800810c:	200000bc 	.word	0x200000bc
 8008110:	20000778 	.word	0x20000778
 8008114:	42c80000 	.word	0x42c80000

08008118 <neai_anomalydetection_detect>:
 8008118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811a:	ed2d 8b10 	vpush	{d8-d15}
 800811e:	4a22      	ldr	r2, [pc, #136]	@ (80081a8 <neai_anomalydetection_detect+0x90>)
 8008120:	460d      	mov	r5, r1
 8008122:	7813      	ldrb	r3, [r2, #0]
 8008124:	21ff      	movs	r1, #255	@ 0xff
 8008126:	7029      	strb	r1, [r5, #0]
 8008128:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800812c:	2901      	cmp	r1, #1
 800812e:	b08f      	sub	sp, #60	@ 0x3c
 8008130:	f240 8393 	bls.w	800885a <neai_anomalydetection_detect+0x742>
 8008134:	2b80      	cmp	r3, #128	@ 0x80
 8008136:	f000 8390 	beq.w	800885a <neai_anomalydetection_detect+0x742>
 800813a:	4b1c      	ldr	r3, [pc, #112]	@ (80081ac <neai_anomalydetection_detect+0x94>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b09      	cmp	r3, #9
 8008140:	f240 8390 	bls.w	8008864 <neai_anomalydetection_detect+0x74c>
 8008144:	f7fc fd3c 	bl	8004bc0 <funchad52.constprop.0>
 8008148:	4b19      	ldr	r3, [pc, #100]	@ (80081b0 <neai_anomalydetection_detect+0x98>)
 800814a:	781f      	ldrb	r7, [r3, #0]
 800814c:	2f00      	cmp	r7, #0
 800814e:	f000 8382 	beq.w	8008856 <neai_anomalydetection_detect+0x73e>
 8008152:	4b18      	ldr	r3, [pc, #96]	@ (80081b4 <neai_anomalydetection_detect+0x9c>)
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7f8 fb29 	bl	80007ac <__aeabi_f2d>
 800815a:	a311      	add	r3, pc, #68	@ (adr r3, 80081a0 <neai_anomalydetection_detect+0x88>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 f896 	bl	8000290 <__aeabi_dmul>
 8008164:	f7f8 fc02 	bl	800096c <__aeabi_d2f>
 8008168:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80081b8 <neai_anomalydetection_detect+0xa0>
 800816c:	ee07 0a90 	vmov	s15, r0
 8008170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008178:	f280 837b 	bge.w	8008872 <neai_anomalydetection_detect+0x75a>
 800817c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008184:	f300 83fa 	bgt.w	800897c <neai_anomalydetection_detect+0x864>
 8008188:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80081bc <neai_anomalydetection_detect+0xa4>
 800818c:	4e0c      	ldr	r6, [pc, #48]	@ (80081c0 <neai_anomalydetection_detect+0xa8>)
 800818e:	4c0d      	ldr	r4, [pc, #52]	@ (80081c4 <neai_anomalydetection_detect+0xac>)
 8008190:	edcd 7a03 	vstr	s15, [sp, #12]
 8008194:	eef0 fa67 	vmov.f32	s31, s15
 8008198:	4437      	add	r7, r6
 800819a:	e01a      	b.n	80081d2 <neai_anomalydetection_detect+0xba>
 800819c:	f3af 8000 	nop.w
 80081a0:	33333333 	.word	0x33333333
 80081a4:	3feb3333 	.word	0x3feb3333
 80081a8:	2000007c 	.word	0x2000007c
 80081ac:	20000080 	.word	0x20000080
 80081b0:	200000be 	.word	0x200000be
 80081b4:	20000024 	.word	0x20000024
 80081b8:	3c23d70a 	.word	0x3c23d70a
 80081bc:	00000000 	.word	0x00000000
 80081c0:	200004a8 	.word	0x200004a8
 80081c4:	200000c0 	.word	0x200000c0
 80081c8:	437f0000 	.word	0x437f0000
 80081cc:	42b7      	cmp	r7, r6
 80081ce:	f000 83bf 	beq.w	8008950 <neai_anomalydetection_detect+0x838>
 80081d2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80081d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80081da:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 80081de:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80081e2:	2a04      	cmp	r2, #4
 80081e4:	d9f2      	bls.n	80081cc <neai_anomalydetection_detect+0xb4>
 80081e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	edd1 7a05 	vldr	s15, [r1, #20]
 80081f0:	ed91 7a09 	vldr	s14, [r1, #36]	@ 0x24
 80081f4:	ed91 6a04 	vldr	s12, [r1, #16]
 80081f8:	ed5f 5a0d 	vldr	s11, [pc, #-52]	@ 80081c8 <neai_anomalydetection_detect+0xb0>
 80081fc:	1d19      	adds	r1, r3, #4
 80081fe:	1862      	adds	r2, r4, r1
 8008200:	3318      	adds	r3, #24
 8008202:	5c61      	ldrb	r1, [r4, r1]
 8008204:	ee0c 1a10 	vmov	s24, r1
 8008208:	18e1      	adds	r1, r4, r3
 800820a:	5ce3      	ldrb	r3, [r4, r3]
 800820c:	ee0f 3a10 	vmov	s30, r3
 8008210:	7853      	ldrb	r3, [r2, #1]
 8008212:	ee0b 3a90 	vmov	s23, r3
 8008216:	7893      	ldrb	r3, [r2, #2]
 8008218:	ee0b 3a10 	vmov	s22, r3
 800821c:	78d3      	ldrb	r3, [r2, #3]
 800821e:	ee0a 3a90 	vmov	s21, r3
 8008222:	7913      	ldrb	r3, [r2, #4]
 8008224:	ee08 3a10 	vmov	s16, r3
 8008228:	7953      	ldrb	r3, [r2, #5]
 800822a:	eec7 6a25 	vdiv.f32	s13, s14, s11
 800822e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008232:	ee08 3a90 	vmov	s17, r3
 8008236:	7993      	ldrb	r3, [r2, #6]
 8008238:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800823c:	ee09 3a10 	vmov	s18, r3
 8008240:	79d3      	ldrb	r3, [r2, #7]
 8008242:	ee09 3a90 	vmov	s19, r3
 8008246:	7a13      	ldrb	r3, [r2, #8]
 8008248:	4aec      	ldr	r2, [pc, #944]	@ (80085fc <neai_anomalydetection_detect+0x4e4>)
 800824a:	ee0a 3a10 	vmov	s20, r3
 800824e:	784b      	ldrb	r3, [r1, #1]
 8008250:	ee0e 3a90 	vmov	s29, r3
 8008254:	788b      	ldrb	r3, [r1, #2]
 8008256:	ee06 3a10 	vmov	s12, r3
 800825a:	78cb      	ldrb	r3, [r1, #3]
 800825c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008260:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8008264:	ee66 5a26 	vmul.f32	s11, s12, s13
 8008268:	eef8 baeb 	vcvt.f32.s32	s23, s23
 800826c:	ee06 3a10 	vmov	s12, r3
 8008270:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8008274:	790b      	ldrb	r3, [r1, #4]
 8008276:	edcd 5a01 	vstr	s11, [sp, #4]
 800827a:	eef8 aaea 	vcvt.f32.s32	s21, s21
 800827e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008282:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8008286:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800828a:	eef8 9ae9 	vcvt.f32.s32	s19, s19
 800828e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8008292:	ee2c ca07 	vmul.f32	s24, s24, s14
 8008296:	ee6b ba87 	vmul.f32	s23, s23, s14
 800829a:	ee2b ba07 	vmul.f32	s22, s22, s14
 800829e:	ee6a aa87 	vmul.f32	s21, s21, s14
 80082a2:	ee28 8a07 	vmul.f32	s16, s16, s14
 80082a6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80082aa:	ee29 9a07 	vmul.f32	s18, s18, s14
 80082ae:	ee69 9a87 	vmul.f32	s19, s19, s14
 80082b2:	ee0c 3a90 	vmov	s25, r3
 80082b6:	ee2a aa07 	vmul.f32	s20, s20, s14
 80082ba:	794b      	ldrb	r3, [r1, #5]
 80082bc:	ee3c ca27 	vadd.f32	s24, s24, s15
 80082c0:	ee7b baa7 	vadd.f32	s23, s23, s15
 80082c4:	ee3b ba27 	vadd.f32	s22, s22, s15
 80082c8:	ee7a aaa7 	vadd.f32	s21, s21, s15
 80082cc:	ee38 8a27 	vadd.f32	s16, s16, s15
 80082d0:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80082d4:	ee39 9a27 	vadd.f32	s18, s18, s15
 80082d8:	ee79 9aa7 	vadd.f32	s19, s19, s15
 80082dc:	ee3a aa27 	vadd.f32	s20, s20, s15
 80082e0:	eef8 caec 	vcvt.f32.s32	s25, s25
 80082e4:	ee0d 3a10 	vmov	s26, r3
 80082e8:	eeb8 facf 	vcvt.f32.s32	s30, s30
 80082ec:	4bc4      	ldr	r3, [pc, #784]	@ (8008600 <neai_anomalydetection_detect+0x4e8>)
 80082ee:	eef8 eaee 	vcvt.f32.s32	s29, s29
 80082f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80082f6:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 80082fa:	ee26 6a26 	vmul.f32	s12, s12, s13
 80082fe:	ed83 ca00 	vstr	s24, [r3]
 8008302:	edc3 ba01 	vstr	s23, [r3, #4]
 8008306:	ed83 ba02 	vstr	s22, [r3, #8]
 800830a:	edc3 aa03 	vstr	s21, [r3, #12]
 800830e:	ed83 8a04 	vstr	s16, [r3, #16]
 8008312:	edc3 8a05 	vstr	s17, [r3, #20]
 8008316:	ed83 9a06 	vstr	s18, [r3, #24]
 800831a:	edc3 9a07 	vstr	s19, [r3, #28]
 800831e:	ed83 aa08 	vstr	s20, [r3, #32]
 8008322:	ee2f fa26 	vmul.f32	s30, s30, s13
 8008326:	4bb7      	ldr	r3, [pc, #732]	@ (8008604 <neai_anomalydetection_detect+0x4ec>)
 8008328:	ed8d 6a02 	vstr	s12, [sp, #8]
 800832c:	ee6e eaa6 	vmul.f32	s29, s29, s13
 8008330:	ed8d 5a00 	vstr	s10, [sp]
 8008334:	ed83 fa00 	vstr	s30, [r3]
 8008338:	edc3 ea01 	vstr	s29, [r3, #4]
 800833c:	edc3 5a02 	vstr	s11, [r3, #8]
 8008340:	edd2 2a00 	vldr	s5, [r2]
 8008344:	ed83 6a03 	vstr	s12, [r3, #12]
 8008348:	ee2c 6a0c 	vmul.f32	s12, s24, s24
 800834c:	ed92 3a01 	vldr	s6, [r2, #4]
 8008350:	edd2 3a02 	vldr	s7, [r2, #8]
 8008354:	ed83 5a04 	vstr	s10, [r3, #16]
 8008358:	ee36 6a2f 	vadd.f32	s12, s12, s31
 800835c:	ee62 5aa2 	vmul.f32	s11, s5, s5
 8008360:	ee6b 4aab 	vmul.f32	s9, s23, s23
 8008364:	ee75 5aaf 	vadd.f32	s11, s11, s31
 8008368:	ee74 4a86 	vadd.f32	s9, s9, s12
 800836c:	ee23 2a03 	vmul.f32	s4, s6, s6
 8008370:	ee22 5a8c 	vmul.f32	s10, s5, s24
 8008374:	ee2b 6a0b 	vmul.f32	s12, s22, s22
 8008378:	ed92 4a03 	vldr	s8, [r2, #12]
 800837c:	edd2 ca04 	vldr	s25, [r2, #16]
 8008380:	ee32 2a25 	vadd.f32	s4, s4, s11
 8008384:	ee36 6a24 	vadd.f32	s12, s12, s9
 8008388:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800838c:	ee63 5aa3 	vmul.f32	s11, s7, s7
 8008390:	ee63 4a2b 	vmul.f32	s9, s6, s23
 8008394:	ee75 5a82 	vadd.f32	s11, s11, s4
 8008398:	ee74 4a85 	vadd.f32	s9, s9, s10
 800839c:	ee23 2a8b 	vmul.f32	s4, s7, s22
 80083a0:	ee24 5a04 	vmul.f32	s10, s8, s8
 80083a4:	ee32 2a24 	vadd.f32	s4, s4, s9
 80083a8:	ee35 5a25 	vadd.f32	s10, s10, s11
 80083ac:	ee6c 4aac 	vmul.f32	s9, s25, s25
 80083b0:	ee6a 5aaa 	vmul.f32	s11, s21, s21
 80083b4:	ee74 4a85 	vadd.f32	s9, s9, s10
 80083b8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80083bc:	ee28 5a08 	vmul.f32	s10, s16, s16
 80083c0:	ed92 6a05 	vldr	s12, [r2, #20]
 80083c4:	ee24 1a2a 	vmul.f32	s2, s8, s21
 80083c8:	ee35 5a25 	vadd.f32	s10, s10, s11
 80083cc:	ee31 1a02 	vadd.f32	s2, s2, s4
 80083d0:	edd2 5a06 	vldr	s11, [r2, #24]
 80083d4:	ee66 1a06 	vmul.f32	s3, s12, s12
 80083d8:	ee6c 0a88 	vmul.f32	s1, s25, s16
 80083dc:	ee71 1aa4 	vadd.f32	s3, s3, s9
 80083e0:	ee70 0a81 	vadd.f32	s1, s1, s2
 80083e4:	ee72 7aaf 	vadd.f32	s15, s5, s31
 80083e8:	ee3c 7a2f 	vadd.f32	s14, s24, s31
 80083ec:	ee28 2aa8 	vmul.f32	s4, s17, s17
 80083f0:	ee25 1aa5 	vmul.f32	s2, s11, s11
 80083f4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80083f8:	ee31 1a21 	vadd.f32	s2, s2, s3
 80083fc:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008400:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8008404:	ee69 1a09 	vmul.f32	s3, s18, s18
 8008408:	ed92 5a07 	vldr	s10, [r2, #28]
 800840c:	edd2 4a08 	vldr	s9, [r2, #32]
 8008410:	798a      	ldrb	r2, [r1, #6]
 8008412:	ee71 1a82 	vadd.f32	s3, s3, s4
 8008416:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800841a:	ee37 7a0b 	vadd.f32	s14, s14, s22
 800841e:	ee26 2a28 	vmul.f32	s4, s12, s17
 8008422:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8008426:	ee32 2a20 	vadd.f32	s4, s4, s1
 800842a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800842e:	ee65 0a05 	vmul.f32	s1, s10, s10
 8008432:	ee37 7a08 	vadd.f32	s14, s14, s16
 8008436:	ee70 0a81 	vadd.f32	s1, s1, s2
 800843a:	ee77 7aac 	vadd.f32	s15, s15, s25
 800843e:	ee29 1aa9 	vmul.f32	s2, s19, s19
 8008442:	ee37 7a28 	vadd.f32	s14, s14, s17
 8008446:	ee31 1a21 	vadd.f32	s2, s2, s3
 800844a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800844e:	ee65 1a89 	vmul.f32	s3, s11, s18
 8008452:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 8008456:	ee71 1a82 	vadd.f32	s3, s3, s4
 800845a:	ee30 0a01 	vadd.f32	s0, s0, s2
 800845e:	ee37 7a09 	vadd.f32	s14, s14, s18
 8008462:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008466:	ee24 2aa4 	vmul.f32	s4, s9, s9
 800846a:	ee25 1a29 	vmul.f32	s2, s10, s19
 800846e:	ee32 2a20 	vadd.f32	s4, s4, s1
 8008472:	ee31 1a21 	vadd.f32	s2, s2, s3
 8008476:	ee37 7a29 	vadd.f32	s14, s14, s19
 800847a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800847e:	ee64 0a8a 	vmul.f32	s1, s9, s20
 8008482:	ee37 7a0a 	vadd.f32	s14, s14, s20
 8008486:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800848a:	ee0d 2a90 	vmov	s27, r2
 800848e:	ee70 0a81 	vadd.f32	s1, s1, s2
 8008492:	79ca      	ldrb	r2, [r1, #7]
 8008494:	eef2 1a02 	vmov.f32	s3, #34	@ 0x41100000  9.0
 8008498:	ee22 2a21 	vmul.f32	s4, s4, s3
 800849c:	ee20 0a21 	vmul.f32	s0, s0, s3
 80084a0:	ee0e 2a10 	vmov	s28, r2
 80084a4:	ee60 0aa1 	vmul.f32	s1, s1, s3
 80084a8:	7a0a      	ldrb	r2, [r1, #8]
 80084aa:	ee67 1aa7 	vmul.f32	s3, s15, s15
 80084ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084b2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80084b6:	ee72 1a61 	vsub.f32	s3, s4, s3
 80084ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 80084be:	ee07 2a10 	vmov	s14, r2
 80084c2:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 80084c6:	eef8 daed 	vcvt.f32.s32	s27, s27
 80084ca:	eeb8 eace 	vcvt.f32.s32	s28, s28
 80084ce:	ee21 0a80 	vmul.f32	s0, s3, s0
 80084d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084d6:	ee2d da26 	vmul.f32	s26, s26, s13
 80084da:	ee6d daa6 	vmul.f32	s27, s27, s13
 80084de:	ee2e ea26 	vmul.f32	s28, s28, s13
 80084e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80084e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	ee70 7ae7 	vsub.f32	s15, s1, s15
 80084f2:	ed83 da05 	vstr	s26, [r3, #20]
 80084f6:	edc3 da06 	vstr	s27, [r3, #24]
 80084fa:	ed83 ea07 	vstr	s28, [r3, #28]
 80084fe:	ed83 7a08 	vstr	s14, [r3, #32]
 8008502:	f100 823d 	bmi.w	8008980 <neai_anomalydetection_detect+0x868>
 8008506:	eeb1 2ac0 	vsqrt.f32	s4, s0
 800850a:	eec7 6a82 	vdiv.f32	s13, s15, s4
 800850e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008512:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851a:	f200 8206 	bhi.w	800892a <neai_anomalydetection_detect+0x812>
 800851e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8008522:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852a:	bfb8      	it	lt
 800852c:	eef0 6a6f 	vmovlt.f32	s13, s31
 8008530:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	f000 81d3 	beq.w	80088e2 <neai_anomalydetection_detect+0x7ca>
 800853c:	ee72 2acc 	vsub.f32	s5, s5, s24
 8008540:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8008544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008548:	d501      	bpl.n	800854e <neai_anomalydetection_detect+0x436>
 800854a:	eef1 2a62 	vneg.f32	s5, s5
 800854e:	eec2 7a8f 	vdiv.f32	s15, s5, s30
 8008552:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855a:	ee37 2aaf 	vadd.f32	s4, s15, s31
 800855e:	f300 8202 	bgt.w	8008966 <neai_anomalydetection_detect+0x84e>
 8008562:	eef5 ea40 	vcmp.f32	s29, #0.0
 8008566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856a:	f000 81e6 	beq.w	800893a <neai_anomalydetection_detect+0x822>
 800856e:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8008608 <neai_anomalydetection_detect+0x4f0>
 8008572:	ee33 3a6b 	vsub.f32	s6, s6, s23
 8008576:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857e:	d501      	bpl.n	8008584 <neai_anomalydetection_detect+0x46c>
 8008580:	eeb1 3a43 	vneg.f32	s6, s6
 8008584:	eec3 2a2e 	vdiv.f32	s5, s6, s29
 8008588:	eef4 7a62 	vcmp.f32	s15, s5
 800858c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008590:	ee32 3ac2 	vsub.f32	s6, s5, s4
 8008594:	bf48      	it	mi
 8008596:	eef0 7a62 	vmovmi.f32	s15, s5
 800859a:	eef6 2a00 	vmov.f32	s5, #96	@ 0x3f000000  0.5
 800859e:	ee23 3a22 	vmul.f32	s6, s6, s5
 80085a2:	eddd 2a01 	vldr	s5, [sp, #4]
 80085a6:	eef5 2a40 	vcmp.f32	s5, #0.0
 80085aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ae:	ee33 3a02 	vadd.f32	s6, s6, s4
 80085b2:	f040 8188 	bne.w	80088c6 <neai_anomalydetection_detect+0x7ae>
 80085b6:	eddf 2a15 	vldr	s5, [pc, #84]	@ 800860c <neai_anomalydetection_detect+0x4f4>
 80085ba:	eef4 2a67 	vcmp.f32	s5, s15
 80085be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c2:	bfc8      	it	gt
 80085c4:	eef0 7a62 	vmovgt.f32	s15, s5
 80085c8:	ee72 2ac3 	vsub.f32	s5, s5, s6
 80085cc:	eeb0 2a08 	vmov.f32	s4, #8	@ 0x40400000  3.0
 80085d0:	eec2 3a82 	vdiv.f32	s7, s5, s4
 80085d4:	ee33 3a83 	vadd.f32	s6, s7, s6
 80085d8:	eddd 3a02 	vldr	s7, [sp, #8]
 80085dc:	eef5 3a40 	vcmp.f32	s7, #0.0
 80085e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e4:	f040 8161 	bne.w	80088aa <neai_anomalydetection_detect+0x792>
 80085e8:	eddf 3a08 	vldr	s7, [pc, #32]	@ 800860c <neai_anomalydetection_detect+0x4f4>
 80085ec:	eef4 3a67 	vcmp.f32	s7, s15
 80085f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f4:	bfc8      	it	gt
 80085f6:	eef0 7a63 	vmovgt.f32	s15, s7
 80085fa:	e009      	b.n	8008610 <neai_anomalydetection_detect+0x4f8>
 80085fc:	20000778 	.word	0x20000778
 8008600:	200007c0 	.word	0x200007c0
 8008604:	2000079c 	.word	0x2000079c
 8008608:	00000000 	.word	0x00000000
 800860c:	42c80000 	.word	0x42c80000
 8008610:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8008614:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 8008618:	ee63 3a84 	vmul.f32	s7, s7, s8
 800861c:	ed9d 4a00 	vldr	s8, [sp]
 8008620:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8008624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008628:	ee73 3a83 	vadd.f32	s7, s7, s6
 800862c:	f000 8138 	beq.w	80088a0 <neai_anomalydetection_detect+0x788>
 8008630:	ee7c cac8 	vsub.f32	s25, s25, s16
 8008634:	eef5 cac0 	vcmpe.f32	s25, #0.0
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	d501      	bpl.n	8008642 <neai_anomalydetection_detect+0x52a>
 800863e:	eef1 ca6c 	vneg.f32	s25, s25
 8008642:	ed9d 4a00 	vldr	s8, [sp]
 8008646:	ee8c 4a84 	vdiv.f32	s8, s25, s8
 800864a:	eef4 7a44 	vcmp.f32	s15, s8
 800864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008652:	bf48      	it	mi
 8008654:	eef0 7a44 	vmovmi.f32	s15, s8
 8008658:	ee34 4a63 	vsub.f32	s8, s8, s7
 800865c:	eef1 2a04 	vmov.f32	s5, #20	@ 0x40a00000  5.0
 8008660:	ee84 3a22 	vdiv.f32	s6, s8, s5
 8008664:	eeb5 da40 	vcmp.f32	s26, #0.0
 8008668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866c:	ee73 3a23 	vadd.f32	s7, s6, s7
 8008670:	f000 8113 	beq.w	800889a <neai_anomalydetection_detect+0x782>
 8008674:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008678:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800867c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008680:	d501      	bpl.n	8008686 <neai_anomalydetection_detect+0x56e>
 8008682:	eeb1 6a46 	vneg.f32	s12, s12
 8008686:	ee86 4a0d 	vdiv.f32	s8, s12, s26
 800868a:	eef4 7a44 	vcmp.f32	s15, s8
 800868e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008692:	bf48      	it	mi
 8008694:	eef0 7a44 	vmovmi.f32	s15, s8
 8008698:	ee34 4a63 	vsub.f32	s8, s8, s7
 800869c:	eeb1 3a08 	vmov.f32	s6, #24	@ 0x40c00000  6.0
 80086a0:	ee84 6a03 	vdiv.f32	s12, s8, s6
 80086a4:	eef5 da40 	vcmp.f32	s27, #0.0
 80086a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ac:	ee36 4a23 	vadd.f32	s8, s12, s7
 80086b0:	f000 80f0 	beq.w	8008894 <neai_anomalydetection_detect+0x77c>
 80086b4:	ee75 5ac9 	vsub.f32	s11, s11, s18
 80086b8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80086bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c0:	d501      	bpl.n	80086c6 <neai_anomalydetection_detect+0x5ae>
 80086c2:	eef1 5a65 	vneg.f32	s11, s11
 80086c6:	ee85 6aad 	vdiv.f32	s12, s11, s27
 80086ca:	eef4 7a46 	vcmp.f32	s15, s12
 80086ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d2:	bf48      	it	mi
 80086d4:	eef0 7a46 	vmovmi.f32	s15, s12
 80086d8:	ee36 6a44 	vsub.f32	s12, s12, s8
 80086dc:	eef1 3a0c 	vmov.f32	s7, #28	@ 0x40e00000  7.0
 80086e0:	eec6 5a23 	vdiv.f32	s11, s12, s7
 80086e4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80086e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ec:	ee35 6a84 	vadd.f32	s12, s11, s8
 80086f0:	f000 80cd 	beq.w	800888e <neai_anomalydetection_detect+0x776>
 80086f4:	ee35 5a69 	vsub.f32	s10, s10, s19
 80086f8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80086fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008700:	d501      	bpl.n	8008706 <neai_anomalydetection_detect+0x5ee>
 8008702:	eeb1 5a45 	vneg.f32	s10, s10
 8008706:	eec5 5a0e 	vdiv.f32	s11, s10, s28
 800870a:	ee75 8ac6 	vsub.f32	s17, s11, s12
 800870e:	eef4 7a65 	vcmp.f32	s15, s11
 8008712:	eeb4 5a00 	vmov.f32	s10, #64	@ 0x3e000000  0.125
 8008716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871a:	ee68 8a85 	vmul.f32	s17, s17, s10
 800871e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008722:	bf48      	it	mi
 8008724:	eef0 7a65 	vmovmi.f32	s15, s11
 8008728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872c:	ee78 8a86 	vadd.f32	s17, s17, s12
 8008730:	f000 80aa 	beq.w	8008888 <neai_anomalydetection_detect+0x770>
 8008734:	ee74 4aca 	vsub.f32	s9, s9, s20
 8008738:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800873c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008740:	d501      	bpl.n	8008746 <neai_anomalydetection_detect+0x62e>
 8008742:	eef1 4a64 	vneg.f32	s9, s9
 8008746:	ee84 9a87 	vdiv.f32	s18, s9, s14
 800874a:	4ba7      	ldr	r3, [pc, #668]	@ (80089e8 <neai_anomalydetection_detect+0x8d0>)
 800874c:	eef4 7a49 	vcmp.f32	s15, s18
 8008750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008754:	ed93 8a00 	vldr	s16, [r3]
 8008758:	4ba4      	ldr	r3, [pc, #656]	@ (80089ec <neai_anomalydetection_detect+0x8d4>)
 800875a:	edcd 6a00 	vstr	s13, [sp]
 800875e:	bf48      	it	mi
 8008760:	eef0 7a49 	vmovmi.f32	s15, s18
 8008764:	ee28 6a27 	vmul.f32	s12, s16, s15
 8008768:	ed93 7a00 	vldr	s14, [r3]
 800876c:	4ba0      	ldr	r3, [pc, #640]	@ (80089f0 <neai_anomalydetection_detect+0x8d8>)
 800876e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8008772:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 8008776:	edd3 0a00 	vldr	s1, [r3]
 800877a:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80089f4 <neai_anomalydetection_detect+0x8dc>
 800877e:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8008782:	ee28 0a07 	vmul.f32	s0, s16, s14
 8008786:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800878a:	f000 fefb 	bl	8009584 <fminf>
 800878e:	4b9a      	ldr	r3, [pc, #616]	@ (80089f8 <neai_anomalydetection_detect+0x8e0>)
 8008790:	eddd 6a00 	vldr	s13, [sp]
 8008794:	edd3 7a00 	vldr	s15, [r3]
 8008798:	4b98      	ldr	r3, [pc, #608]	@ (80089fc <neai_anomalydetection_detect+0x8e4>)
 800879a:	4a99      	ldr	r2, [pc, #612]	@ (8008a00 <neai_anomalydetection_detect+0x8e8>)
 800879c:	edd3 4a00 	vldr	s9, [r3]
 80087a0:	4b98      	ldr	r3, [pc, #608]	@ (8008a04 <neai_anomalydetection_detect+0x8ec>)
 80087a2:	ed92 5a00 	vldr	s10, [r2]
 80087a6:	edd3 5a00 	vldr	s11, [r3]
 80087aa:	ee39 9a68 	vsub.f32	s18, s18, s17
 80087ae:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80087b2:	ee89 6a07 	vdiv.f32	s12, s18, s14
 80087b6:	ee79 7ae7 	vsub.f32	s15, s19, s15
 80087ba:	ee36 6a28 	vadd.f32	s12, s12, s17
 80087be:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80087c2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80087c6:	ee39 7ac7 	vsub.f32	s14, s19, s14
 80087ca:	eec6 7a24 	vdiv.f32	s15, s12, s9
 80087ce:	ee37 7a66 	vsub.f32	s14, s14, s13
 80087d2:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8008a08 <neai_anomalydetection_detect+0x8f0>
 80087d6:	eec7 6a26 	vdiv.f32	s13, s14, s13
 80087da:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80087de:	ee26 7aa5 	vmul.f32	s14, s13, s11
 80087e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80087e6:	eeb7 6a08 	vmov.f32	s12, #120	@ 0x3fc00000  1.5
 80087ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087ee:	ee28 8a06 	vmul.f32	s16, s16, s12
 80087f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80087f6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80087fa:	ee17 0a90 	vmov	r0, s15
 80087fe:	f7f7 ffd5 	bl	80007ac <__aeabi_f2d>
 8008802:	ed9f 1b77 	vldr	d1, [pc, #476]	@ 80089e0 <neai_anomalydetection_detect+0x8c8>
 8008806:	ec41 0b10 	vmov	d0, r0, r1
 800880a:	f000 fe67 	bl	80094dc <fmax>
 800880e:	ec51 0b10 	vmov	r0, r1, d0
 8008812:	f7f8 f8ab 	bl	800096c <__aeabi_d2f>
 8008816:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800881a:	ee00 0a10 	vmov	s0, r0
 800881e:	f000 feb1 	bl	8009584 <fminf>
 8008822:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8008826:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800882a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 800882e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008832:	eddd 7a03 	vldr	s15, [sp, #12]
 8008836:	eeb4 0a67 	vcmp.f32	s0, s15
 800883a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883e:	bfc8      	it	gt
 8008840:	eef0 7a40 	vmovgt.f32	s15, s0
 8008844:	eef4 7a47 	vcmp.f32	s15, s14
 8008848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884c:	edcd 7a03 	vstr	s15, [sp, #12]
 8008850:	f47f acbc 	bne.w	80081cc <neai_anomalydetection_detect+0xb4>
 8008854:	2764      	movs	r7, #100	@ 0x64
 8008856:	702f      	strb	r7, [r5, #0]
 8008858:	2300      	movs	r3, #0
 800885a:	4618      	mov	r0, r3
 800885c:	b00f      	add	sp, #60	@ 0x3c
 800885e:	ecbd 8b10 	vpop	{d8-d15}
 8008862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008864:	237e      	movs	r3, #126	@ 0x7e
 8008866:	4618      	mov	r0, r3
 8008868:	7013      	strb	r3, [r2, #0]
 800886a:	b00f      	add	sp, #60	@ 0x3c
 800886c:	ecbd 8b10 	vpop	{d8-d15}
 8008870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008872:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008876:	4b5c      	ldr	r3, [pc, #368]	@ (80089e8 <neai_anomalydetection_detect+0x8d0>)
 8008878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008880:	d97a      	bls.n	8008978 <neai_anomalydetection_detect+0x860>
 8008882:	ed83 7a00 	vstr	s14, [r3]
 8008886:	e47f      	b.n	8008188 <neai_anomalydetection_detect+0x70>
 8008888:	ed9f 9a60 	vldr	s18, [pc, #384]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 800888c:	e75d      	b.n	800874a <neai_anomalydetection_detect+0x632>
 800888e:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008892:	e73a      	b.n	800870a <neai_anomalydetection_detect+0x5f2>
 8008894:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008898:	e717      	b.n	80086ca <neai_anomalydetection_detect+0x5b2>
 800889a:	ed9f 4a5c 	vldr	s8, [pc, #368]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 800889e:	e6f4      	b.n	800868a <neai_anomalydetection_detect+0x572>
 80088a0:	ed9f 4a5a 	vldr	s8, [pc, #360]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 80088a4:	e6d1      	b.n	800864a <neai_anomalydetection_detect+0x532>
 80088a6:	eddf 7a59 	vldr	s15, [pc, #356]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 80088aa:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80088ae:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 80088b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088b6:	d501      	bpl.n	80088bc <neai_anomalydetection_detect+0x7a4>
 80088b8:	eeb1 4a44 	vneg.f32	s8, s8
 80088bc:	eddd 3a02 	vldr	s7, [sp, #8]
 80088c0:	eec4 3a23 	vdiv.f32	s7, s8, s7
 80088c4:	e692      	b.n	80085ec <neai_anomalydetection_detect+0x4d4>
 80088c6:	ee73 3acb 	vsub.f32	s7, s7, s22
 80088ca:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 80088ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d2:	d501      	bpl.n	80088d8 <neai_anomalydetection_detect+0x7c0>
 80088d4:	eef1 3a63 	vneg.f32	s7, s7
 80088d8:	eddd 2a01 	vldr	s5, [sp, #4]
 80088dc:	eec3 2aa2 	vdiv.f32	s5, s7, s5
 80088e0:	e66b      	b.n	80085ba <neai_anomalydetection_detect+0x4a2>
 80088e2:	eef5 ea40 	vcmp.f32	s29, #0.0
 80088e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ea:	d121      	bne.n	8008930 <neai_anomalydetection_detect+0x818>
 80088ec:	ed9f 3a47 	vldr	s6, [pc, #284]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 80088f0:	eddd 7a01 	vldr	s15, [sp, #4]
 80088f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80088f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fc:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008900:	d1e1      	bne.n	80088c6 <neai_anomalydetection_detect+0x7ae>
 8008902:	ee77 2ac3 	vsub.f32	s5, s15, s6
 8008906:	eef0 3a08 	vmov.f32	s7, #8	@ 0x40400000  3.0
 800890a:	eec2 7aa3 	vdiv.f32	s15, s5, s7
 800890e:	ee37 3a83 	vadd.f32	s6, s15, s6
 8008912:	eddd 7a02 	vldr	s15, [sp, #8]
 8008916:	eef5 7a40 	vcmp.f32	s15, #0.0
 800891a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891e:	d1c2      	bne.n	80088a6 <neai_anomalydetection_detect+0x78e>
 8008920:	eddf 3a3a 	vldr	s7, [pc, #232]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008924:	eef0 7a63 	vmov.f32	s15, s7
 8008928:	e672      	b.n	8008610 <neai_anomalydetection_detect+0x4f8>
 800892a:	eef0 6a6f 	vmov.f32	s13, s31
 800892e:	e5ff      	b.n	8008530 <neai_anomalydetection_detect+0x418>
 8008930:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008934:	eef0 7a42 	vmov.f32	s15, s4
 8008938:	e61b      	b.n	8008572 <neai_anomalydetection_detect+0x45a>
 800893a:	ed9f 3a34 	vldr	s6, [pc, #208]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 800893e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008942:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008946:	ee23 3a27 	vmul.f32	s6, s6, s15
 800894a:	ee33 3a02 	vadd.f32	s6, s6, s4
 800894e:	e7cf      	b.n	80088f0 <neai_anomalydetection_detect+0x7d8>
 8008950:	eddd 7a03 	vldr	s15, [sp, #12]
 8008954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008958:	2300      	movs	r3, #0
 800895a:	edcd 7a00 	vstr	s15, [sp]
 800895e:	f89d 7000 	ldrb.w	r7, [sp]
 8008962:	702f      	strb	r7, [r5, #0]
 8008964:	e779      	b.n	800885a <neai_anomalydetection_detect+0x742>
 8008966:	eef5 ea40 	vcmp.f32	s29, #0.0
 800896a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896e:	f47f ae00 	bne.w	8008572 <neai_anomalydetection_detect+0x45a>
 8008972:	eddf 2a26 	vldr	s5, [pc, #152]	@ 8008a0c <neai_anomalydetection_detect+0x8f4>
 8008976:	e607      	b.n	8008588 <neai_anomalydetection_detect+0x470>
 8008978:	6018      	str	r0, [r3, #0]
 800897a:	e405      	b.n	8008188 <neai_anomalydetection_detect+0x70>
 800897c:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <neai_anomalydetection_detect+0x8d0>)
 800897e:	e780      	b.n	8008882 <neai_anomalydetection_detect+0x76a>
 8008980:	ed8d 7a0d 	vstr	s14, [sp, #52]	@ 0x34
 8008984:	edcd 4a0c 	vstr	s9, [sp, #48]	@ 0x30
 8008988:	ed8d 5a0b 	vstr	s10, [sp, #44]	@ 0x2c
 800898c:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8008990:	ed8d 6a09 	vstr	s12, [sp, #36]	@ 0x24
 8008994:	ed8d 4a08 	vstr	s8, [sp, #32]
 8008998:	edcd 3a07 	vstr	s7, [sp, #28]
 800899c:	ed8d 3a06 	vstr	s6, [sp, #24]
 80089a0:	edcd 2a05 	vstr	s5, [sp, #20]
 80089a4:	edcd 7a04 	vstr	s15, [sp, #16]
 80089a8:	f000 fd7a 	bl	80094a0 <sqrtf>
 80089ac:	ed9d 7a0d 	vldr	s14, [sp, #52]	@ 0x34
 80089b0:	eddd 4a0c 	vldr	s9, [sp, #48]	@ 0x30
 80089b4:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 80089b8:	eddd 5a0a 	vldr	s11, [sp, #40]	@ 0x28
 80089bc:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 80089c0:	ed9d 4a08 	vldr	s8, [sp, #32]
 80089c4:	eddd 3a07 	vldr	s7, [sp, #28]
 80089c8:	ed9d 3a06 	vldr	s6, [sp, #24]
 80089cc:	eddd 2a05 	vldr	s5, [sp, #20]
 80089d0:	eddd 7a04 	vldr	s15, [sp, #16]
 80089d4:	eeb0 2a40 	vmov.f32	s4, s0
 80089d8:	e597      	b.n	800850a <neai_anomalydetection_detect+0x3f2>
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w
	...
 80089e8:	20000028 	.word	0x20000028
 80089ec:	200000b4 	.word	0x200000b4
 80089f0:	200000a0 	.word	0x200000a0
 80089f4:	3f666666 	.word	0x3f666666
 80089f8:	200000b0 	.word	0x200000b0
 80089fc:	200000b8 	.word	0x200000b8
 8008a00:	200000a8 	.word	0x200000a8
 8008a04:	200000a4 	.word	0x200000a4
 8008a08:	3dcccccd 	.word	0x3dcccccd
 8008a0c:	42c80000 	.word	0x42c80000

08008a10 <_fminf>:
 8008a10:	f000 bdb8 	b.w	8009584 <fminf>

08008a14 <neai_anomalydetection_init>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4b31      	ldr	r3, [pc, #196]	@ (8008adc <neai_anomalydetection_init+0xc8>)
 8008a18:	4931      	ldr	r1, [pc, #196]	@ (8008ae0 <neai_anomalydetection_init+0xcc>)
 8008a1a:	4c32      	ldr	r4, [pc, #200]	@ (8008ae4 <neai_anomalydetection_init+0xd0>)
 8008a1c:	4832      	ldr	r0, [pc, #200]	@ (8008ae8 <neai_anomalydetection_init+0xd4>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	ed2d 8b02 	vpush	{d8}
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	4b31      	ldr	r3, [pc, #196]	@ (8008aec <neai_anomalydetection_init+0xd8>)
 8008a28:	700a      	strb	r2, [r1, #0]
 8008a2a:	7022      	strb	r2, [r4, #0]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f100 0c19 	add.w	ip, r0, #25
 8008a32:	f800 2f01 	strb.w	r2, [r0, #1]!
 8008a36:	4584      	cmp	ip, r0
 8008a38:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008a3c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	6119      	str	r1, [r3, #16]
 8008a44:	6159      	str	r1, [r3, #20]
 8008a46:	6259      	str	r1, [r3, #36]	@ 0x24
 8008a48:	731a      	strb	r2, [r3, #12]
 8008a4a:	f883 2020 	strb.w	r2, [r3, #32]
 8008a4e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8008a52:	d1ee      	bne.n	8008a32 <neai_anomalydetection_init+0x1e>
 8008a54:	4c26      	ldr	r4, [pc, #152]	@ (8008af0 <neai_anomalydetection_init+0xdc>)
 8008a56:	4827      	ldr	r0, [pc, #156]	@ (8008af4 <neai_anomalydetection_init+0xe0>)
 8008a58:	4b27      	ldr	r3, [pc, #156]	@ (8008af8 <neai_anomalydetection_init+0xe4>)
 8008a5a:	6021      	str	r1, [r4, #0]
 8008a5c:	4c27      	ldr	r4, [pc, #156]	@ (8008afc <neai_anomalydetection_init+0xe8>)
 8008a5e:	6019      	str	r1, [r3, #0]
 8008a60:	6001      	str	r1, [r0, #0]
 8008a62:	4b27      	ldr	r3, [pc, #156]	@ (8008b00 <neai_anomalydetection_init+0xec>)
 8008a64:	4827      	ldr	r0, [pc, #156]	@ (8008b04 <neai_anomalydetection_init+0xf0>)
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	4927      	ldr	r1, [pc, #156]	@ (8008b08 <neai_anomalydetection_init+0xf4>)
 8008a6a:	4c28      	ldr	r4, [pc, #160]	@ (8008b0c <neai_anomalydetection_init+0xf8>)
 8008a6c:	6019      	str	r1, [r3, #0]
 8008a6e:	6004      	str	r4, [r0, #0]
 8008a70:	4b27      	ldr	r3, [pc, #156]	@ (8008b10 <neai_anomalydetection_init+0xfc>)
 8008a72:	4828      	ldr	r0, [pc, #160]	@ (8008b14 <neai_anomalydetection_init+0x100>)
 8008a74:	4928      	ldr	r1, [pc, #160]	@ (8008b18 <neai_anomalydetection_init+0x104>)
 8008a76:	4c29      	ldr	r4, [pc, #164]	@ (8008b1c <neai_anomalydetection_init+0x108>)
 8008a78:	6019      	str	r1, [r3, #0]
 8008a7a:	6004      	str	r4, [r0, #0]
 8008a7c:	4b28      	ldr	r3, [pc, #160]	@ (8008b20 <neai_anomalydetection_init+0x10c>)
 8008a7e:	4829      	ldr	r0, [pc, #164]	@ (8008b24 <neai_anomalydetection_init+0x110>)
 8008a80:	4929      	ldr	r1, [pc, #164]	@ (8008b28 <neai_anomalydetection_init+0x114>)
 8008a82:	4c2a      	ldr	r4, [pc, #168]	@ (8008b2c <neai_anomalydetection_init+0x118>)
 8008a84:	6019      	str	r1, [r3, #0]
 8008a86:	6004      	str	r4, [r0, #0]
 8008a88:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <neai_anomalydetection_init+0x11c>)
 8008a8a:	482a      	ldr	r0, [pc, #168]	@ (8008b34 <neai_anomalydetection_init+0x120>)
 8008a8c:	492a      	ldr	r1, [pc, #168]	@ (8008b38 <neai_anomalydetection_init+0x124>)
 8008a8e:	4c2b      	ldr	r4, [pc, #172]	@ (8008b3c <neai_anomalydetection_init+0x128>)
 8008a90:	6019      	str	r1, [r3, #0]
 8008a92:	6004      	str	r4, [r0, #0]
 8008a94:	4b2a      	ldr	r3, [pc, #168]	@ (8008b40 <neai_anomalydetection_init+0x12c>)
 8008a96:	482b      	ldr	r0, [pc, #172]	@ (8008b44 <neai_anomalydetection_init+0x130>)
 8008a98:	ed9f 8a2b 	vldr	s16, [pc, #172]	@ 8008b48 <neai_anomalydetection_init+0x134>
 8008a9c:	4c2b      	ldr	r4, [pc, #172]	@ (8008b4c <neai_anomalydetection_init+0x138>)
 8008a9e:	6004      	str	r4, [r0, #0]
 8008aa0:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8008aa4:	6019      	str	r1, [r3, #0]
 8008aa6:	4c2a      	ldr	r4, [pc, #168]	@ (8008b50 <neai_anomalydetection_init+0x13c>)
 8008aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8008b54 <neai_anomalydetection_init+0x140>)
 8008aaa:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8008b58 <neai_anomalydetection_init+0x144>
 8008aae:	7022      	strb	r2, [r4, #0]
 8008ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	7019      	strb	r1, [r3, #0]
 8008ab8:	f7ff ffaa 	bl	8008a10 <_fminf>
 8008abc:	eeb4 0a48 	vcmp.f32	s0, s16
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	bf1c      	itt	ne
 8008ac6:	2081      	movne	r0, #129	@ 0x81
 8008ac8:	7020      	strbne	r0, [r4, #0]
 8008aca:	ecbd 8b02 	vpop	{d8}
 8008ace:	4b23      	ldr	r3, [pc, #140]	@ (8008b5c <neai_anomalydetection_init+0x148>)
 8008ad0:	bf08      	it	eq
 8008ad2:	7820      	ldrbeq	r0, [r4, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	200000be 	.word	0x200000be
 8008ae0:	200000bc 	.word	0x200000bc
 8008ae4:	200000bd 	.word	0x200000bd
 8008ae8:	200004a7 	.word	0x200004a7
 8008aec:	200000c0 	.word	0x200000c0
 8008af0:	20000090 	.word	0x20000090
 8008af4:	20000098 	.word	0x20000098
 8008af8:	20000094 	.word	0x20000094
 8008afc:	2000009c 	.word	0x2000009c
 8008b00:	200000b8 	.word	0x200000b8
 8008b04:	200000b4 	.word	0x200000b4
 8008b08:	3f99999a 	.word	0x3f99999a
 8008b0c:	40666666 	.word	0x40666666
 8008b10:	200000b0 	.word	0x200000b0
 8008b14:	200000ac 	.word	0x200000ac
 8008b18:	3f7ae148 	.word	0x3f7ae148
 8008b1c:	3f1eb852 	.word	0x3f1eb852
 8008b20:	20000028 	.word	0x20000028
 8008b24:	200000a8 	.word	0x200000a8
 8008b28:	3f59999a 	.word	0x3f59999a
 8008b2c:	3f266666 	.word	0x3f266666
 8008b30:	200000a4 	.word	0x200000a4
 8008b34:	200000a0 	.word	0x200000a0
 8008b38:	3f47ae14 	.word	0x3f47ae14
 8008b3c:	3cf5c28f 	.word	0x3cf5c28f
 8008b40:	2000008c 	.word	0x2000008c
 8008b44:	20000088 	.word	0x20000088
 8008b48:	3f8ccccd 	.word	0x3f8ccccd
 8008b4c:	3e947ae1 	.word	0x3e947ae1
 8008b50:	2000007c 	.word	0x2000007c
 8008b54:	20000084 	.word	0x20000084
 8008b58:	40066666 	.word	0x40066666
 8008b5c:	20000080 	.word	0x20000080

08008b60 <siprintf>:
 8008b60:	b40e      	push	{r1, r2, r3}
 8008b62:	b500      	push	{lr}
 8008b64:	b09c      	sub	sp, #112	@ 0x70
 8008b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8008b68:	9002      	str	r0, [sp, #8]
 8008b6a:	9006      	str	r0, [sp, #24]
 8008b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b70:	4809      	ldr	r0, [pc, #36]	@ (8008b98 <siprintf+0x38>)
 8008b72:	9107      	str	r1, [sp, #28]
 8008b74:	9104      	str	r1, [sp, #16]
 8008b76:	4909      	ldr	r1, [pc, #36]	@ (8008b9c <siprintf+0x3c>)
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	9105      	str	r1, [sp, #20]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	a902      	add	r1, sp, #8
 8008b84:	f000 f994 	bl	8008eb0 <_svfiprintf_r>
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	b01c      	add	sp, #112	@ 0x70
 8008b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b94:	b003      	add	sp, #12
 8008b96:	4770      	bx	lr
 8008b98:	2000002c 	.word	0x2000002c
 8008b9c:	ffff0208 	.word	0xffff0208

08008ba0 <memset>:
 8008ba0:	4402      	add	r2, r0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <__errno>:
 8008bb0:	4b01      	ldr	r3, [pc, #4]	@ (8008bb8 <__errno+0x8>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	2000002c 	.word	0x2000002c

08008bbc <__libc_init_array>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8008bf4 <__libc_init_array+0x38>)
 8008bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8008bf8 <__libc_init_array+0x3c>)
 8008bc2:	1b64      	subs	r4, r4, r5
 8008bc4:	10a4      	asrs	r4, r4, #2
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	42a6      	cmp	r6, r4
 8008bca:	d109      	bne.n	8008be0 <__libc_init_array+0x24>
 8008bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8008bfc <__libc_init_array+0x40>)
 8008bce:	4c0c      	ldr	r4, [pc, #48]	@ (8008c00 <__libc_init_array+0x44>)
 8008bd0:	f000 fd16 	bl	8009600 <_init>
 8008bd4:	1b64      	subs	r4, r4, r5
 8008bd6:	10a4      	asrs	r4, r4, #2
 8008bd8:	2600      	movs	r6, #0
 8008bda:	42a6      	cmp	r6, r4
 8008bdc:	d105      	bne.n	8008bea <__libc_init_array+0x2e>
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be4:	4798      	blx	r3
 8008be6:	3601      	adds	r6, #1
 8008be8:	e7ee      	b.n	8008bc8 <__libc_init_array+0xc>
 8008bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bee:	4798      	blx	r3
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	e7f2      	b.n	8008bda <__libc_init_array+0x1e>
 8008bf4:	080096d0 	.word	0x080096d0
 8008bf8:	080096d0 	.word	0x080096d0
 8008bfc:	080096d0 	.word	0x080096d0
 8008c00:	080096d4 	.word	0x080096d4

08008c04 <__retarget_lock_acquire_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__retarget_lock_release_recursive>:
 8008c06:	4770      	bx	lr

08008c08 <_free_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	d041      	beq.n	8008c94 <_free_r+0x8c>
 8008c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c14:	1f0c      	subs	r4, r1, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bfb8      	it	lt
 8008c1a:	18e4      	addlt	r4, r4, r3
 8008c1c:	f000 f8e0 	bl	8008de0 <__malloc_lock>
 8008c20:	4a1d      	ldr	r2, [pc, #116]	@ (8008c98 <_free_r+0x90>)
 8008c22:	6813      	ldr	r3, [r2, #0]
 8008c24:	b933      	cbnz	r3, 8008c34 <_free_r+0x2c>
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	6014      	str	r4, [r2, #0]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c30:	f000 b8dc 	b.w	8008dec <__malloc_unlock>
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d908      	bls.n	8008c4a <_free_r+0x42>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	1821      	adds	r1, r4, r0
 8008c3c:	428b      	cmp	r3, r1
 8008c3e:	bf01      	itttt	eq
 8008c40:	6819      	ldreq	r1, [r3, #0]
 8008c42:	685b      	ldreq	r3, [r3, #4]
 8008c44:	1809      	addeq	r1, r1, r0
 8008c46:	6021      	streq	r1, [r4, #0]
 8008c48:	e7ed      	b.n	8008c26 <_free_r+0x1e>
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b10b      	cbz	r3, 8008c54 <_free_r+0x4c>
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d9fa      	bls.n	8008c4a <_free_r+0x42>
 8008c54:	6811      	ldr	r1, [r2, #0]
 8008c56:	1850      	adds	r0, r2, r1
 8008c58:	42a0      	cmp	r0, r4
 8008c5a:	d10b      	bne.n	8008c74 <_free_r+0x6c>
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	4401      	add	r1, r0
 8008c60:	1850      	adds	r0, r2, r1
 8008c62:	4283      	cmp	r3, r0
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	d1e0      	bne.n	8008c2a <_free_r+0x22>
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	6053      	str	r3, [r2, #4]
 8008c6e:	4408      	add	r0, r1
 8008c70:	6010      	str	r0, [r2, #0]
 8008c72:	e7da      	b.n	8008c2a <_free_r+0x22>
 8008c74:	d902      	bls.n	8008c7c <_free_r+0x74>
 8008c76:	230c      	movs	r3, #12
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	e7d6      	b.n	8008c2a <_free_r+0x22>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	1821      	adds	r1, r4, r0
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf04      	itt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	6063      	str	r3, [r4, #4]
 8008c8a:	bf04      	itt	eq
 8008c8c:	1809      	addeq	r1, r1, r0
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	6054      	str	r4, [r2, #4]
 8008c92:	e7ca      	b.n	8008c2a <_free_r+0x22>
 8008c94:	bd38      	pop	{r3, r4, r5, pc}
 8008c96:	bf00      	nop
 8008c98:	20000928 	.word	0x20000928

08008c9c <sbrk_aligned>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8008cdc <sbrk_aligned+0x40>)
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	6831      	ldr	r1, [r6, #0]
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	b911      	cbnz	r1, 8008cae <sbrk_aligned+0x12>
 8008ca8:	f000 fba6 	bl	80093f8 <_sbrk_r>
 8008cac:	6030      	str	r0, [r6, #0]
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 fba1 	bl	80093f8 <_sbrk_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d103      	bne.n	8008cc2 <sbrk_aligned+0x26>
 8008cba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	1cc4      	adds	r4, r0, #3
 8008cc4:	f024 0403 	bic.w	r4, r4, #3
 8008cc8:	42a0      	cmp	r0, r4
 8008cca:	d0f8      	beq.n	8008cbe <sbrk_aligned+0x22>
 8008ccc:	1a21      	subs	r1, r4, r0
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f000 fb92 	bl	80093f8 <_sbrk_r>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d1f2      	bne.n	8008cbe <sbrk_aligned+0x22>
 8008cd8:	e7ef      	b.n	8008cba <sbrk_aligned+0x1e>
 8008cda:	bf00      	nop
 8008cdc:	20000924 	.word	0x20000924

08008ce0 <_malloc_r>:
 8008ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce4:	1ccd      	adds	r5, r1, #3
 8008ce6:	f025 0503 	bic.w	r5, r5, #3
 8008cea:	3508      	adds	r5, #8
 8008cec:	2d0c      	cmp	r5, #12
 8008cee:	bf38      	it	cc
 8008cf0:	250c      	movcc	r5, #12
 8008cf2:	2d00      	cmp	r5, #0
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	db01      	blt.n	8008cfc <_malloc_r+0x1c>
 8008cf8:	42a9      	cmp	r1, r5
 8008cfa:	d904      	bls.n	8008d06 <_malloc_r+0x26>
 8008cfc:	230c      	movs	r3, #12
 8008cfe:	6033      	str	r3, [r6, #0]
 8008d00:	2000      	movs	r0, #0
 8008d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ddc <_malloc_r+0xfc>
 8008d0a:	f000 f869 	bl	8008de0 <__malloc_lock>
 8008d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d12:	461c      	mov	r4, r3
 8008d14:	bb44      	cbnz	r4, 8008d68 <_malloc_r+0x88>
 8008d16:	4629      	mov	r1, r5
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff ffbf 	bl	8008c9c <sbrk_aligned>
 8008d1e:	1c43      	adds	r3, r0, #1
 8008d20:	4604      	mov	r4, r0
 8008d22:	d158      	bne.n	8008dd6 <_malloc_r+0xf6>
 8008d24:	f8d8 4000 	ldr.w	r4, [r8]
 8008d28:	4627      	mov	r7, r4
 8008d2a:	2f00      	cmp	r7, #0
 8008d2c:	d143      	bne.n	8008db6 <_malloc_r+0xd6>
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d04b      	beq.n	8008dca <_malloc_r+0xea>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	4639      	mov	r1, r7
 8008d36:	4630      	mov	r0, r6
 8008d38:	eb04 0903 	add.w	r9, r4, r3
 8008d3c:	f000 fb5c 	bl	80093f8 <_sbrk_r>
 8008d40:	4581      	cmp	r9, r0
 8008d42:	d142      	bne.n	8008dca <_malloc_r+0xea>
 8008d44:	6821      	ldr	r1, [r4, #0]
 8008d46:	1a6d      	subs	r5, r5, r1
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ffa6 	bl	8008c9c <sbrk_aligned>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d03a      	beq.n	8008dca <_malloc_r+0xea>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	442b      	add	r3, r5
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	bb62      	cbnz	r2, 8008dbc <_malloc_r+0xdc>
 8008d62:	f8c8 7000 	str.w	r7, [r8]
 8008d66:	e00f      	b.n	8008d88 <_malloc_r+0xa8>
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	1b52      	subs	r2, r2, r5
 8008d6c:	d420      	bmi.n	8008db0 <_malloc_r+0xd0>
 8008d6e:	2a0b      	cmp	r2, #11
 8008d70:	d917      	bls.n	8008da2 <_malloc_r+0xc2>
 8008d72:	1961      	adds	r1, r4, r5
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	6025      	str	r5, [r4, #0]
 8008d78:	bf18      	it	ne
 8008d7a:	6059      	strne	r1, [r3, #4]
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	bf08      	it	eq
 8008d80:	f8c8 1000 	streq.w	r1, [r8]
 8008d84:	5162      	str	r2, [r4, r5]
 8008d86:	604b      	str	r3, [r1, #4]
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f000 f82f 	bl	8008dec <__malloc_unlock>
 8008d8e:	f104 000b 	add.w	r0, r4, #11
 8008d92:	1d23      	adds	r3, r4, #4
 8008d94:	f020 0007 	bic.w	r0, r0, #7
 8008d98:	1ac2      	subs	r2, r0, r3
 8008d9a:	bf1c      	itt	ne
 8008d9c:	1a1b      	subne	r3, r3, r0
 8008d9e:	50a3      	strne	r3, [r4, r2]
 8008da0:	e7af      	b.n	8008d02 <_malloc_r+0x22>
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	bf0c      	ite	eq
 8008da8:	f8c8 2000 	streq.w	r2, [r8]
 8008dac:	605a      	strne	r2, [r3, #4]
 8008dae:	e7eb      	b.n	8008d88 <_malloc_r+0xa8>
 8008db0:	4623      	mov	r3, r4
 8008db2:	6864      	ldr	r4, [r4, #4]
 8008db4:	e7ae      	b.n	8008d14 <_malloc_r+0x34>
 8008db6:	463c      	mov	r4, r7
 8008db8:	687f      	ldr	r7, [r7, #4]
 8008dba:	e7b6      	b.n	8008d2a <_malloc_r+0x4a>
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	42a3      	cmp	r3, r4
 8008dc2:	d1fb      	bne.n	8008dbc <_malloc_r+0xdc>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	6053      	str	r3, [r2, #4]
 8008dc8:	e7de      	b.n	8008d88 <_malloc_r+0xa8>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f80c 	bl	8008dec <__malloc_unlock>
 8008dd4:	e794      	b.n	8008d00 <_malloc_r+0x20>
 8008dd6:	6005      	str	r5, [r0, #0]
 8008dd8:	e7d6      	b.n	8008d88 <_malloc_r+0xa8>
 8008dda:	bf00      	nop
 8008ddc:	20000928 	.word	0x20000928

08008de0 <__malloc_lock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	@ (8008de8 <__malloc_lock+0x8>)
 8008de2:	f7ff bf0f 	b.w	8008c04 <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000920 	.word	0x20000920

08008dec <__malloc_unlock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	@ (8008df4 <__malloc_unlock+0x8>)
 8008dee:	f7ff bf0a 	b.w	8008c06 <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	20000920 	.word	0x20000920

08008df8 <__ssputs_r>:
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	688e      	ldr	r6, [r1, #8]
 8008dfe:	461f      	mov	r7, r3
 8008e00:	42be      	cmp	r6, r7
 8008e02:	680b      	ldr	r3, [r1, #0]
 8008e04:	4682      	mov	sl, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	4690      	mov	r8, r2
 8008e0a:	d82d      	bhi.n	8008e68 <__ssputs_r+0x70>
 8008e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e14:	d026      	beq.n	8008e64 <__ssputs_r+0x6c>
 8008e16:	6965      	ldr	r5, [r4, #20]
 8008e18:	6909      	ldr	r1, [r1, #16]
 8008e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e1e:	eba3 0901 	sub.w	r9, r3, r1
 8008e22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e26:	1c7b      	adds	r3, r7, #1
 8008e28:	444b      	add	r3, r9
 8008e2a:	106d      	asrs	r5, r5, #1
 8008e2c:	429d      	cmp	r5, r3
 8008e2e:	bf38      	it	cc
 8008e30:	461d      	movcc	r5, r3
 8008e32:	0553      	lsls	r3, r2, #21
 8008e34:	d527      	bpl.n	8008e86 <__ssputs_r+0x8e>
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7ff ff52 	bl	8008ce0 <_malloc_r>
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	b360      	cbz	r0, 8008e9a <__ssputs_r+0xa2>
 8008e40:	6921      	ldr	r1, [r4, #16]
 8008e42:	464a      	mov	r2, r9
 8008e44:	f000 fae8 	bl	8009418 <memcpy>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	6126      	str	r6, [r4, #16]
 8008e56:	6165      	str	r5, [r4, #20]
 8008e58:	444e      	add	r6, r9
 8008e5a:	eba5 0509 	sub.w	r5, r5, r9
 8008e5e:	6026      	str	r6, [r4, #0]
 8008e60:	60a5      	str	r5, [r4, #8]
 8008e62:	463e      	mov	r6, r7
 8008e64:	42be      	cmp	r6, r7
 8008e66:	d900      	bls.n	8008e6a <__ssputs_r+0x72>
 8008e68:	463e      	mov	r6, r7
 8008e6a:	6820      	ldr	r0, [r4, #0]
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	4641      	mov	r1, r8
 8008e70:	f000 faa8 	bl	80093c4 <memmove>
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	1b9b      	subs	r3, r3, r6
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	4433      	add	r3, r6
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	2000      	movs	r0, #0
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	462a      	mov	r2, r5
 8008e88:	f000 fad4 	bl	8009434 <_realloc_r>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d1e0      	bne.n	8008e54 <__ssputs_r+0x5c>
 8008e92:	6921      	ldr	r1, [r4, #16]
 8008e94:	4650      	mov	r0, sl
 8008e96:	f7ff feb7 	bl	8008c08 <_free_r>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	f8ca 3000 	str.w	r3, [sl]
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008eac:	e7e9      	b.n	8008e82 <__ssputs_r+0x8a>
	...

08008eb0 <_svfiprintf_r>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	4698      	mov	r8, r3
 8008eb6:	898b      	ldrh	r3, [r1, #12]
 8008eb8:	061b      	lsls	r3, r3, #24
 8008eba:	b09d      	sub	sp, #116	@ 0x74
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	460d      	mov	r5, r1
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	d510      	bpl.n	8008ee6 <_svfiprintf_r+0x36>
 8008ec4:	690b      	ldr	r3, [r1, #16]
 8008ec6:	b973      	cbnz	r3, 8008ee6 <_svfiprintf_r+0x36>
 8008ec8:	2140      	movs	r1, #64	@ 0x40
 8008eca:	f7ff ff09 	bl	8008ce0 <_malloc_r>
 8008ece:	6028      	str	r0, [r5, #0]
 8008ed0:	6128      	str	r0, [r5, #16]
 8008ed2:	b930      	cbnz	r0, 8008ee2 <_svfiprintf_r+0x32>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008edc:	b01d      	add	sp, #116	@ 0x74
 8008ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee2:	2340      	movs	r3, #64	@ 0x40
 8008ee4:	616b      	str	r3, [r5, #20]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eea:	2320      	movs	r3, #32
 8008eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ef4:	2330      	movs	r3, #48	@ 0x30
 8008ef6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009094 <_svfiprintf_r+0x1e4>
 8008efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008efe:	f04f 0901 	mov.w	r9, #1
 8008f02:	4623      	mov	r3, r4
 8008f04:	469a      	mov	sl, r3
 8008f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0a:	b10a      	cbz	r2, 8008f10 <_svfiprintf_r+0x60>
 8008f0c:	2a25      	cmp	r2, #37	@ 0x25
 8008f0e:	d1f9      	bne.n	8008f04 <_svfiprintf_r+0x54>
 8008f10:	ebba 0b04 	subs.w	fp, sl, r4
 8008f14:	d00b      	beq.n	8008f2e <_svfiprintf_r+0x7e>
 8008f16:	465b      	mov	r3, fp
 8008f18:	4622      	mov	r2, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff ff6b 	bl	8008df8 <__ssputs_r>
 8008f22:	3001      	adds	r0, #1
 8008f24:	f000 80a7 	beq.w	8009076 <_svfiprintf_r+0x1c6>
 8008f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f2a:	445a      	add	r2, fp
 8008f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 809f 	beq.w	8009076 <_svfiprintf_r+0x1c6>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f42:	f10a 0a01 	add.w	sl, sl, #1
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	9307      	str	r3, [sp, #28]
 8008f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f50:	4654      	mov	r4, sl
 8008f52:	2205      	movs	r2, #5
 8008f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f58:	484e      	ldr	r0, [pc, #312]	@ (8009094 <_svfiprintf_r+0x1e4>)
 8008f5a:	f7f7 f949 	bl	80001f0 <memchr>
 8008f5e:	9a04      	ldr	r2, [sp, #16]
 8008f60:	b9d8      	cbnz	r0, 8008f9a <_svfiprintf_r+0xea>
 8008f62:	06d0      	lsls	r0, r2, #27
 8008f64:	bf44      	itt	mi
 8008f66:	2320      	movmi	r3, #32
 8008f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f6c:	0711      	lsls	r1, r2, #28
 8008f6e:	bf44      	itt	mi
 8008f70:	232b      	movmi	r3, #43	@ 0x2b
 8008f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f76:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f7c:	d015      	beq.n	8008faa <_svfiprintf_r+0xfa>
 8008f7e:	9a07      	ldr	r2, [sp, #28]
 8008f80:	4654      	mov	r4, sl
 8008f82:	2000      	movs	r0, #0
 8008f84:	f04f 0c0a 	mov.w	ip, #10
 8008f88:	4621      	mov	r1, r4
 8008f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f8e:	3b30      	subs	r3, #48	@ 0x30
 8008f90:	2b09      	cmp	r3, #9
 8008f92:	d94b      	bls.n	800902c <_svfiprintf_r+0x17c>
 8008f94:	b1b0      	cbz	r0, 8008fc4 <_svfiprintf_r+0x114>
 8008f96:	9207      	str	r2, [sp, #28]
 8008f98:	e014      	b.n	8008fc4 <_svfiprintf_r+0x114>
 8008f9a:	eba0 0308 	sub.w	r3, r0, r8
 8008f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	46a2      	mov	sl, r4
 8008fa8:	e7d2      	b.n	8008f50 <_svfiprintf_r+0xa0>
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	1d19      	adds	r1, r3, #4
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	9103      	str	r1, [sp, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bfbb      	ittet	lt
 8008fb6:	425b      	neglt	r3, r3
 8008fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8008fbc:	9307      	strge	r3, [sp, #28]
 8008fbe:	9307      	strlt	r3, [sp, #28]
 8008fc0:	bfb8      	it	lt
 8008fc2:	9204      	strlt	r2, [sp, #16]
 8008fc4:	7823      	ldrb	r3, [r4, #0]
 8008fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fc8:	d10a      	bne.n	8008fe0 <_svfiprintf_r+0x130>
 8008fca:	7863      	ldrb	r3, [r4, #1]
 8008fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fce:	d132      	bne.n	8009036 <_svfiprintf_r+0x186>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9203      	str	r2, [sp, #12]
 8008fd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fdc:	3402      	adds	r4, #2
 8008fde:	9305      	str	r3, [sp, #20]
 8008fe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090a4 <_svfiprintf_r+0x1f4>
 8008fe4:	7821      	ldrb	r1, [r4, #0]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	4650      	mov	r0, sl
 8008fea:	f7f7 f901 	bl	80001f0 <memchr>
 8008fee:	b138      	cbz	r0, 8009000 <_svfiprintf_r+0x150>
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	eba0 000a 	sub.w	r0, r0, sl
 8008ff6:	2240      	movs	r2, #64	@ 0x40
 8008ff8:	4082      	lsls	r2, r0
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	3401      	adds	r4, #1
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009004:	4824      	ldr	r0, [pc, #144]	@ (8009098 <_svfiprintf_r+0x1e8>)
 8009006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800900a:	2206      	movs	r2, #6
 800900c:	f7f7 f8f0 	bl	80001f0 <memchr>
 8009010:	2800      	cmp	r0, #0
 8009012:	d036      	beq.n	8009082 <_svfiprintf_r+0x1d2>
 8009014:	4b21      	ldr	r3, [pc, #132]	@ (800909c <_svfiprintf_r+0x1ec>)
 8009016:	bb1b      	cbnz	r3, 8009060 <_svfiprintf_r+0x1b0>
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	3307      	adds	r3, #7
 800901c:	f023 0307 	bic.w	r3, r3, #7
 8009020:	3308      	adds	r3, #8
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009026:	4433      	add	r3, r6
 8009028:	9309      	str	r3, [sp, #36]	@ 0x24
 800902a:	e76a      	b.n	8008f02 <_svfiprintf_r+0x52>
 800902c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009030:	460c      	mov	r4, r1
 8009032:	2001      	movs	r0, #1
 8009034:	e7a8      	b.n	8008f88 <_svfiprintf_r+0xd8>
 8009036:	2300      	movs	r3, #0
 8009038:	3401      	adds	r4, #1
 800903a:	9305      	str	r3, [sp, #20]
 800903c:	4619      	mov	r1, r3
 800903e:	f04f 0c0a 	mov.w	ip, #10
 8009042:	4620      	mov	r0, r4
 8009044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009048:	3a30      	subs	r2, #48	@ 0x30
 800904a:	2a09      	cmp	r2, #9
 800904c:	d903      	bls.n	8009056 <_svfiprintf_r+0x1a6>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0c6      	beq.n	8008fe0 <_svfiprintf_r+0x130>
 8009052:	9105      	str	r1, [sp, #20]
 8009054:	e7c4      	b.n	8008fe0 <_svfiprintf_r+0x130>
 8009056:	fb0c 2101 	mla	r1, ip, r1, r2
 800905a:	4604      	mov	r4, r0
 800905c:	2301      	movs	r3, #1
 800905e:	e7f0      	b.n	8009042 <_svfiprintf_r+0x192>
 8009060:	ab03      	add	r3, sp, #12
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	462a      	mov	r2, r5
 8009066:	4b0e      	ldr	r3, [pc, #56]	@ (80090a0 <_svfiprintf_r+0x1f0>)
 8009068:	a904      	add	r1, sp, #16
 800906a:	4638      	mov	r0, r7
 800906c:	f3af 8000 	nop.w
 8009070:	1c42      	adds	r2, r0, #1
 8009072:	4606      	mov	r6, r0
 8009074:	d1d6      	bne.n	8009024 <_svfiprintf_r+0x174>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	065b      	lsls	r3, r3, #25
 800907a:	f53f af2d 	bmi.w	8008ed8 <_svfiprintf_r+0x28>
 800907e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009080:	e72c      	b.n	8008edc <_svfiprintf_r+0x2c>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <_svfiprintf_r+0x1f0>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4638      	mov	r0, r7
 800908e:	f000 f879 	bl	8009184 <_printf_i>
 8009092:	e7ed      	b.n	8009070 <_svfiprintf_r+0x1c0>
 8009094:	08009694 	.word	0x08009694
 8009098:	0800969e 	.word	0x0800969e
 800909c:	00000000 	.word	0x00000000
 80090a0:	08008df9 	.word	0x08008df9
 80090a4:	0800969a 	.word	0x0800969a

080090a8 <_printf_common>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	4616      	mov	r6, r2
 80090ae:	4698      	mov	r8, r3
 80090b0:	688a      	ldr	r2, [r1, #8]
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bfb8      	it	lt
 80090bc:	4613      	movlt	r3, r2
 80090be:	6033      	str	r3, [r6, #0]
 80090c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090c4:	4607      	mov	r7, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	b10a      	cbz	r2, 80090ce <_printf_common+0x26>
 80090ca:	3301      	adds	r3, #1
 80090cc:	6033      	str	r3, [r6, #0]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	0699      	lsls	r1, r3, #26
 80090d2:	bf42      	ittt	mi
 80090d4:	6833      	ldrmi	r3, [r6, #0]
 80090d6:	3302      	addmi	r3, #2
 80090d8:	6033      	strmi	r3, [r6, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	f015 0506 	ands.w	r5, r5, #6
 80090e0:	d106      	bne.n	80090f0 <_printf_common+0x48>
 80090e2:	f104 0a19 	add.w	sl, r4, #25
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	6832      	ldr	r2, [r6, #0]
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dc26      	bgt.n	800913e <_printf_common+0x96>
 80090f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	3b00      	subs	r3, #0
 80090f8:	bf18      	it	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	0692      	lsls	r2, r2, #26
 80090fe:	d42b      	bmi.n	8009158 <_printf_common+0xb0>
 8009100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009104:	4641      	mov	r1, r8
 8009106:	4638      	mov	r0, r7
 8009108:	47c8      	blx	r9
 800910a:	3001      	adds	r0, #1
 800910c:	d01e      	beq.n	800914c <_printf_common+0xa4>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	2b04      	cmp	r3, #4
 8009118:	bf02      	ittt	eq
 800911a:	68e5      	ldreq	r5, [r4, #12]
 800911c:	6833      	ldreq	r3, [r6, #0]
 800911e:	1aed      	subeq	r5, r5, r3
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	bf0c      	ite	eq
 8009124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009128:	2500      	movne	r5, #0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfc4      	itt	gt
 800912e:	1a9b      	subgt	r3, r3, r2
 8009130:	18ed      	addgt	r5, r5, r3
 8009132:	2600      	movs	r6, #0
 8009134:	341a      	adds	r4, #26
 8009136:	42b5      	cmp	r5, r6
 8009138:	d11a      	bne.n	8009170 <_printf_common+0xc8>
 800913a:	2000      	movs	r0, #0
 800913c:	e008      	b.n	8009150 <_printf_common+0xa8>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4641      	mov	r1, r8
 8009144:	4638      	mov	r0, r7
 8009146:	47c8      	blx	r9
 8009148:	3001      	adds	r0, #1
 800914a:	d103      	bne.n	8009154 <_printf_common+0xac>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	3501      	adds	r5, #1
 8009156:	e7c6      	b.n	80090e6 <_printf_common+0x3e>
 8009158:	18e1      	adds	r1, r4, r3
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	2030      	movs	r0, #48	@ 0x30
 800915e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009162:	4422      	add	r2, r4
 8009164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800916c:	3302      	adds	r3, #2
 800916e:	e7c7      	b.n	8009100 <_printf_common+0x58>
 8009170:	2301      	movs	r3, #1
 8009172:	4622      	mov	r2, r4
 8009174:	4641      	mov	r1, r8
 8009176:	4638      	mov	r0, r7
 8009178:	47c8      	blx	r9
 800917a:	3001      	adds	r0, #1
 800917c:	d0e6      	beq.n	800914c <_printf_common+0xa4>
 800917e:	3601      	adds	r6, #1
 8009180:	e7d9      	b.n	8009136 <_printf_common+0x8e>
	...

08009184 <_printf_i>:
 8009184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	7e0f      	ldrb	r7, [r1, #24]
 800918a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800918c:	2f78      	cmp	r7, #120	@ 0x78
 800918e:	4691      	mov	r9, r2
 8009190:	4680      	mov	r8, r0
 8009192:	460c      	mov	r4, r1
 8009194:	469a      	mov	sl, r3
 8009196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800919a:	d807      	bhi.n	80091ac <_printf_i+0x28>
 800919c:	2f62      	cmp	r7, #98	@ 0x62
 800919e:	d80a      	bhi.n	80091b6 <_printf_i+0x32>
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f000 80d2 	beq.w	800934a <_printf_i+0x1c6>
 80091a6:	2f58      	cmp	r7, #88	@ 0x58
 80091a8:	f000 80b9 	beq.w	800931e <_printf_i+0x19a>
 80091ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091b4:	e03a      	b.n	800922c <_printf_i+0xa8>
 80091b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091ba:	2b15      	cmp	r3, #21
 80091bc:	d8f6      	bhi.n	80091ac <_printf_i+0x28>
 80091be:	a101      	add	r1, pc, #4	@ (adr r1, 80091c4 <_printf_i+0x40>)
 80091c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	08009231 	.word	0x08009231
 80091cc:	080091ad 	.word	0x080091ad
 80091d0:	080091ad 	.word	0x080091ad
 80091d4:	080091ad 	.word	0x080091ad
 80091d8:	080091ad 	.word	0x080091ad
 80091dc:	08009231 	.word	0x08009231
 80091e0:	080091ad 	.word	0x080091ad
 80091e4:	080091ad 	.word	0x080091ad
 80091e8:	080091ad 	.word	0x080091ad
 80091ec:	080091ad 	.word	0x080091ad
 80091f0:	08009331 	.word	0x08009331
 80091f4:	0800925b 	.word	0x0800925b
 80091f8:	080092eb 	.word	0x080092eb
 80091fc:	080091ad 	.word	0x080091ad
 8009200:	080091ad 	.word	0x080091ad
 8009204:	08009353 	.word	0x08009353
 8009208:	080091ad 	.word	0x080091ad
 800920c:	0800925b 	.word	0x0800925b
 8009210:	080091ad 	.word	0x080091ad
 8009214:	080091ad 	.word	0x080091ad
 8009218:	080092f3 	.word	0x080092f3
 800921c:	6833      	ldr	r3, [r6, #0]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6032      	str	r2, [r6, #0]
 8009224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800922c:	2301      	movs	r3, #1
 800922e:	e09d      	b.n	800936c <_printf_i+0x1e8>
 8009230:	6833      	ldr	r3, [r6, #0]
 8009232:	6820      	ldr	r0, [r4, #0]
 8009234:	1d19      	adds	r1, r3, #4
 8009236:	6031      	str	r1, [r6, #0]
 8009238:	0606      	lsls	r6, r0, #24
 800923a:	d501      	bpl.n	8009240 <_printf_i+0xbc>
 800923c:	681d      	ldr	r5, [r3, #0]
 800923e:	e003      	b.n	8009248 <_printf_i+0xc4>
 8009240:	0645      	lsls	r5, r0, #25
 8009242:	d5fb      	bpl.n	800923c <_printf_i+0xb8>
 8009244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009248:	2d00      	cmp	r5, #0
 800924a:	da03      	bge.n	8009254 <_printf_i+0xd0>
 800924c:	232d      	movs	r3, #45	@ 0x2d
 800924e:	426d      	negs	r5, r5
 8009250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009254:	4859      	ldr	r0, [pc, #356]	@ (80093bc <_printf_i+0x238>)
 8009256:	230a      	movs	r3, #10
 8009258:	e011      	b.n	800927e <_printf_i+0xfa>
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	6833      	ldr	r3, [r6, #0]
 800925e:	0608      	lsls	r0, r1, #24
 8009260:	f853 5b04 	ldr.w	r5, [r3], #4
 8009264:	d402      	bmi.n	800926c <_printf_i+0xe8>
 8009266:	0649      	lsls	r1, r1, #25
 8009268:	bf48      	it	mi
 800926a:	b2ad      	uxthmi	r5, r5
 800926c:	2f6f      	cmp	r7, #111	@ 0x6f
 800926e:	4853      	ldr	r0, [pc, #332]	@ (80093bc <_printf_i+0x238>)
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	bf14      	ite	ne
 8009274:	230a      	movne	r3, #10
 8009276:	2308      	moveq	r3, #8
 8009278:	2100      	movs	r1, #0
 800927a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800927e:	6866      	ldr	r6, [r4, #4]
 8009280:	60a6      	str	r6, [r4, #8]
 8009282:	2e00      	cmp	r6, #0
 8009284:	bfa2      	ittt	ge
 8009286:	6821      	ldrge	r1, [r4, #0]
 8009288:	f021 0104 	bicge.w	r1, r1, #4
 800928c:	6021      	strge	r1, [r4, #0]
 800928e:	b90d      	cbnz	r5, 8009294 <_printf_i+0x110>
 8009290:	2e00      	cmp	r6, #0
 8009292:	d04b      	beq.n	800932c <_printf_i+0x1a8>
 8009294:	4616      	mov	r6, r2
 8009296:	fbb5 f1f3 	udiv	r1, r5, r3
 800929a:	fb03 5711 	mls	r7, r3, r1, r5
 800929e:	5dc7      	ldrb	r7, [r0, r7]
 80092a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092a4:	462f      	mov	r7, r5
 80092a6:	42bb      	cmp	r3, r7
 80092a8:	460d      	mov	r5, r1
 80092aa:	d9f4      	bls.n	8009296 <_printf_i+0x112>
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d10b      	bne.n	80092c8 <_printf_i+0x144>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	07df      	lsls	r7, r3, #31
 80092b4:	d508      	bpl.n	80092c8 <_printf_i+0x144>
 80092b6:	6923      	ldr	r3, [r4, #16]
 80092b8:	6861      	ldr	r1, [r4, #4]
 80092ba:	4299      	cmp	r1, r3
 80092bc:	bfde      	ittt	le
 80092be:	2330      	movle	r3, #48	@ 0x30
 80092c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80092c8:	1b92      	subs	r2, r2, r6
 80092ca:	6122      	str	r2, [r4, #16]
 80092cc:	f8cd a000 	str.w	sl, [sp]
 80092d0:	464b      	mov	r3, r9
 80092d2:	aa03      	add	r2, sp, #12
 80092d4:	4621      	mov	r1, r4
 80092d6:	4640      	mov	r0, r8
 80092d8:	f7ff fee6 	bl	80090a8 <_printf_common>
 80092dc:	3001      	adds	r0, #1
 80092de:	d14a      	bne.n	8009376 <_printf_i+0x1f2>
 80092e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092e4:	b004      	add	sp, #16
 80092e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	f043 0320 	orr.w	r3, r3, #32
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	4833      	ldr	r0, [pc, #204]	@ (80093c0 <_printf_i+0x23c>)
 80092f4:	2778      	movs	r7, #120	@ 0x78
 80092f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	6831      	ldr	r1, [r6, #0]
 80092fe:	061f      	lsls	r7, r3, #24
 8009300:	f851 5b04 	ldr.w	r5, [r1], #4
 8009304:	d402      	bmi.n	800930c <_printf_i+0x188>
 8009306:	065f      	lsls	r7, r3, #25
 8009308:	bf48      	it	mi
 800930a:	b2ad      	uxthmi	r5, r5
 800930c:	6031      	str	r1, [r6, #0]
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	bf44      	itt	mi
 8009312:	f043 0320 	orrmi.w	r3, r3, #32
 8009316:	6023      	strmi	r3, [r4, #0]
 8009318:	b11d      	cbz	r5, 8009322 <_printf_i+0x19e>
 800931a:	2310      	movs	r3, #16
 800931c:	e7ac      	b.n	8009278 <_printf_i+0xf4>
 800931e:	4827      	ldr	r0, [pc, #156]	@ (80093bc <_printf_i+0x238>)
 8009320:	e7e9      	b.n	80092f6 <_printf_i+0x172>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	f023 0320 	bic.w	r3, r3, #32
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	e7f6      	b.n	800931a <_printf_i+0x196>
 800932c:	4616      	mov	r6, r2
 800932e:	e7bd      	b.n	80092ac <_printf_i+0x128>
 8009330:	6833      	ldr	r3, [r6, #0]
 8009332:	6825      	ldr	r5, [r4, #0]
 8009334:	6961      	ldr	r1, [r4, #20]
 8009336:	1d18      	adds	r0, r3, #4
 8009338:	6030      	str	r0, [r6, #0]
 800933a:	062e      	lsls	r6, r5, #24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	d501      	bpl.n	8009344 <_printf_i+0x1c0>
 8009340:	6019      	str	r1, [r3, #0]
 8009342:	e002      	b.n	800934a <_printf_i+0x1c6>
 8009344:	0668      	lsls	r0, r5, #25
 8009346:	d5fb      	bpl.n	8009340 <_printf_i+0x1bc>
 8009348:	8019      	strh	r1, [r3, #0]
 800934a:	2300      	movs	r3, #0
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	4616      	mov	r6, r2
 8009350:	e7bc      	b.n	80092cc <_printf_i+0x148>
 8009352:	6833      	ldr	r3, [r6, #0]
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	6032      	str	r2, [r6, #0]
 8009358:	681e      	ldr	r6, [r3, #0]
 800935a:	6862      	ldr	r2, [r4, #4]
 800935c:	2100      	movs	r1, #0
 800935e:	4630      	mov	r0, r6
 8009360:	f7f6 ff46 	bl	80001f0 <memchr>
 8009364:	b108      	cbz	r0, 800936a <_printf_i+0x1e6>
 8009366:	1b80      	subs	r0, r0, r6
 8009368:	6060      	str	r0, [r4, #4]
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	6123      	str	r3, [r4, #16]
 800936e:	2300      	movs	r3, #0
 8009370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009374:	e7aa      	b.n	80092cc <_printf_i+0x148>
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	4632      	mov	r2, r6
 800937a:	4649      	mov	r1, r9
 800937c:	4640      	mov	r0, r8
 800937e:	47d0      	blx	sl
 8009380:	3001      	adds	r0, #1
 8009382:	d0ad      	beq.n	80092e0 <_printf_i+0x15c>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	079b      	lsls	r3, r3, #30
 8009388:	d413      	bmi.n	80093b2 <_printf_i+0x22e>
 800938a:	68e0      	ldr	r0, [r4, #12]
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	4298      	cmp	r0, r3
 8009390:	bfb8      	it	lt
 8009392:	4618      	movlt	r0, r3
 8009394:	e7a6      	b.n	80092e4 <_printf_i+0x160>
 8009396:	2301      	movs	r3, #1
 8009398:	4632      	mov	r2, r6
 800939a:	4649      	mov	r1, r9
 800939c:	4640      	mov	r0, r8
 800939e:	47d0      	blx	sl
 80093a0:	3001      	adds	r0, #1
 80093a2:	d09d      	beq.n	80092e0 <_printf_i+0x15c>
 80093a4:	3501      	adds	r5, #1
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	9903      	ldr	r1, [sp, #12]
 80093aa:	1a5b      	subs	r3, r3, r1
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	dcf2      	bgt.n	8009396 <_printf_i+0x212>
 80093b0:	e7eb      	b.n	800938a <_printf_i+0x206>
 80093b2:	2500      	movs	r5, #0
 80093b4:	f104 0619 	add.w	r6, r4, #25
 80093b8:	e7f5      	b.n	80093a6 <_printf_i+0x222>
 80093ba:	bf00      	nop
 80093bc:	080096a5 	.word	0x080096a5
 80093c0:	080096b6 	.word	0x080096b6

080093c4 <memmove>:
 80093c4:	4288      	cmp	r0, r1
 80093c6:	b510      	push	{r4, lr}
 80093c8:	eb01 0402 	add.w	r4, r1, r2
 80093cc:	d902      	bls.n	80093d4 <memmove+0x10>
 80093ce:	4284      	cmp	r4, r0
 80093d0:	4623      	mov	r3, r4
 80093d2:	d807      	bhi.n	80093e4 <memmove+0x20>
 80093d4:	1e43      	subs	r3, r0, #1
 80093d6:	42a1      	cmp	r1, r4
 80093d8:	d008      	beq.n	80093ec <memmove+0x28>
 80093da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093e2:	e7f8      	b.n	80093d6 <memmove+0x12>
 80093e4:	4402      	add	r2, r0
 80093e6:	4601      	mov	r1, r0
 80093e8:	428a      	cmp	r2, r1
 80093ea:	d100      	bne.n	80093ee <memmove+0x2a>
 80093ec:	bd10      	pop	{r4, pc}
 80093ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093f6:	e7f7      	b.n	80093e8 <memmove+0x24>

080093f8 <_sbrk_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d06      	ldr	r5, [pc, #24]	@ (8009414 <_sbrk_r+0x1c>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7f8 f812 	bl	800142c <_sbrk>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d102      	bne.n	8009412 <_sbrk_r+0x1a>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	b103      	cbz	r3, 8009412 <_sbrk_r+0x1a>
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	2000091c 	.word	0x2000091c

08009418 <memcpy>:
 8009418:	440a      	add	r2, r1
 800941a:	4291      	cmp	r1, r2
 800941c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009420:	d100      	bne.n	8009424 <memcpy+0xc>
 8009422:	4770      	bx	lr
 8009424:	b510      	push	{r4, lr}
 8009426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800942e:	4291      	cmp	r1, r2
 8009430:	d1f9      	bne.n	8009426 <memcpy+0xe>
 8009432:	bd10      	pop	{r4, pc}

08009434 <_realloc_r>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	4680      	mov	r8, r0
 800943a:	4615      	mov	r5, r2
 800943c:	460c      	mov	r4, r1
 800943e:	b921      	cbnz	r1, 800944a <_realloc_r+0x16>
 8009440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009444:	4611      	mov	r1, r2
 8009446:	f7ff bc4b 	b.w	8008ce0 <_malloc_r>
 800944a:	b92a      	cbnz	r2, 8009458 <_realloc_r+0x24>
 800944c:	f7ff fbdc 	bl	8008c08 <_free_r>
 8009450:	2400      	movs	r4, #0
 8009452:	4620      	mov	r0, r4
 8009454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009458:	f000 f81a 	bl	8009490 <_malloc_usable_size_r>
 800945c:	4285      	cmp	r5, r0
 800945e:	4606      	mov	r6, r0
 8009460:	d802      	bhi.n	8009468 <_realloc_r+0x34>
 8009462:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009466:	d8f4      	bhi.n	8009452 <_realloc_r+0x1e>
 8009468:	4629      	mov	r1, r5
 800946a:	4640      	mov	r0, r8
 800946c:	f7ff fc38 	bl	8008ce0 <_malloc_r>
 8009470:	4607      	mov	r7, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	d0ec      	beq.n	8009450 <_realloc_r+0x1c>
 8009476:	42b5      	cmp	r5, r6
 8009478:	462a      	mov	r2, r5
 800947a:	4621      	mov	r1, r4
 800947c:	bf28      	it	cs
 800947e:	4632      	movcs	r2, r6
 8009480:	f7ff ffca 	bl	8009418 <memcpy>
 8009484:	4621      	mov	r1, r4
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fbbe 	bl	8008c08 <_free_r>
 800948c:	463c      	mov	r4, r7
 800948e:	e7e0      	b.n	8009452 <_realloc_r+0x1e>

08009490 <_malloc_usable_size_r>:
 8009490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009494:	1f18      	subs	r0, r3, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfbc      	itt	lt
 800949a:	580b      	ldrlt	r3, [r1, r0]
 800949c:	18c0      	addlt	r0, r0, r3
 800949e:	4770      	bx	lr

080094a0 <sqrtf>:
 80094a0:	b508      	push	{r3, lr}
 80094a2:	ed2d 8b02 	vpush	{d8}
 80094a6:	eeb0 8a40 	vmov.f32	s16, s0
 80094aa:	f000 f8a5 	bl	80095f8 <__ieee754_sqrtf>
 80094ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80094b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b6:	d60c      	bvs.n	80094d2 <sqrtf+0x32>
 80094b8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80094d8 <sqrtf+0x38>
 80094bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80094c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c4:	d505      	bpl.n	80094d2 <sqrtf+0x32>
 80094c6:	f7ff fb73 	bl	8008bb0 <__errno>
 80094ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80094ce:	2321      	movs	r3, #33	@ 0x21
 80094d0:	6003      	str	r3, [r0, #0]
 80094d2:	ecbd 8b02 	vpop	{d8}
 80094d6:	bd08      	pop	{r3, pc}
 80094d8:	00000000 	.word	0x00000000

080094dc <fmax>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	ed2d 8b04 	vpush	{d8-d9}
 80094e2:	eeb0 8a40 	vmov.f32	s16, s0
 80094e6:	eef0 8a60 	vmov.f32	s17, s1
 80094ea:	eeb0 9a41 	vmov.f32	s18, s2
 80094ee:	eef0 9a61 	vmov.f32	s19, s3
 80094f2:	f000 f81d 	bl	8009530 <__fpclassifyd>
 80094f6:	b950      	cbnz	r0, 800950e <fmax+0x32>
 80094f8:	eeb0 8a49 	vmov.f32	s16, s18
 80094fc:	eef0 8a69 	vmov.f32	s17, s19
 8009500:	eeb0 0a48 	vmov.f32	s0, s16
 8009504:	eef0 0a68 	vmov.f32	s1, s17
 8009508:	ecbd 8b04 	vpop	{d8-d9}
 800950c:	bd08      	pop	{r3, pc}
 800950e:	eeb0 0a49 	vmov.f32	s0, s18
 8009512:	eef0 0a69 	vmov.f32	s1, s19
 8009516:	f000 f80b 	bl	8009530 <__fpclassifyd>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0f0      	beq.n	8009500 <fmax+0x24>
 800951e:	ec53 2b19 	vmov	r2, r3, d9
 8009522:	ec51 0b18 	vmov	r0, r1, d8
 8009526:	f7f7 fa17 	bl	8000958 <__aeabi_dcmpgt>
 800952a:	2800      	cmp	r0, #0
 800952c:	d0e4      	beq.n	80094f8 <fmax+0x1c>
 800952e:	e7e7      	b.n	8009500 <fmax+0x24>

08009530 <__fpclassifyd>:
 8009530:	ec51 0b10 	vmov	r0, r1, d0
 8009534:	b510      	push	{r4, lr}
 8009536:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800953a:	460b      	mov	r3, r1
 800953c:	d019      	beq.n	8009572 <__fpclassifyd+0x42>
 800953e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8009542:	490e      	ldr	r1, [pc, #56]	@ (800957c <__fpclassifyd+0x4c>)
 8009544:	428a      	cmp	r2, r1
 8009546:	d90e      	bls.n	8009566 <__fpclassifyd+0x36>
 8009548:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800954c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8009550:	428a      	cmp	r2, r1
 8009552:	d908      	bls.n	8009566 <__fpclassifyd+0x36>
 8009554:	4a0a      	ldr	r2, [pc, #40]	@ (8009580 <__fpclassifyd+0x50>)
 8009556:	4213      	tst	r3, r2
 8009558:	d007      	beq.n	800956a <__fpclassifyd+0x3a>
 800955a:	4294      	cmp	r4, r2
 800955c:	d107      	bne.n	800956e <__fpclassifyd+0x3e>
 800955e:	fab0 f080 	clz	r0, r0
 8009562:	0940      	lsrs	r0, r0, #5
 8009564:	bd10      	pop	{r4, pc}
 8009566:	2004      	movs	r0, #4
 8009568:	e7fc      	b.n	8009564 <__fpclassifyd+0x34>
 800956a:	2003      	movs	r0, #3
 800956c:	e7fa      	b.n	8009564 <__fpclassifyd+0x34>
 800956e:	2000      	movs	r0, #0
 8009570:	e7f8      	b.n	8009564 <__fpclassifyd+0x34>
 8009572:	2800      	cmp	r0, #0
 8009574:	d1ee      	bne.n	8009554 <__fpclassifyd+0x24>
 8009576:	2002      	movs	r0, #2
 8009578:	e7f4      	b.n	8009564 <__fpclassifyd+0x34>
 800957a:	bf00      	nop
 800957c:	7fdfffff 	.word	0x7fdfffff
 8009580:	7ff00000 	.word	0x7ff00000

08009584 <fminf>:
 8009584:	b508      	push	{r3, lr}
 8009586:	ed2d 8b02 	vpush	{d8}
 800958a:	eeb0 8a40 	vmov.f32	s16, s0
 800958e:	eef0 8a60 	vmov.f32	s17, s1
 8009592:	f000 f815 	bl	80095c0 <__fpclassifyf>
 8009596:	b930      	cbnz	r0, 80095a6 <fminf+0x22>
 8009598:	eeb0 8a68 	vmov.f32	s16, s17
 800959c:	eeb0 0a48 	vmov.f32	s0, s16
 80095a0:	ecbd 8b02 	vpop	{d8}
 80095a4:	bd08      	pop	{r3, pc}
 80095a6:	eeb0 0a68 	vmov.f32	s0, s17
 80095aa:	f000 f809 	bl	80095c0 <__fpclassifyf>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d0f4      	beq.n	800959c <fminf+0x18>
 80095b2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80095b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ba:	d5ed      	bpl.n	8009598 <fminf+0x14>
 80095bc:	e7ee      	b.n	800959c <fminf+0x18>
	...

080095c0 <__fpclassifyf>:
 80095c0:	ee10 3a10 	vmov	r3, s0
 80095c4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80095c8:	d00d      	beq.n	80095e6 <__fpclassifyf+0x26>
 80095ca:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80095ce:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80095d2:	d30a      	bcc.n	80095ea <__fpclassifyf+0x2a>
 80095d4:	4b07      	ldr	r3, [pc, #28]	@ (80095f4 <__fpclassifyf+0x34>)
 80095d6:	1e42      	subs	r2, r0, #1
 80095d8:	429a      	cmp	r2, r3
 80095da:	d908      	bls.n	80095ee <__fpclassifyf+0x2e>
 80095dc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80095e0:	4258      	negs	r0, r3
 80095e2:	4158      	adcs	r0, r3
 80095e4:	4770      	bx	lr
 80095e6:	2002      	movs	r0, #2
 80095e8:	4770      	bx	lr
 80095ea:	2004      	movs	r0, #4
 80095ec:	4770      	bx	lr
 80095ee:	2003      	movs	r0, #3
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	007ffffe 	.word	0x007ffffe

080095f8 <__ieee754_sqrtf>:
 80095f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80095fc:	4770      	bx	lr
	...

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
